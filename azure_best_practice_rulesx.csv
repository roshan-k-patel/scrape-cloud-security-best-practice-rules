Title, Azure Service, Risk, ID, Description, Rationale, Audit Goal, Audit Console, Audit Cli, Remediation Console, Remediation Cli, Link
Remove Custom Owner Roles,Access Control,Medium (should be achieved),AccessControl-001,Ensure that there are no custom subscription owner roles available in your Azure account in order to adhere to cloud security best practices and implement the principle of least privilege - the practice of providing every user the minimal amount of access required to perform its tasks.,Typical Azure subscription administrator roles offer basic access management. A custom subscription owner role has full administrative access as its assignable scope is the entire subscription and it can perform any action (i.e. "*"). As security best practice it is strongly recommended that the least necessary permissions are given initially. Permissions can be added later as needed by the account holder. This ensures that the Azure account holder cannot perform actions which were not intended.,To determine if there are any custom owner roles available in your Microsoft Azure account perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to Azure Subscriptions blade at https://portal.azure.com/#blade/Microsoft_Azure_Billing/SubscriptionsBlade.			03				Click on the Azure cloud subscription that you want to examine.			04				In the navigation panel choose Access control (IAM) and select the Roles tab to access the role definitions available for the selected subscription.			05				Select CustomRole option from the Type dropdown list to return all custom roles available.			06				Click on the custom definition role that you want to examine and select the Permissions tab to view all the permissions associated with the selected role. If the role can perform all actions i.e. it can manage everything in the permissions list the selected Azure role definition represents a custom subscription owner role.			07				Repeat steps no. 6 for other custom roles that you want to examine available in the current Azure subscription.			08				Repeat step no. 3 â 7 for each available Microsoft Azure cloud subscription.			,01				Run role definition list command (Windows/macOS/Linux) using built-in and custom query filters to list the names of all custom role definitions (i.e. roles) created for the current Azure subscription:az role definition list	--custom-role-only true	--query '[].{roleName:roleName}'	--output table02				The command output should return a table that contains the names of all the custom roles available:RoleName-----------------------Azure ManagerAPI Service ContributorCloud Data Reader03				Run role definition list command (OSX/Linux/UNIX) using the name of the custom role that you want to examine as identifier parameter value to describe the selected role metadata:az role definition list	--name Azure Manager04				The command output should return an array with the requested information (i.e. role metadata):[  {    "assignableScopes": [      "/subscriptions/abcdabcd-1234-1234-1234-abcdabcdabcd"    ]    "description": "Manages Azure Cloud Account Resources."    "id": "/subscriptions/abcdabcd-1234-1234-1234-abcdabcdabcd/providers/Microsoft.Authorization/roleDefinitions/abcdabcd-abcd-abcd-abcd-abcdabcdabcd"    "name": "abcdabcd-abcd-abcd-abcd-abcdabcdabcd"    "permissions": [      {        "actions": [          "*"        ]        "dataActions": [          "Microsoft.Storage/storageAccounts/blobServices/containers/blobs/*"        ]        "notActions": []        "notDataActions": [          "Microsoft.Storage/storageAccounts/blobServices/containers/blobs/write"        ]      }    ]    "roleName": "Azure Manager"    "roleType": "CustomRole"    "type": "Microsoft.Authorization/roleDefinitions"  }]			If the assignableScopes attribute value is set to "/" or "/subscriptions/<azure-subscription-id>" and the actions value is set to "*" (i.e. everything) as shown in the output example above the selected Microsoft Azure role definition represents a custom owner role.			05				Repeat step no. 3 and 4 for each Azure custom role definition that you want to examine.			,01				Sign in to Azure Management Console.			02				Navigate to Azure Subscriptions blade at https://portal.azure.com/#blade/Microsoft_Azure_Billing/SubscriptionsBlade.			03				Click on the Azure cloud subscription that you want to examine.			04				In the navigation panel choose Access control (IAM) and select the Roles tab to access the role definitions available for the selected subscription.			05				Select CustomRole option from the Type dropdown list to return all custom roles available.			06				Select the custom subscription owner role that you want to delete (see Audit section part I to identify the right role) and click the Remove button from the blade top menu to initiate the removal process.			07				On Remove role definitions confirmation panel click Yes to remove the selected role definition. From now on the deleted role can no longer be assigned as part of a role assignment.			08				If required repeat step no. 6 and 7 to remove other custom owner roles available in the current Azure subscription.			09				Repeat step no. 3 â 8 for each Microsoft Azure cloud subscription available.			,01				Run role definition delete command (Windows/macOS/Linux) using the name of the custom owner role that you want to delete as identifier parameter value (see Audit section part II to identify the right role) to remove the selected role definition from your Microsoft Azure account. The deleted role can no longer be assigned as part of a role assignment (the role definition delete command request does not produce an output):az role definition delete	--name Azure Manager02				Repeat step no. 1 for each Azure custom owner role definition that you want to delete.			,https://www.cloudconformity.com/knowledge-base/azure/AccessControl/remove-custom-owner-roles.html
Allow Only Administrators to Create Security Groups,Active Directory,High (not acceptable risk),ActiveDirectory-017,Ensure that "Users can create security groups in Azure portals" is set to "No" within your Azure Active Directory settings in order to make sure that non-privileged users are not able to create security groups via the Access Panel and the Azure administration portal.,Security groups are used to manage member and machine access to Azure shared resources for a group of users. When "Users can create security groups in Azure portals" feature is enabled all users in your Active Directory account are allowed to create new security groups and add members to those groups. Unless your business requires permission delegation security group creation should be restricted to AD administrators only.,To determine if non-privileged users have the ability to create security groups in Azure portals perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to Azure Active Directory blade at https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/Overview.			03				In the navigation panel select Groups.			04				In the Settings section select General to access Active Directory user group general settings.			05				On the General settings page under Security Groups check Users can create security groups in Azure portals setting configuration. If the verified setting is set to Yes any Active Directory users including those without administrative privileges can create security groups using the Access Panel and Azure administration portal therefore the current Azure AD user group configuration is not compliant.			06				Repeat steps no. 3 â 5 for each Microsoft Azure Active Directory that you want to examine.			,01				Sign in to Azure Management Console.			02				Navigate to Azure Active Directory blade at https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/Overview.			03				In the navigation panel select Groups.			04				In the Settingssection select General to access Active Directory user group general settings.			05				On the General settings page under Security Groups select No next to Users can create security groups in Azure portals configuration setting to disable non-privileged users' ability to create security groups using Azure portals.			06				Click Save to apply the changes. If the request is successful the following message should be displayed: "Successfully updated group settings". Once the configuration changes are active only the Active Directory users with an administrator role can create security groups using the Access Panel and the Azure administration portal.			07				Repeat steps no. 3 â 6 for each Active Directory (AD) that you want to reconfigure in order to restrict security groups creation to AD administrators only.			,,,https://www.cloudconformity.com/knowledge-base/azure/ActiveDirectory/users-can-create-security-groups.html
Allow Only Administrators to Manage Office 365 Groups,Active Directory,High (should be achieved),ActiveDirectory-020,Ensure that "Owners who can assign members as group owners in Azure portals" policy is set to "None" within your Azure Active Directory settings in order to make sure that non-privileged users are not able to manage Office 365 groups via the Access Panel and the Azure Admin portal. By default all owners can assign other members as group owners in Azure Active Directory.,Depending on your business requirements you can use Azure Active Directory settings to achieve more granular access control over self-service group management for your users. Restricting Office 365 group management to Active Directory administrators only prohibits users from making any changes to this type of groups. This ensures that Office 365 groups management is not delegated to unauthorized users.,To determine if non-administrator users have the ability to manage Office 365 groups in Azure portals perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to Azure Active Directory (AD) blade at https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/Overview.			03				In the navigation panel select Groups.			04				In the Settings section select General to access Active Directory user group general settings.			05				On the General settings page under Office 365 Groups check Owners who can assign members as group owners in Azure portals setting configuration. If Owners who can assign members as group owners in Azure portals is set to All or Selected (i.e. the list of users selected to manage Office 365 groups) there are Active Directory users including users without administrative privileges that can manage Office 365 groups using the Access Panel and the Azure Admin portal.			06				Repeat steps no. 3 â 5 for each Microsoft Azure Active Directory that you want to examine.			,01				Sign in to Azure Management Console.			02				Navigate to Azure Active Directory blade at https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/Overview.			03				In the navigation panel select Groups.			04				In the Settings section select General to access Active Directory user group general settings.			05				On the General settings page under Office 365 Groups select None next to Owners who can assign members as group owners in Azure portals configuration setting to disable the non-privileged users' ability to manage Office 365 groups using Azure portals.			06				Click Save to apply the changes. If successful the following message should be displayed: "Successfully updated group settings". Once the configuration changes are saved only the Active Directory administrators can manage Microsoft Office 365 groups using the Access Panel and the Azure Admin portal.			07				Repeat steps no. 3 â 6 for each Active Directory (AD) that you want to reconfigure in order to restrict Office 365 groups management to AD administrators only.			,,,https://www.cloudconformity.com/knowledge-base/azure/ActiveDirectory/users-can-manage-office-365-groups.html
Allow Only Administrators to Manage Security Groups,Active Directory,High (not acceptable risk),ActiveDirectory-018,Ensure that "Owners who can assign members as group owners in Azure portals" is set to "None" in your Azure Active Directory settings in order to make sure that non-privileged users are not able to manage security groups via the Access Panel and the Azure Admin portal.,Restricting security group management to Active Directory administrators only prohibits users from making changes to security groups. This ensures that security groups are managed solely by designated authorized users within your Azure Active Directory account.,To determine if non-admin users have the ability to manage security groups in Azure portals perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to Azure Active Directory blade at https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/Overview.			03				In the navigation panel select Groups.			04				In the Settings section select General to access Active Directory user group general settings.			05				On the General settings page under Security Groups check Owners who can assign members as group owners in Azure portals setting configuration. If Owners who can assign members as group owners in Azure portals is set to All or Selected (i.e. the list of users selected to manage security groups) there are Active Directory users including users without administrative privileges that can manage security groups using the Access Panel and the Azure Admin portal.			06				Repeat steps no. 3 â 5 for each Microsoft Azure Active Directory that you want to examine.			,01				Sign in to Azure Management Console.			02				Navigate to Azure Active Directory blade at https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/Overview.			03				In the navigation panel select Groups.			04				In the Settingssection select General to access Active Directory user group general settings.			05				On the General settings page under Security Groups select None next to Owners who can assign members as group owners in Azure portals configuration setting to disable the non-privileged users' ability to manage security groups using Azure portals.			06				Click Save to apply the changes. If successful the following message should be displayed: "Successfully updated group settings". Once the configuration changes are saved only the Active Directory users with an administrator role can manage security groups using the Access Panel and the Azure Admin portal.			07				Repeat steps no. 3 â 6 for each Active Directory (AD) that you want to reconfigure in order to restrict security groups management to AD administrators only.			,,,https://www.cloudconformity.com/knowledge-base/azure/ActiveDirectory/users-who-can-manage-security-groups.html
Check for Active Directory Guest Users,Active Directory,Medium (should be achieved),ActiveDirectory-003,For a Microsoft Azure business-to-business (B2B) collaboration each Active Directory (AD) guest user needs to be associated with a business owner or business process. When there is no need for B2B collaboration ensure that there are no AD guest users available within your Microsoft Azure account.,An Active Directory business-to-business (B2B) collaboration is used to securely share your applications and services with guest users and external partners from other organizations while maintaining full control over your own data. Azure AD is configured to handle B2B collaborations allowing you to invite people from outside your organization to be guest users within your Azure cloud account. Unless you have a real business need that requires to provide guest access to external users avoid creating such guest users. Active Directory guest users are usually added outside the employee onboarding/offboarding process managed by your company and this can eventually lead to potential security vulnerabilities.,To determine if there are any Active Directory guest users available in your Azure account perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to Azure Active Directory blade at Azure Portal.			03				In the navigation panel select Users to list all Active Directory users.			04				Select Guest users only from Show dropdown menu to return the guest users available (if any). If one or more users are listed there are Active Directory guest users created within your Azure account thus your Active Directory user configuration is not compliant.			05				Repeat step no. 3 and 4 for each Active Directory (AD) available in your Microsoft Azure cloud account.			,01				Run ad user list command (Windows/macOS/Linux) using query filters to list all Azure Active Directory (AD) guest users:az ad user list   --query "[?userType=='Guest']"02				The command output should return the configuration metadata for each Active Directory guest user currently available in your Azure account (if any):[  {    "accountEnabled": true    "createdDateTime": "2019-05-01T10:47:42Z"    "creationType": "Invitation"    "employeeId": null    "jobTitle": null    "lastDirSyncTime": null    "legalAgeGroupClassification": null    "mail": "adproject@cloudconformity.com"    "mobile": null    "objectId": "abcdabcd-1234-1234-1234-abcd1234abcd"    "objectType": "User"    "odata.type": "Microsoft.DirectoryServices.User"    "onPremisesDistinguishedName": null    "onPremisesSecurityIdentifier": null    ...    "refreshTokensValidFromDateTime": "2019-05-02T10:41:42Z"    "showInAddressList": false    "signInNames": []    "sipProxyAddress": null    "state": null    "streetAddress": null    "surname": null    "telephoneNumber": null    "thumbnailPhoto@odata.mediaEditLink": "directoryObjects/abcdabcd-1234-1234-1234-abcd1234abcd/Microsoft.DirectoryServices.User/thumbnailPhoto"    "usageLocation": null    "userIdentities": []    "userPrincipalName": "adproject@cloudconformity.com#EXT#@azuremanager@cloudconformity.onmicrosoft.com"    "userStateChangedOn": "2019-05-02T10:41:42Z"    "userType": "Guest"  }]			If ad user list command output returns configuration metadata for one or more users as shown in the example above there are Active Directory guest users available in your Azure account therefore your Active Directory user configuration is not compliant.			03				Repeat step no. 1 and 2 for each Active Directory (AD) available in your Microsoft Azure cloud account.			,01				Execute the following Microsoft Graph API call to list all Azure Active Directory external/guest users within your AD tenant:GET https://graph.microsoft.com/beta/users?$filter=userType eq "Guest"02				The command output should return the existing metadata for each Active Directory guest user currently available in your Azure AD account:[  {    "accountEnabled": true    "creationType": "Invitation"    "employeeId": null    "lastDirSyncTime": null    "legalAgeGroupClassification": null    "mail": "adproject@cloudconformity.com"    "objectId": "abcdabcd-1234-1234-1234-abcd1234abcd"    "objectType": "User"    "odata.type": "Microsoft.DirectoryServices.User"    "onPremisesDistinguishedName": null    "onPremisesSecurityIdentifier": null    ...    "showInAddressList": false    "sipProxyAddress": null    "state": null    "streetAddress": null    "surname": null    "telephoneNumber": null    "usageLocation": null    "userIdentities": []    "userPrincipalName": "adproject@cloudconformity.com#EXT#@azuremanager@cloudconformity.onmicrosoft.com"    "userType": "Guest"  }]			If the Graph API call output returns configuration metadata for one or more users as shown in the example above there are Active Directory guest users available in your Azure AD account therefore your Active Directory user configuration is not compliant.			03				Repeat step no. 1 and 2 for each Active Directory (AD) available in your Microsoft Azure cloud account.			,01				Sign in to Azure Management Console.			02				Navigate to Azure Active Directory blade at Azure Portal.			03				In the navigation panel select Users to display all Active Directory users.			04				Select Guest users only from Show dropdown menu to list the guest users available.			05				Select the Azure Active Directory guest user(s) that you want to remove (see Audit section part I to identify the appropriate user(s)).			06				Click on the Delete user button from the dashboard top menu to initiate the removal process.			07				Within Delete selected users confirmation box choose Yes to delete the selected AD guest user(s).			08				If necessary repeat steps no. 3 â 7 for each Active Directory (AD) provisioned in your Microsoft Azure cloud account.			,https://www.cloudconformity.com/knowledge-base/azure/ActiveDirectory/check-for-guest-users.html
Disable Remembering Multi-Factor Authentication,Active Directory,High (should be achieved),ActiveDirectory-004,Ensure that "Allow users to remember multi-factor authentication on devices they trust" feature is disabled within your Microsoft Azure account in order to make sure that your users are not allowed to bypass MFA. Multi-Factor Authentication is an efï¬cient method of verifying your Azure user identity by requiring an authentication code generated by a virtual or hardware device in addition to your usual access credentials.,Remembering Multi-Factor Authentication (MFA) for devices and browsers allows Microsoft Azure users to have the option to bypass MFA for a certain number of days after performing a successful sign-in using an MFA passcode. Remembering MFA can enhance usability by minimizing the number of times a user may need to perform two-step verification on the same device however if an account or device is compromised remembering Multi-Factor Authentication for trusted devices and browsers can lead to security breaches. When "Allow users to remember multi-factor authentication on devices they trust" feature is disabled for every login attempt the users will be required to perform Multi-Factor Authentication.,To determine "Allow users to remember multi-factor authentication on devices they trust" feature status perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to Azure Active Directory (AD) blade at https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/Overview.			03				In the navigation panel select Users.			04				Click on the Multi-Factor Authentication button from the AD blade top menu.			05				On the Multi-Factor Authentication management page click service settings to access the MFA configuration settings.			06				On the service settings page under remember multi-factor authentication check the Allow users to remember multi-factor authentication on devices they trust configuration setting. If Allow users to remember multi-factor authentication on devices they trust feature is enabled i.e. the checkbox is selected the AD users can bypass Multi-Factor Authentication (MFA) after a successful sign-in therefore the MFA configuration is not compliant.			,01				Sign in to Azure Management Console.			02				Navigate to Azure Active Directory (AD) blade at https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/Overview.			03				In the navigation panel select Users.			04				Click on the Multi-Factor Authentication button from the AD service blade top menu.			05				On the Multi-Factor Authentication management page click service settings to access the MFA configuration settings.			06				On the service settings page under remember multi-factor authentication uncheck Allow users to remember multi-factor authentication on devices they trust checkbox to disable remembering Multi-Factor Authentication (MFA) after a successful sign-in. Disabling this feature means that all users will be required to sign in using MFA on each login attempt even if the request is performed from a previously-remembered device or browser. Click Save to apply the configuration changes and Close to return to the Multi-Factor Authentication service settings page.			,,,https://www.cloudconformity.com/knowledge-base/azure/ActiveDirectory/multi-factor-authentication-on-devices.html
Disable Self-Service Group Management,Active Directory,High (should be achieved),ActiveDirectory-016,Ensure that non-administrator users do not have the ability to create and manage security groups and Office 365 groups within your Azure Active Directory. Once self-service group management is disabled for non-admin users these can't change their groups configuration anymore and can't manage their memberships by approving requests from other users to join their existing groups.,Self-service group management enables users to create and manage security groups or Office 365 groups in Azure Active Directory (AD). Self-service group management can also group owners to assign ownership to other users. Since these groups can grant access to sensitive and private information or Azure AD critical configuration self-service group management feature should be disabled for all non-administrator users.,To determine if self-service group management is disabled within your Active Directory group settings perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to Azure Active Directory blade at https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/Overview.			03				In the navigation panel select Groups.			04				In the Settings section select General to access Active Directory user group general settings.			05				On the General settings page under Self Service Group Management check the configuration for both Owners can manage group membership requests in the Access Panel and Restrict access to Groups in the Access Panel settings. If both these settings are set to Yes the self-service group management feature is enabled for all Active Directory users (including non-administrator users) therefore the current Azure AD user group configuration is not compliant.			06				Repeat steps no. 3 â 5 for each Microsoft Azure Active Directory that you want to examine.			,01				Sign in to Azure Management Console.			02				Navigate to Azure Active Directory blade at https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/Overview.			03				In the navigation panel select Groups.			04				In the Settings section select General to access Active Directory user group general settings.			05				On the General settings page under Self Service Group Management select No next to both Owners can manage group membership requests in the Access Panel and Restrict access to Groups in the Access Panel settings to disable self-service group management feature for Active Directory non-administrator users.			06				Click Save to apply the changes. If the request is successful the following message should be displayed: "Successfully updated group settings". Once the configuration changes are active only the Active Directory users with an administrator role can access the user group features available on the Access Panel for creating and managing (including handling membership) security groups and Office 365 groups in the current directory.			07				Repeat steps no. 3 â 6 for each Active Directory (AD) that you want to reconfigure in order to disable self-service group management for non-administrator users.			,,,https://www.cloudconformity.com/knowledge-base/azure/ActiveDirectory/self-service-group-management-enabled.html
Enable All Users Group,Active Directory,Medium (should be achieved),ActiveDirectory-021,Ensure that "Enable an 'All Users' group in the directory" policy is set to "Yes" in your Azure Active Directory (AD) settings in order to enable the "All Users" group for centralized access administration. This group represents the entire collection of the Active Directory users including guests and external users that you can use to make the access permissions easier to manage within your directory.,The "All Users" group can be used to assign the same permissions to all the users within an Azure Active Directory account. For example all users in a directory can be given access to a SaaS application by assigning a specific set of permissions that allows application access to the "All Users" dedicated group. This ensures that there is a common policy created for all the existing and future users and there is no need to implement individual access permissions.,To determine if "All Users" group is enabled for centralized administration in your Azure AD directory perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to Azure Active Directory (AD) blade at https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/Overview.			03				In the navigation panel select Groups.			04				In the Settings section select General to access Active Directory user group general settings.			05				On the General settings page under Directory-wide Groups check Enable an "All Users" group in the directory feature configuration. If Enable an "All Users" group in the directory is set to No the "All Users" dedicated group necessary for centralized administration in not enabled in your current Active Directory account.			06				Repeat steps no. 3 â 5 for each Microsoft Azure Active Directory that you want to examine.			,01				Sign in to Azure Management Console.			02				Navigate to Azure Active Directory blade at https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/Overview.			03				In the navigation panel select Groups.			04				In the Settings section select General to access Active Directory user group general settings.			05				On the General settings page under Directory-wide Groups select Yes next to Enable an "All Users" group in the directory configuration setting to enable the dedicated "All Users" group that combines all users available in your directory including guests and external users.			06				Click Save to apply the changes. If successful the following message should be displayed: "Successfully updated group settings". Once the configuration changes are saved the specialized "All Users" group can be used for centralized access administration in your current Active Directory account.			07				Repeat steps no. 3 â 6 for each Active Directory (AD) that you want to reconfigure in order to enable the dedicated "All Users" group.			,,,https://www.cloudconformity.com/knowledge-base/azure/ActiveDirectory/enable-all-users-group.html
Enable Authentication Reconfirmation,Active Directory,Medium (should be achieved),ActiveDirectory-006,Ensure that the number of days before Microsoft Azure Active Directory (AD) users are asked to re-confirm their authentication information is not set to 0 (zero) in order to enforce them to reconfirm their authentication details regularly.,The "Number of days before users are asked to re-confirm their authentication information" represents the period of time up to a maximum of 730 days before AD registered users are prompted to reconfirm their existing authentication details to make sure that these are still valid. If authentication reconfirmation is disabled i.e. set to zero days the Active Directory users will never be prompted to reconfirm their existing authentication information. If one or more authentication details set for an AD user changes the password reset information for that user reverts to the previously registered authentication information.,To determine the number of days before users are asked to reconfirm their authentication details perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to Azure Active Directory (AD) blade at https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/Overview.			03				In the navigation panel select Users.			04				Under All users select Password reset to access the password reset configuration settings available for Active Directory users.			05				In the blade navigation panel select Registration.			06				On the Registration configuration page check the value (integer) set for the Number of days before users are asked to re-confirm their authentication information setting. If the verified configuration value is 0 the authentication information reconfirmation for Active Directory users is not enabled within the AD password reset policy.			07				Repeat steps no. 3 â 6 for each Azure Active Directory that you want to examine.			,01				Sign in to Azure Management Console.			02				Navigate to Azure Active Directory (AD) blade at https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/Overview.			03				In the navigation panel select Users to access the panel with the AD users.			04				Under All users select Password reset to access the password reset configuration settings available for Active Directory users.			05				In the blade navigation panel select Registration.			06				On the Registration settings page enter the period of time (up to 730 days) before your AD registered users are prompted to reconfirm their existing authentication in the Number of days before users are asked to re-confirm their authentication information box.			07				Click Save to apply the configuration changes. Once the changes are saved the following message should be displayed: "Password reset policy saved. Changes to password reset policy were saved successfully".			08				Click Save to apply the configuration changes. If successful the following confirmation message should be displayed: "Password reset policy saved. Changes to password reset policy were saved successfully".			09				Repeat steps no. 3 â 7 for each Microsoft Azure Active Directory that you want to reconfigure in order to enable user authentication information reconfirmation.			,,,https://www.cloudconformity.com/knowledge-base/azure/ActiveDirectory/number-of-days-before-authentication-information-re-confirmation.html
Enable Dual Identification for Password Reset,Active Directory,Medium (should be achieved),ActiveDirectory-005,Ensure that two alternate forms of user identification are provided before allowing a password reset for your Microsoft Azure Active Directory (AD). A user password can be successfully reset when at least the number of methods required for the password reset configured in Azure Active Directory settings is provided.,Enabling dual identification before allowing a password reset in your Azure Active Directory account enhances access security by ensuring that the user identity is confirmed by two separate forms of identification such as email and SMS. When the number of methods required to reset a user password is set to 2 (two) an attacker would need to compromise both the identity forms configured before he or she could maliciously reset an Azure AD user password.,To determine if at least two methods of identification are configured for Azure AD user password reset perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to Azure Active Directory (AD) blade at https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/Overview.			03				In the navigation panel select Users.			04				Under All users select Password reset to access the password reset configuration settings available for Active Directory users.			05				In the navigation panel select Authentication methods.			06				On the Authentication methods settings page check the Number of methods required to reset configuration value. If this value is not set to 2 the number of methods required for user password reset is not compliant therefore dual identification for password reset is not enabled for your Microsoft Azure Active Directory users.			07				Repeat steps no. 3 â 6 for each Microsoft Azure Active Directory that you want to examine.			,01				Sign in to Azure Management Console.			02				Navigate to Azure Active Directory (AD) blade at https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/Overview.			03				In the navigation panel select Users.			04				Under All users select Password reset to access the password reset configuration settings available for Active Directory users.			05				In the blade navigation panel select Authentication methods.			06				On the Authentication methods configuration page select 2 for Number of methods required to reset setting to enable users to choose at least two methods of identification required for password reset.			07				For Methods available to users select at least two identification methods (e.g. Email and Mobile phone (SMS only)) as alternate methods of user identification necessary during password reset.			08				Click Save to apply the configuration changes. If successful the following confirmation message should be displayed: "Password reset policy saved. Changes to password reset policy were saved successfully".			09				Repeat steps no. 3 â 8 for each Microsoft Azure Active Directory that you want to reconfigure in order to enable dual identification for user password reset.			,,,https://www.cloudconformity.com/knowledge-base/azure/ActiveDirectory/number-of-methods-required-to-reset-password.html
Enable Multi-Factor Authentication for Non-Privileged Users,Active Directory,Medium (not acceptable risk),ActiveDirectory-002,Ensure that Multi-Factor Authentication (MFA) is enabled for non-privileged users such as developers service readers or operators in order to help safeguard the access to Microsoft Azure cloud data and applications. MFA reduces organizational risk and helps achieving regulatory compliance by providing an additional layer of security on top of the existing user credentials using a second form of authentication to secure employee customer and partner access. By default Multi-Factor Authentication is disabled for all Microsoft Azure users.,MFA represents a simple and efficient method of validating your Azure cloud user identity by requiring an authentication code generated by a virtual or hardware device in addition to your usual access credentials i.e. user name and password. With Azure Multi-Factor Authentication enabled if an attacker manages to discover the user's password the authentication information exposed is useless without having also access to the additional authentication method (in this case the MFA device).,To determine if MFA is enabled for non-privileged Azure users perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to Azure Active Directory blade at Azure Portal.			03				In the navigation panel select Users.			04				Click on the Multi-Factor Authentication button available in the blade top menu.			05				From View dropdown list select Sign-in allowed users to list all Azure users that are allowed to sign-in to the Management Console.			06				Choose the non-privileged user that you want to examine and check the MFA feature status available in the MULTI-FACTOR AUTH STATUS column. If the status is set to Disabled Multi-Factor Authentication is not enabled therefore the authentication process for the selected non-privileged Microsoft Azure user is not MFA-protected.			07				Repeat steps no. 6 for each user that you want to examine available in your Azure account.			,01				Run ad user list command (Windows/macOS/Linux) with custom query filters to list all Azure Active Directory users available within your account:az ad user list	--query '[].{userPrincipalName:userPrincipalName}'	--output table02				The command output should return all your Active Directory (AD) user names:UserPrincipalName------------------------------------------------datadeveloper@cloudconformity.onmicrosoft.comsecuritymanager@cloudconformity.onmicrosoft.comidentityoperator@cloudconformity.onmicrosoft.com03				Run role assignment list command (Windows/macOS/Linux) using query filters to return the name of the access control role(s) assigned to the Azure AD user that you want to examine:az role assignment list	--include-classic-administrators true	--assignee datadeveloper@cloudconformity.onmicrosoft.com	--query '[].{roleDefinitionName:roleDefinitionName}'04				The command output should return an array that contains the name of the role assigned to the specified Azure Active Directory user. The role name indicates if the specified user is privileged or not. All user roles except Owner *Contributor or *Administrator are considered non-privileged:				If the roleDefinitionName attribute value is set something different than Owner *Contributor or *Administrator such as *Developer â as shown in the output example above the selected user does not have privileged access therefore the Audit process continues with the next step. Otherwise the user has privileged access and the rule audit ends here.			05				Open a Windows PowerShell command prompt and run Install-Module MSOnline command to install MSOnline PowerShell module for Azure Active Directory. Make sure that you run PowerShell as an administrator for this command:			06				Run Connect-MsolService PowerShell command to connect to your Azure Active Directory (AD) environment. Once the command request is made you should be prompted for your AD credentials. To connect to a specific environment of Active Directory use -AzureEnvironment parameter as shown in the example above (replace highlighted parameter value with your own AD information):			07				Run Get-MsolUser PowerShell command with custom query filters to identify if the selected Azure Active Directory user has Multi-Factor Authentication (MFA) feature enabled:			08				The command output returns the name of the examined Azure user if MFA is disabled otherwise the command does not produce an output at all:							If Get-MsolUser command output returns the name of the specified user the Multi-Factor Authentication feature is not enabled thus the authentication process for the selected non-privileged Microsoft Azure user is not MFA-protected.			09				Repeat steps no. 3 â 8 for each Azure Active Directory user that you want to examine.			,01				Sign in to Azure Management Console.			02				Navigate to Azure Active Directory blade at Azure Portal.			03				In the navigation panel select Users.			04				Click on the Multi-Factor Authentication button available in the blade top menu.			05				On the Multi-Factor Authentication management page click service settings to access the MFA configuration settings.			06				On the service settings page under verification options select the method(s) that you want to use for Multi-Factor Authentication feature from Methods available to users section.			07				Click Save to apply the changes then click Close to return to the settings page.			08				Click users and select Sign-in allowed users to list all users that are allowed to sign-in to the Azure Management Console.			09				Select the user that you want to enroll in MFA (see Audit section part I to identify the right AD user) then click Enable under quick steps in the right menu.			10				Inside the confirmation box click enable multi-factor auth to enable Multi-Factor Authentication for the selected Azure user. Click Close to return to the console.			11				Install Microsoft Authenticator application then sign in to your Microsoft Azure account with the user configured for MFA earlier in the process. Once signed in you will be redirected to the Additional security verification page and asked to complete the MFA registration process.			12				On the verification page under Step 1: How should we contact you select Mobile app and Use verification code option to specify how do you want to use the authenticator app. Click Set up to start the registration process.			13				Open the mobile application choose Add account add and select Work or school account option.			14				Inside Configure mobile app box scan the generated QR code image using the Microsoft Authenticator app. Once the application displays a six-digit code click Next to continue the process.			15				Back on the Additional security verification page click Next. Under Step 2: Enter the verification code from the mobile app enter the verification code displayed on your Microsoft Authenticator app and click Verify.			16				For Step 3: In case you lose access to the mobile app provide a phone number that will be used for verification in case you donât have access to the MFA device anymore then choose Next. Click Done to finish the MFA registration process. The MFA state for the user should be automatically switched to the Enforced once the registration process is complete.			17				Repeat steps no. 9 â 16 for each non-privileged user that you want to configure for MFA protection available in your Azure account.			,01				Open a Windows PowerShell command prompt and run Install-Module MSOnline command to install MSOnline PowerShell module for Azure Active Directory. Make sure that you run PowerShell as an administrator for this command:Install-Module MSOnline02				Run Connect-MsolService PowerShell command to connect to your Azure Active Directory (AD) environment. Once the command request is made you should be prompted for your AD credentials. To connect to a specific environment of Active Directory use -AzureEnvironment parameter as shown in the example above (replace highlighted parameter value with your own AD information):Connect-MsolService -AzureEnvironment "<ad-environment-name>"03				Define the Multi-Factor Authentication (MFA) configuration requirements that will be used later as value for the âStrongAuthenticationRequirements parameter in order to enable MFA using Set-MsolUser command:$config = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement$config.RelyingParty = "*"$config.State = "Enabled"$mfaconfig = @($config)04				Run Set-MsolUser PowerShell command (using MSOnline module) using the name of the non-privileged user that you want to reconfigure as âUserPrincipalName parameter value (see Audit section part II to identify the right user) and the MFA feature requirements parameter defined at the previous step to update the selected user configuration in order to enable Multi-Factor Authentication (MFA):Set-MsolUser-UserPrincipalName datadeveloper@cloudconformity.onmicrosoft.com-StrongAuthenticationRequirements $mfaconfig05				Now that Multi-Factor Authentication is enabled for the selected Azure user you have to start the MFA registration process. Install Microsoft Authenticator application and sign in to your Microsoft Azure account with the user configured for MFA at the previous step. Once signed in you will be redirected to the Additional security verification page and asked to complete the registration process.			06				On the verification page under Step 1: How should we contact you select Mobile app and Use verification code option to specify how do you want to use the authenticator application. Click Set up to initiate the registration process.			07				Open the mobile app choose Add account add and select Work or school account.			08				Inside Configure mobile app box scan the generated QR code using the Microsoft Authenticator app. Once the application displays a six-digit code click Next to continue.			09				Back on the Additional security verification page click Next to continue the process. Under Step 2: Enter the verification code from the mobile app enter the verification code displayed on your Microsoft Authenticator app and click Verify.			10				For Step 3: In case you lose access to the mobile app provide a phone number that will be used for verification in case you donât have access to the MFA device anymore then choose Next. Click Done to finish the MFA registration process. The user MFA status should be automatically switched to Enforced once the registration process is complete.			11				Repeat steps no. 1 â 10 for each non-privileged Microsoft Azure user that you want to reconfigure in order to enable Multi-Factor Authentication.			,https://www.cloudconformity.com/knowledge-base/azure/ActiveDirectory/multi-factor-authentication-for-all-non-privileged-users.html
Enable Multi-Factor Authentication for Privileged Users,Active Directory,Medium (not acceptable risk),ActiveDirectory-001,Ensure that Multi-Factor Authentication is enabled for all user credentials that have write access to the cloud resources within your Microsoft Azure account. Multi-Factor Authentication (MFA) is a simple yet efï¬cient method of verifying your Azure user identity by requiring an authentication code generated by a virtual or hardware device also known as passcode used in addition to your usual access credentials such as user name and password.,Having an MFA-protected Azure account represents an efficient way to safeguard your cloud resources against malicious users and attackers as Multi-Factor Authentication adds extra security to the authentication process by requiring privileged users (contributors subscription owners and service co-administrators) to present a minimum of two separate forms of authorization before their access is granted. With Multi-Factor Authentication (MFA) enabled an attacker would need to compromise at least two different authentication mechanisms increasing the difficulty of compromising access credentials and thus reducing the risk of attack significantly.,To determine if MFA is enabled for all Microsoft Azure privileged users perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to Azure Active Directory blade at Azure Portal.			03				In the navigation panel select Users.			04				Click on the Multi-Factor Authentication button available in the blade top menu. This will open Azure MFA management portal.			05				From View dropdown list select the privileged user category that you want to examine. The privileged users can be owners co-administrators or contributors.			06				Choose the user that you want to examine and check the feature status available in the MULTI-FACTOR AUTH STATUS column. If the status is Disabled the MFA feature is not enabled therefore the authentication process for the selected privileged Microsoft Azure user is not MFA-protected.			07				Repeat steps no. 6 for each user that you want to examine available in the current user category.			08				Repeat step no. 5 â 7 for each privileged user category within the Azure Active Directory.			,01				Run ad user list command (Windows/macOS/Linux) using query filters to list all Azure Active Directory (AD) users:az ad user list	--query '[].{userPrincipalName:userPrincipalName}'	--output table02				The command output should return a table that contains all your Active Directory user names:UserPrincipalName-----------------------------------------------azuremanager@cloudconformity.onmicrosoft.comazadministrator@cloudconformity.onmicrosoft.com03				Run role assignment list command (Windows/macOS/Linux) with custom query filters to return the name of the access control role(s) assigned to the AD user that you want to examine:az role assignment list	--include-classic-administrators true	--assignee azuremanager@cloudconformity.onmicrosoft.com	--query '[].{roleDefinitionName:roleDefinitionName}'04				The command output should return an array that contains the name of the role assigned to the specified Azure Active Directory user. The role name indicates if the examined user is privileged (i.e. has write access to Azure resources) or not. The name of the privileged user role must be Owner *Contributor or *Administrator:				If the roleDefinitionName attribute value is set to Owner *Contributor or *Administrator as shown in the output example above the selected user has privileged access thus the Audit process continues with the next step. Otherwise the user is not privileged and the conformity rule audit ends here.			05				Open an elevated Windows PowerShell command prompt (i.e. run PowerShell as an administrator) and run Install-Module MSOnline command to install MSOnline PowerShell module for Azure Active Directory:			06				Run Connect-MsolService PowerShell command to connect to your Azure Active Directory (AD) environment. Once the command request is made you should be prompted for your AD credentials. To connect to a specific environment of Active Directory use -AzureEnvironment parameter as shown in the example above (replace highlighted placeholder with your own AD environment name):			07				Run Get-MsolUser PowerShell command (using MSOnline module) with custom query filters to identify if the selected Azure AD user has registered for Multi-Factor Authentication (MFA):			08				The command output returns the verified AD user name if MFA is disabled otherwise the command does not produce an output at all:							If Get-MsolUser command output returns the name of the examined user the MFA feature is not enabled therefore the authentication process for the selected privileged Microsoft Azure user is not MFA-protected.			09				Repeat steps no. 3 â 8 for each Azure Active Directory user that you want to examine.			,01				Sign in to Azure Management Console.			02				Navigate to Azure Active Directory blade at Azure Portal.			03				In the navigation panel select Users.			04				Click on the Multi-Factor Authentication button available in the blade top menu.			05				On the Multi-Factor Authentication management page click service settings to access the MFA configuration settings.			06				On the service settings page under verification options select the method(s) that you want to use for Multi-Factor Authentication from Methods available to users.			07				Click Save to apply the changes then click Close to return to the settings page.			08				Click users and select the appropriate privileged user category from the View dropdown list. The privileged users can be owners co-administrators or contributors.			09				Select the user that you want to enroll in MFA (see Audit section part I to identify the right user) and click Enable under quick steps in the right menu.			10				On the action confirmation box click enable multi-factor auth to enable Multi-Factor Authentication for the selected Microsoft Azure user. Click Close to return to the console.			11				Install Microsoft Authenticator application then sign in to your Microsoft Azure account with the user configured for MFA at the previous steps. Once signed in you will be redirected to the Additional security verification page and asked to complete the MFA registration process.			12				 On the verification page under Step 1: How should we contact you select Mobile app and Use verification code option to specify how do you want to use the Microsoft Authenticator app. Click Set up to initiate the registration process.			13				Open the mobile app choose Add account add and select Work or school account.			14				Inside Configure mobile app box scan the generated QR code using the Microsoft Authenticator app. Once the application displays a six-digit code click Next.			15				Back on the Additional security verification page click Next to continue the process. Under Step 2: Enter the verification code from the mobile app enter the verification code displayed on your Microsoft Authenticator app and click Verify.			16				For Step 3: In case you lose access to the mobile app provide a phone number that will be used for adding phone verification to your user password then choose Next. Click Done to finish the MFA registration process. The MFA state for the user should be automatically switched to Enforced once the registration process is completed.			17				Repeat steps no. 9 â 16 for each privileged user that you want to reconfigure for MFA available in the current user category.			18				Repeat step no. 9 â 17 for each privileged user category within your Azure Active Directory.			,01				Open an elevated Windows PowerShell command prompt (i.e. run PowerShell as an administrator) and run Install-Module MSOnline command to install MSOnline PowerShell module for Azure Active Directory:Install-Module MSOnline02				Run Connect-MsolService PowerShell command to connect to your Azure Active Directory (AD) environment. Once the command request is made you should be prompted for your AD credentials. To connect to a specific environment of Active Directory use -AzureEnvironment parameter as shown in the example above (replace highlighted details with your own AD details):Connect-MsolService -AzureEnvironment "<ad-environment-name>"03				Define an array of strong authentication (i.e. MFA) requirements that will be used later as value for the âStrongAuthenticationRequirements parameter in order to activate MFA using the Set-MsolUser command:$mfa = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement$mfa.RelyingParty = "*"$mfa.State = "Enabled"$setmfa = @($mfa)04				Run Set-MsolUser PowerShell command (using MSOnline module) using the name of the user that you want to reconfigure as âUserPrincipalName parameter value (see Audit section part II to identify the right user) and the strong authentication requirements parameter defined at the previous step to update the selected user configuration in order to enable Multi-Factor Authentication (MFA):Set-MsolUser-UserPrincipalName azuremanager@cloudconformity.onmicrosoft.com-StrongAuthenticationRequirements $setmfa05				Now that the feature is enabled for the selected Azure user you have to start the Multi-Factor Authentication (MFA) registration process. Install Microsoft Authenticator application then sign in to your Microsoft Azure account with the user configured for MFA at the previous step. Once signed in you will be redirected to the Additional security verification page and prompted to complete the registration process.			06				On the verification page under Step 1: How should we contact you select Mobile app and Use verification code option to specify how do you want to use the Microsoft Authenticator app. Click Set up to initiate the registration process.			07				Open the mobile app choose Add account add and select Work or school account.			08				Inside Configure mobile app box scan the generated QR code using the Microsoft Authenticator app. Once the application displays a six-digit code click Next.			09				Back on the Additional security verification page click Next to continue the process. Under Step 2: Enter the verification code from the mobile app enter the verification code displayed on your Microsoft Authenticator app and click Verify.			10				For Step 3: In case you lose access to the mobile app provide a phone number that will be used for adding phone verification to your user password then choose Next. Click Done to finish the MFA registration process. The user MFA status should be automatically switched to the Enforced once the registration process is completed.			11				Repeat steps no. 1 â 10 for each privileged Microsoft Azure user that you want to reconfigure in order to enable Multi-Factor Authentication (MFA).			,https://www.cloudconformity.com/knowledge-base/azure/ActiveDirectory/multi-factor-authentication-for-all-privileged-users.html
Enable Notifications for Administrator Password Resets,Active Directory,High (should be achieved),ActiveDirectory-008,Ensure that Active Directory global administrators receive emails on their primary email address notifying them when other administrators reset their password using the Azure AD Self-Service Password Reset (SSPR) portal. When "Notify all admins when other admins reset their password?" setting is set to "Yes" all AD administrators receive emails notifications alerting them that another administrator has changed their password via the SSPR.,When Azure Active Directory detects password reset activity for admin users email notifications are sent to all administrators to make sure that these privileged users can passively confirm if such a reset is a common pattern within their group. For example if your organization password policy requires to change all administrator passwords every 30 days any password reset activity detected before that may require administrator(s) to evaluate it as unusual activity and confirm its origin in order to ensure that the reset action is authorized.,To determine if Active Directory (AD) administrators are notified on password resets perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to Azure Active Directory (AD) blade at https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/Overview.			03				In the navigation panel select Users.			04				Under All users select Password reset to access Azure Active Directory password reset configuration settings.			05				In the navigation panel select Notifications.			06				On the Notifications configuration panel verify the Notify all admins when other admins reset their password? setting value. If this value is set to No "Notify all admins when other admins reset their password" feature is not enabled therefore Azure Active Directory admins do not receive email alerts when other administrators reset their own passwords.			07				Repeat steps no. 3 â 6 for each Microsoft Azure Active Directory that you want to examine.			,01						Sign in to Azure Management Console.					02						Navigate to Azure Active Directory (AD) blade at https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/Overview.					03						In the navigation panel select Users.					04						Under All users select Password reset to access Azure Active Directory password reset configuration settings.					05						In the blade navigation panel select Notifications.					06						On the Notifications configuration panel select Yes under Notify all admins when other admins reset their password? to enable the feature.					07						Click Save to apply the configuration changes. If the request is successful the following message should be displayed: "Password reset policy saved. Changes to password reset policy were saved successfully". Once "Notify all admins when other admins reset their password" feature is enabled all global administrators should receive email notifications when other administrators reset their own passwords using the Self-Service Password Reset (SSPR) portal. For example if your Azure AD account has three administrators A B and C when admin A resets its password using the SSPR admins B and C should receive an email alerting them of the password reset performed by admin A.					08						Repeat steps no. 3 â 7 for each Microsoft Azure Active Directory that you want to reconfigure in order to enable email notifications for administrator password resets.					,,,https://www.cloudconformity.com/knowledge-base/azure/ActiveDirectory/notify-all-admins-when-other-admins-reset-their-password.html
Enable Notifications for User Password Resets,Active Directory,Medium (should be achieved),ActiveDirectory-007,Ensure that Active Directory users receive emails on their primary and alternate email addresses notifying them when their own password has been reset through the Azure AD Self-Service Password Reset (SSPR) portal.,Email notifications for Azure AD user password reset represents a passive way of confirming password reset activity. This method helps you and other users within your organization to recognize unauthorized password resets. Once "Notify users on password resets" feature is enabled all Active Directory users that are resetting their password receive an email notifying them that their password has been changed.,To determine if "Notify users on password resets" feature is enabled in the Active Directory SSPR portal perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to Azure Active Directory (AD) blade at https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/Overview.			03				In the navigation panel select Users.			04				Under All users select Password reset to access Azure Active Directory password reset configuration settings.			05				In the blade navigation panel select Notifications.			06				On the Notifications configuration panel check the Notify users on password resets? setting value. If this value is set to No "Notify users on password resets" feature is not currently enabled thus Azure Active Directory (AD) users do not receive email notifications for their password reset activity.			07				Repeat steps no. 3 â 6 for each Microsoft Azure Active Directory that you want to examine.			,01				Sign in to Azure Management Console.			02				Navigate to Azure Active Directory (AD) blade at https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/Overview.			03				In the navigation panel select Users.			04				Under All users select Password reset to access Azure Active Directory password reset configuration settings.			05				In the navigation panel select Notifications.			06				On the Notifications configuration panel select Yes under Notify users on password resets? to enable the feature.			07				Click Save to apply the configuration changes. Once saved the following message should be displayed: "Password reset policy saved. Changes to password reset policy were saved successfully". With "Notify users on password resets" feature enabled an email is sent via the SSPR portal to your defined primary and secondary email addresses for each password reset.			08				Repeat steps no. 3 â 7 for each Microsoft Azure Active Directory that you want to reconfigure in order to enable email notifications for user password resets.			,,,https://www.cloudconformity.com/knowledge-base/azure/ActiveDirectory/notify-users-on-password-resets.html
Enforce Administrators to Provide Consent for Apps Before Use,Active Directory,High (not acceptable risk),ActiveDirectory-009,Ensure that only Microsoft Azure Active Directory (AD) administrators are allowed to provide consent for third-party multi-tenant applications before users may use them by disabling "Users can consent to apps accessing company data on their behalf" feature.,Unless your Azure Active Directory is running as an identity provider for third-party applications do not allow users to use their identity outside the Azure cloud environment. By switching "Users can consent to apps accessing company data on their behalf" to "No" within the Active Directory user settings you can deny third-party applications to access AD user profile data as this data contains private information such as email addresses and phone numbers which can be sold to other third parties without requiring any further consent from the user.,To determine if AD administrators are enforced to provide consent for applications before users may use them perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to Azure Active Directory blade at Azure Portal.			03				In the navigation panel select Users.			04				Under All users select User settings to access Azure Active Directory user configuration settings.			05				On the User settings configuration page under Enterprise applications click Manage how end users launch and view their applications.			06				On the Enterprise applications panel check the Users can consent to apps accessing company data on their behalf setting configuration. If this setting is set to Yes the "Users can consent to apps accessing company data on their behalf" feature is enabled therefore all Azure Active Directory (AD) users can consent to third-party applications.			07				Repeat steps no. 3 â 6 for each Microsoft Azure Active Directory that you want to examine.			,01				Open an elevated Windows PowerShell command prompt (i.e. run PowerShell as an administrator) and run Install-Module MSOnline command to install MSOnline PowerShell module for Azure Active Directory:Install-Module MSOnline02				Run Connect-MsolService PowerShell command to connect to your Azure Active Directory (AD) environment. Once the command request is made you should be prompted for your AD credentials. To connect to a specific environment of Active Directory use -AzureEnvironment parameter as shown in the example above (replace the highlighted parameter value with your own AD environment name):Connect-MsolService -AzureEnvironment "<ad-environment-name>"03				Run Get-MsolCompanyInformation PowerShell command with custom query filters to identify if the current Azure Active Directory account is configured to allow non-administrator users to consent to applications:Get-MsolCompanyInformation | fl UsersPermissionToUserConsentToAppEnabled04				The command output should return the "Users can consent to apps accessing company data on their behalf" feature status (True for enabled False for disabled):UsersPermissionToUserConsentToAppEnabled : True-----------------------------------------------			If UsersPermissionToUserConsentToAppEnabled configuration attribute is set to True as shown in the example above the feature is currently enabled thus all Azure Active Directory (AD) users can consent to third-party applications without administrator consent.			05				Repeat steps no. 1 - 4 for each Microsoft Azure Active Directory that you want to examine.			,01				Sign in to Azure Management Console.			02				Navigate to Azure Active Directory (AD) blade at Azure Portal.			03				In the navigation panel select Users.			04				Under All users select User settings to access Azure Active Directory user configuration settings.			05				On the User settings configuration page under Enterprise applications click Manage how end users launch and view their applications.			06				On the Enterprise applications panel select No next to Users can consent to apps accessing company data on their behalf setting to disable all Active Directory users' ability to consent to applications that require access to their cloud user data such as directory user profile or Office 365 email address.			07				Click Save to apply the configuration changes. If the request is successful the following message should be displayed: "Successfully updated user settings".			08				CRepeat steps no. 3 â 7 for each Active Directory (AD) that you want to reconfigure to enforce administrator consent for using third-party applications.			,01				Open an elevated Windows PowerShell command prompt (i.e. run PowerShell as an administrator) and run Install-Module MSOnline command to install MSOnline PowerShell module for Azure Active Directory:Install-Module MSOnline02				Run Connect-MsolService PowerShell command to connect to your Azure Active Directory (AD) environment. Once the command request is made you should be prompted for your AD credentials. To connect to a specific environment of Active Directory use -AzureEnvironment parameter as shown in the example above (replace the highlighted parameter value with your own AD environment name):Connect-MsolService -AzureEnvironment "<ad-environment-name>"03				The command output should return the "Users can consent to apps accessing company data on their behalf" feature status (True for enabled False for disabled):Set-MsolCompanySettings -UsersPermissionToUserConsentToAppEnabled:$false04				Repeat steps no. 1 - 3 for each Microsoft Azure Active Directory that you want to reconfigure in order to enforce AD administrator consent for using applications.			,https://www.cloudconformity.com/knowledge-base/azure/ActiveDirectory/users-can-consent-to-apps-accessing-company-data-on-their-behalf.html
Limit Guest User Permissions,Active Directory,High (not acceptable risk),ActiveDirectory-012,Ensure that "Guest user permissions are limited" safety feature is enabled within your Azure Active Directory (AD) settings in order to implement the principle of least privilege and enhance the access security to your Active Directory account. The principle of least privilege represents the practice of providing every user the minimal amount of access required to perform successfully its tasks.,When "Guest user permissions are limited" feature is disabled guests have the same access to your AD data that regular users have in your directory. By enabling the feature (i.e. limiting guest access) you have the guarantee that guest accounts do not have permission for certain Active Directory tasks such as enumerating users groups or other directory resources and cannot be assigned to administrative roles within your Azure AD account.,To determine if user permissions for Active Directory guest users are limited perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to Azure Active Directory (AD) blade at https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/Overview.			03				In the navigation panel select Users.			04				Under All users select User settings to access Azure Active Directory user settings.			05				On the User settings configuration page under External users click Manage external collaboration settings.			06				On the Manage external collaboration settings page verify the Guest users permissions are limited setting configuration. If the option is set to No the Active Directory (AD) guest users permissions are limited thus the Azure AD user configuration is not compliant.			07				Repeat steps no. 3 â 6 for each Microsoft Azure Active Directory that you want to examine.			,01				Sign in to Azure Management Console.			02				Navigate to Azure Active Directory blade at https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/Overview.			03				In the navigation panel select Users.			04				Under All users select User settings to access Azure Active Directory user settings.			05				On the User settings configuration page under External users click Manage external collaboration settings.			06				On Manage external collaboration settings page select Yes under Guest users permissions are limited to limit Active Directory (AD) guest users permissions so these users receive the same access to AD data that regular users have in your directory.			07				Click Save to apply the configuration changes. If the request is successful the following message should be displayed: "Successfully saved invitation policy". Once the changes are saved the guest users should not have permissions anymore for certain Active Directory tasks such as enumerate users groups or other directory resources.			08				Repeat steps no. 3 â 7 for each Active Directory (AD) that you want to reconfigure in order to limit guest user permissions.			,,,https://www.cloudconformity.com/knowledge-base/azure/ActiveDirectory/guest-user-permissions-are-limited.html
Require MFA to Join Devices,Active Directory,Medium (should be achieved),ActiveDirectory-022,Multi-Factor Authentication should be mandatory when users are adding devices to the Azure Active Directory. This ensures that no rogue devices can be registered to your directory by compromised user accounts. When "Require Multi-Factor Auth to join devices" is set to "Yes" users who are adding devices from the Internet are forced to use the second method of authentication before their devices can be successfully added to your directory.,To determine if Multi-Factor Authentication is required for device enrollment in your AD account perform the following actions:,To determine if non-administrator users have the ability to manage Office 365 groups in Azure portals perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to Azure Active Directory (AD) blade at https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/Overview.			03				In the navigation panel select Devices.			04				In the Manage section under All devices select Device settings to access Active Directory device general settings.			05				On Device settings page check the Require Multi-Factor Auth to join devices feature settings. If the feature configuration is set to No Multi-Factor Authentication (MFA) is not required when adding devices to the current Azure Active Directory therefore the configuration is not compliant.			06				Repeat steps no. 3 â 5 for each Microsoft Azure Active Directory that you want to examine.			,01				Sign in to Azure Management Console.			02				Navigate to Azure Active Directory blade at https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/Overview.			03				In the navigation panel select Devices.			04				In the Manage section under All devices select Device settings to access Active Directory device general settings.			05				On the Device settings page select Yes next to Require Multi-Factor Auth to join devices configuration setting to enable the feature.			06				Click Save to apply the changes. If successful the following message should be displayed: "Successfully updated device settings". Once the configuration changes are saved all users that are adding devices to your directory must use Multi-Factor Authentication (MFA).			07				Repeat steps no. 3 â 6 for each Active Directory (AD) that you want to reconfigure in order to enable MFA for requesting a second method of authentication when joining devices.			,,,https://www.cloudconformity.com/knowledge-base/azure/ActiveDirectory/require-multi-factor-auth-to-join-devices.html
Restrict Adding Gallery Apps to Access Panel,Active Directory,High (should be achieved),ActiveDirectory-010,Ensure that "Users can add gallery apps to their Access Panel" setting is set to "No" within your Azure Active Directory user settings so that the administrators can evaluate and integrate first these applications in order for users to see them on their access panels.,Azure Access Panel is a web-based portal that enables Active Directory (AD) users to view and start cloud-based applications that the AD administrator has granted them access to. When "Users can add gallery apps to their Access Panel" setting is enabled the Active Directory users are allowed to add any application that supports password Single Sign-On (SSO) to appear on their Access Panel without an administrator needing to pre-integrate that application thus bypassing the evaluation and integration process recommended for each gallery app.,To determine if AD users are allowed to add cloud applications to the Access Panel perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to Azure Active Directory (AD) blade at https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/Overview.			03				In the navigation panel select Users.			04				Under All users select User settings to access Azure Active Directory user configuration settings.			05				On the User settings configuration page under Enterprise applications click Manage how end users launch and view their applications.			06				On the Enterprise applications page check the Users can add gallery apps to their Access Panel setting configuration. If the setting is set to Yes the Active Directory (AD) users are allowed to add applications to their Access Panel bypassing the Azure administrator evaluation and integration of those applications.			07				Repeat steps no. 3 â 6 for each Microsoft Azure Active Directory that you want to examine.			,01						Sign in to Azure Management Console.					02						avigate to Azure Active Directory blade at https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/Overview.					03						In the navigation panel select Users.					04						Under All users select User settings to access Azure Active Directory user configuration settings.					05						On the User settings configuration page under Enterprise applications click Manage how end users launch and view their applications.					06						On the Enterprise applications page select No next to Users can add gallery apps to their Access Panel setting to disable Active Directory users' ability to add cloud-based applications to their Azure Access Panel.					07						Click Save to apply the configuration changes. If the request is successful the following message should be displayed: "Successfully updated user settings". Once the changes are saved only Azure administrators are allowed to add applications to the users Access Panel having a better control over the app provisioning process.					08						Repeat steps no. 3 â 7 for each Active Directory (AD) that you want to reconfigure to restrict users' ability to add applications to their Azure Access Panel.					,,,https://www.cloudconformity.com/knowledge-base/azure/ActiveDirectory/users-can-add-gallery-apps-to-their-access-panel.html
Restrict Application Registration for Non-Privileged Users,Active Directory,High (should be achieved),ActiveDirectory-011,Ensure that "Users can register applications" feature is disabled within your Azure Active Directory (AD) settings so that only AD administrators can register third-party applications after these are reviewed and evaluated from the security standpoint.,To adhere to cloud security best practices it is strongly recommended to allow only users with administrator roles to register custom-developed applications using Azure Active Directory. This ensures that each application goes through a rigorous security review before exposing Active Directory data to it.,To determine if all Active Directory (AD) users are allowed to register third-party applications perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to Azure Active Directory (AD) blade at https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/Overview.			03				In the navigation panel select Users.			04				Under All users select User settings to access Azure Active Directory user configuration settings.			05				On the User settings configuration page under App registrations check the Users can register applications setting configuration. If the verified setting is set to Yes the Active Directory users are allowed to register third-party applications therefore the Azure AD user configuration is not secure.			06				Repeat steps no. 3 â 5 for each Microsoft Azure Active Directory that you want to examine.			,01				Sign in to Azure Management Console.			02				Navigate to Azure Active Directory blade at https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/Overview.			03				In the navigation panel select Users.			04				Under All users select User settings to access Azure Active Directory user settings.			05				On the User settings configuration page under App registrations select No next to Users can register applications setting to disable Active Directory users' ability to register third-party applications inside the current directory.			06				Click Save to apply the configuration changes. If the request is successful the following message should be displayed: "Successfully updated user settings". Once the changes are saved only Azure users with an administrator role can register custom-developed applications.			07				Repeat steps no. 3 â 6 for each Active Directory (AD) that you want to reconfigure to restrict users' ability to register third-party applications.			,,,https://www.cloudconformity.com/knowledge-base/azure/ActiveDirectory/users-can-register-applications.html
Restrict Guest User Invitations,Active Directory,High (should be achieved),ActiveDirectory-014,Ensure that "Guests can invite" setting is set to "No" in your Azure Active Directory (AD) user settings so that the guest users within your directory cannot invite themselves other guests to collaborate on cloud resources secured by your Active Directory account.,Active Directory external collaboration settings are enabling you to turn guest invitations on or off for different types of users available in your organization. To ensure that only authorized guest users have access to your Azure cloud resources allow only AD administrators to send invitations for collaboration by disabling "Guests can invite" feature. This should help maintain need-to-know permissions and prevents unintended access to your Azure data.,To determine if guest users can invite themselves other guest users for collaboration perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to Azure Active Directory (AD) blade at https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/Overview.			03				In the navigation panel select Users.			04				Under All users select User settings to access Azure Active Directory user settings.			05				On the User settings configuration page under External users click Manage external collaboration settings.			06				On Manage external collaboration settings page check the Guests can invite setting configuration. If the verified setting is set to Yes Active Directory (AD) guest users are allowed to invite other guest users to collaborate with your organization thus your Azure AD external collaboration configuration is not compliant.			07				Repeat steps no. 3 â 6 for each Microsoft Azure Active Directory that you want to examine.			,01				Sign in to Azure Management Console.			02				Navigate to Azure Active Directory blade at https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/Overview.			03				In the navigation panel select Users.			04				Under All users select User settings to access Azure Active Directory user settings.			05				On the User settings configuration page under External users click Manage external collaboration settings.			06				On the Manage external collaboration settings page select No under Guests can invite to restrict guest users' ability to invite other guests to collaborate with your organization and to use your Active Directory and Azure cloud resources.			07				Click Save to apply the configuration changes. If successful the following message should be displayed: "Successfully saved invitation policy".			08				Repeat steps no. 3 â 7 for each Active Directory (AD) that you want to reconfigure in order to restrain guest users from sending invitation for collaboration to other guests.			,,,https://www.cloudconformity.com/knowledge-base/azure/ActiveDirectory/guests-can-invite.html
Restrict Invitations to Administrators Only,Active Directory,High (should be achieved),ActiveDirectory-013,Ensure that "Members can invite" policy is set to "No" within your Azure Active Directory (AD) user settings so that non-administrator members cannot invite guest users to collaborate on resources secured by your Azure Active Directory such as SharePoint sites or certain Azure cloud resources.,Restricting the ability to send invitations to AD administrators only prevents inadvertent access to your Active Directory data and ensures that only authorized accounts have access to your Azure cloud resources.,To determine if non-admin members can invite guests for collaboration perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to Azure Active Directory (AD) blade at https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/Overview.			03				In the navigation panel select Users.			04				Under All users select User settings to access Azure Active Directory user settings.			05				On the User settings configuration page under External users click Manage external collaboration settings.			06				On  Manage external collaboration settings page verify the Members can invite setting configuration. If Members can invite is set to Yes the non-administrator members of your directory can invite guest users to collaborate on your secured Active Directory resources hence the Azure AD external collaboration configuration is not compliant.			07				Repeat steps no. 3 â 6 for each Microsoft Azure Active Directory that you want to examine.			,01				Sign in to Azure Management Console.			02				Navigate to Azure Active Directory blade at https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/Overview.			03				In the navigation panel select Users.			04				Under All users select User settings to access Azure Active Directory user settings.			05				On the User settings configuration page under External users click Manage external collaboration settings.			06				On the Manage external collaboration settings page select No under Members can invite to disable the non-administrators ability to invite guest users to collaborate on your Active Directory resources.			07				Click Save to apply the configuration changes. If successful the following message should be displayed: "Successfully saved invitation policy". Once the changes are saved only Azure Active Directory (AD) administrators can invite guest users to your current directory.			08				Repeat steps no. 3 â 7 for each Active Directory (AD) that you want to reconfigure in order to disable the ability to invite guests to your AD account for non-administrator members.			,,,https://www.cloudconformity.com/knowledge-base/azure/ActiveDirectory/members-can-invite.html
Restrict Non-Admin Access to Administration Portal,Active Directory,Medium (not acceptable risk),ActiveDirectory-015,Ensure that "Restrict access to Azure AD administration portal" policy is set to "Yes" within your Azure Active Directory (AD) settings to deny access to the Azure AD administration portal for all non-administrator users. This setting is limited to administration portal only and enabling it does not restrict access using PowerShell or another client such as Microsoft Visual Studio. By default "Restrict access to Azure AD administration portal" is set to "No".,The Azure Active Directory administrative portal provides access to sensitive or private information therefore all non-admin users should be prohibited from accessing any Azure AD resource or information available on the administration portal in order to avoid data exposure.,To determine if non-admin users have access to Active Directory administration portal perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to Azure Active Directory (AD) blade at https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/Overview.			03				In the navigation panel select Users.			04				Under All users select User settings to access Azure Active Directory user settings.			05				On the User settings configuration page under Administration portal check Restrict access to Azure AD administration portal setting configuration. If Restrict access to Azure AD administration portal policy is set to No users without administrative privileges can use Active Directory (AD) administration portal to access directory data and resources thus the current Azure AD user configuration is not compliant.			06				Repeat steps no. 3 â 5 for each Microsoft Azure Active Directory that you want to examine.			,01				Sign in to Azure Management Console.			02				Navigate to Azure Active Directory blade at https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/Overview.			03				In the navigation panel select Users.			04				Under All users select User settings to access Azure Active Directory user configuration settings.			05				On the User settings configuration page under Administration portal select Yes next to Restrict access to Azure AD administration portal setting to disable non-administrator users' ability to access Azure Active Directory administration portal.			06				Click Save to apply the configuration changes. If the request is successful the following message should be displayed: "Successfully updated user settings". Once the changes are saved only the Active Directory users with an administrator role can access sensitive data available on the administration portal.			07				Repeat steps no. 3 â 6 for each Active Directory (AD) that you want to reconfigure in order to restrict non-admin access to AD administration portal.			,,,https://www.cloudconformity.com/knowledge-base/azure/ActiveDirectory/restrict-access-to-azure-ad-administration-portal.html
Restrict Office 365 Group Creation to Administrators Only,Active Directory,High (not acceptable risk),ActiveDirectory-019,Ensure that "Users can create Office 365 groups in Azure portals" is set to "No" within your Azure Active Directory settings in order to make sure that non-privileged users are not able to create Office 365 groups using the Access Panel and the Azure administration portal.,Depending on your business needs you might want to control who has the ability to create Office 365 groups. When "Users can create Office 365 groups in Azure portals" feature is enabled all users in your Active Directory account are allowed to create new Office 365 groups and add members to those groups. Unless your business logic requires delegation to create groups Office 365 group creation should be restricted to Active Directory administrators only.,To determine if non-privileged users have the ability to create Microsoft Office 365 groups within Azure portals perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to Azure Active Directory blade at https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/Overview.			03				In the navigation panel select Groups.			04				In the Settings section select General to access Active Directory user group general settings.			05				On the General settings page under Office 365 Groups check Users can create Office 365 groups in Azure portals setting configuration. If the verified setting is set to Yes any Active Directory users including users without administrative roles can create Office 365 groups using the Access Panel and the Azure administration portal thus the current Azure AD group configuration is not compliant.			06				Repeat steps no. 3 â 5 for each Microsoft Azure Active Directory that you want to examine.			,01				Sign in to Azure Management Console.			02				Navigate to Azure Active Directory blade at https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/Overview.			03				In the navigation panel select Groups.			04				In the Settingssection select General to access Active Directory user group general settings.			05				On the General settings page under Security Groups select No next to Users can create Office 365 groups in Azure portals configuration setting to disable the ability to create Office 365 groups for non-privileged users.			06				Click Save to apply the changes. If the request is successful the following message should be displayed: "Successfully updated group settings". Once the configuration changes are active only Active Directory users with administration roles can create Office 365 groups using the Access Panel and the Azure administration portal.			07				Repeat steps no. 3 â 6 for each Active Directory (AD) that you want to reconfigure in order to restrict Office 365 groups creation to AD administrators only.			,,,https://www.cloudconformity.com/knowledge-base/azure/ActiveDirectory/users-can-create-office-365-groups.html
Create Alert for "Create Policy Assignment" Events,Activity Log,High (not acceptable risk),NA,Ensure that an Azure activity log alert is used to detect "Create Policy Assignment" events within your Microsoft Azure cloud account. Activity log alerts get activated when a new activity log event that matches the condition specified in the alert occurs. In this case the condition used is 'Whenever the Policy Activity Log "Create policy assignment (policyAssignments)" has "any" level with "any" status and event is initiated by "any"'.,Monitoring your Azure cloud account for "Create Policy Assignment" events can provide insights into changes done within the "Policy Assignment" Azure policy and can help reduce the time it takes to detect unsolicited changes.,To determine if there is an activity log alert created for "Create Policy Assignment" events in your Azure cloud account perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to Azure Monitor blade at https://portal.azure.com/#blade/Microsoft_Azure_Monitoring/AzureMonitoringBrowseBlade/overview.			03				In the navigation panel select Alerts to access all the notification alerts available in your Azure cloud account.			04				On the Alerts page click on the Manage alert rules button from the dashboard top menu to access the alert rules management page.			05				On the Rules page select the appropriate subscription from the Subscription filter box and the Enabled option from the Status dropdown list to return all the active alert rules created in the selected Azure account subscription.			06				Click on the name of the alert rule that you want to examine.			07				On the selected alert rule configuration page check the condition phrase available in the CONDITION section. If the condition phrase is different than Whenever the Policy Activity Log "Create policy assignment (policyAssignments)" has "any" level with "any" status and event is initiated by "any" the selected alert rule is not configured to detect "Create Policy Assignment" events.			08				Repeat step no. 6 and 7 for the rest of the alert rules available within the selected subscription. If none of the verified rules contain the right condition there are no activity log alerts created for "Create Policy Assignment" events in the selected Azure cloud account subscription.			09				Repeat steps no. 5 â 8 for each subscription created in your Microsoft Azure cloud account.			,01				Run monitor activity-log alert list command (Windows/macOS/Linux) using custom query filters to get the IDs of all the active activity log alert rules available within the current Azure subscription:az monitor activity-log alert list	--query '[?(enabled==`true`)].id'02				The command output should return the requested activity log alert rule IDs:["/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourceGroups/cloud-shell-storage-westeurope/providers/microsoft.insights/activityLogAlerts/Cloud Conformity Access Policy Delete Alert""/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourceGroups/cloud-shell-storage-westeurope/providers/microsoft.insights/activityLogAlerts/Cloud Conformity Network Access Alert"]03				Run monitor activity-log alert show command (Windows/macOS/Linux) using the ID of the alert rule that you want to examine as identifier parameter and custom query filters to list the condition defined for the selected activity log alert rule:az monitor activity-log alert show	--ids "/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourceGroups/cloud-shell-storage-westeurope/providers/microsoft.insights/activityLogAlerts/Cloud Conformity Policy Delete Alert"	--query 'condition'04				The command output should return the selected alert rule condition metadata:{  "allOf": [    {      "containsAny": null      "equals": "Policy"      "field": "category"      "odata.type": null    }    {      "containsAny": null      "equals": "Microsoft.Authorization/policyAssignments/delete"      "field": "operationName"      "odata.type": null    }  ]  "odata.type": null}				Check the monitor activity-log alert show command output for the object with the "field" property set to "operationName". If the object's "equals" property is not set to "Microsoft.Authorization/policyAssignments/write" the selected alert rule is not configured to detect "Create Policy Assignment" events.			05				Repeat step no. 3 and 4 for the rest of the alert rules available in the current subscription. If none of the verified rules contain the right condition there are no activity log alerts created for "Create Policy Assignment" events in the selected Azure cloud account subscription.			06				Repeat steps no. 1 â 5 for each subscription available in your Microsoft Azure cloud account.			,01				Sign in to Azure Management Console.			02				Navigate to Azure Monitor blade at https://portal.azure.com/#blade/Microsoft_Azure_Monitoring/AzureMonitoringBrowseBlade/overview.			03				In the navigation panel select Alerts to access all the notification alerts available in your Azure cloud account.			04				On the Alerts page click on the Manage alert rules button from the dashboard top menu to access the alert rules management page.			05				On the Rules page select the Azure account subscription where you want to create the new alert rule from the Subscription filter box.			06				Click New alert rule button from the dashboard top menu to initiate the rule setup process.			07				On the Create rule page perform the following actions:										In the RESOURCE section click Select and configure the target that you wish to monitor. In this case select the appropriate Azure account subscription then click Done.											In the CONDITION section click Add to configure the alert rule condition (i.e. a signal and its logic). On Configure signal logic panel find and select the signal with the name Create policy assignment (Microsoft.Authorization/policyAssignments). To obtain the right configuration for the condition (i.e. Whenever the Policy Activity Log "Create policy assignment (policyAssignments)" has "any" level with "any" status and event is initiated by "any") leave the default settings available for the signal logic unchanged then click Done.											In the ACTIONS section click Select action group to choose an existing action group to attach to this alert rule or click Create action group button to create a new one. An action group is a collection of alert notification preferences defined for the selected Azure subscription. Azure Monitor alerts use action groups to notify users that an alert has been triggered.											In the ALERT DETAILS section provide a unique name for the new alert rule in the Alert rule name box enter a short description in the Description box and choose the resource group in which the alert will be created from the Save alert to resource group dropdown list.											Make sure that Enable rule upon creation option is set to Yes then click Create alert rule to finish the rule setup process. It can take up to 5 minutes for an alert rule to become active.					08				Repeat steps no. 5 â 7 for each subscription created in your Microsoft Azure cloud account.			,01				Run monitor activity-log alert create command (Windows/macOS/Linux) to create a new Azure activity log alert for detecting "Create Policy Assignment" events within the current Microsoft Azure cloud subscription. For example the following monitor activity-log alert create command request creates an activity log alert rule with the name "cc-create-policy-assignment-alert" associated with an action group identified by ID "/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourcegroups/default-activitylogalerts/providers/microsoft.insights/actiongroups/cloudconformity%20action%20group" with a condition defined by "category=Policy and operationName=Microsoft.Authorization/policyAssignments/write":az monitor activity-log alert create	--name cc-create-policy-assignment-alert	--description "Alert triggered by Create Policy Assignment events"	--resource-group Default-ActivityLogAlerts	--action-group "/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourcegroups/default-activitylogalerts/providers/microsoft.insights/actiongroups/cloudconformity%20action%20group"	--condition category=Policy and operationName=Microsoft.Authorization/policyAssignments/write02				The command output should return the configuration metadata for the newly created alert:{  "actions": {    "actionGroups": [      {        "actionGroupId": "/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourcegroups/default-activitylogalerts/providers/microsoft.insights/actiongroups/cloudconformity%20action%20group"        "webhookProperties": null      }    ]  }  "condition": {    "allOf": [      {        "containsAny": null        "equals": "Policy"        "field": "category"        "odata.type": null      }      {        "containsAny": null        "equals": "Microsoft.Authorization/policyAssignments/write"        "field": "operationName"        "odata.type": null      }    ]    "odata.type": null  }  "description": "Alert triggered by Create Policy Assignment events"  "enabled": true  "id": "/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourceGroups/Default-ActivityLogAlerts/providers/microsoft.insights/activityLogAlerts/cc-create-policy-assignment-alert"  "identity": null  "kind": null  "location": "Global"  "name": "cc-create-policy-assignment-alert"  "resourceGroup": "Default-ActivityLogAlerts"  "scopes": [    "/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourceGroups/Default-ActivityLogAlerts"  ]  "tags": {}  "type": "Microsoft.Insights/ActivityLogAlerts"}03				Repeat step no. 1 and 2 for each subscription created within your Microsoft Azure cloud account.			,https://www.cloudconformity.com/knowledge-base/azure/ActivityLog/create-alert-for-create-policy-assignment-events.html
Create Alert for "Create or Update Security Solution" Events,Activity Log,High (not acceptable risk),ActivityLog-006,Ensure that an Azure activity log alert is fired whenever "Create" or "Update Security Solution" events are triggered in your Microsoft Azure cloud account. Activity log alerts get activated when a new activity log event that matches the condition specified in the alert occurs. In this case the alert condition that this conformity rule searches for is 'Whenever the Security Activity Log "Create or Update Security Solutions (Microsoft.Security/securitySolutions)" has "any" level with "any" status and event is initiated by "any '.,Monitoring your Microsoft Azure account for "Create" or "Update Security Solution" events can give you insights into the changes made for your Azure Security Solutions and can help reduce the time it takes to detect suspicious activity.,To determine if there is an activity log alert created for "Create/Update Security Solution" events in your Azure cloud account perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to Azure Monitor blade at https://portal.azure.com/#blade/Microsoft_Azure_Monitoring/AzureMonitoringBrowseBlade/overview.			03				In the navigation panel select Alerts to access all the alerts available within your Azure cloud account.			04				On the Alerts page click on the Manage alert rules button from the dashboard top menu to access the alert rules management page.			05				On the Rules page select the subscription that you want to examine from the Subscription filter box and the Enabled option from the Status dropdown list to return all the active alert rules created in the selected account subscription.			06				Click on the name of the alert rule that you want to examine.			07				On the selected alert rule configuration page check the condition phrase available in the CONDITION section. If the phrase is different than Whenever the Security Activity Log "Create or Update Security Solutions (Microsoft.Security/securitySolutions)" has "any" level with "any" status and event is initiated by "any" the selected alert rule is not configured to fire whenever "Create" or "Update Security Solution" events are triggered.			08				Repeat step no. 6 and 7 for the rest of the alert rules available within the selected account subscription. If none of the verified rules contain the right condition there are no activity log alerts available for "Create" or "Update Security Solution" events in the selected Azure cloud account subscription.			09				Repeat steps no. 5 â 8 for each subscription created in your Microsoft Azure cloud account.			,01				Run monitor activity-log alert list command (Windows/macOS/Linux) using custom query filters to get the identifiers of all the active activity log alert rules available in the current Azure subscription:az monitor activity-log alert list	--query '[?(enabled==`true`)].id'02				The command output should return the requested activity log alert rule IDs:["/subscriptions/1234abcd-1234-abcd-1234-abcd1234abcd/resourceGroups/cloud-shell-storage-westeurope/providers/microsoft.insights/activityLogAlerts/Cloud Conformity Create Security Groups Alert""/subscriptions/1234abcd-1234-abcd-1234-abcd1234abcd/resourceGroups/cloud-shell-storage-westeurope/providers/microsoft.insights/activityLogAlerts/Cloud Conformity Delete Security Groups Alert"]03				Run monitor activity-log alert show command (Windows/macOS/Linux) using the ID of the alert rule that you want to examine as identifier parameter and custom query filters to list the condition(s) defined for the selected activity log alert rule:az monitor activity-log alert show	--ids "/subscriptions/1234abcd-1234-abcd-1234-abcd1234abcd/resourceGroups/cloud-shell-storage-westeurope/providers/microsoft.insights/activityLogAlerts/Cloud Conformity Create Security Groups Alert"	--query 'condition'04				The command output should return the condition metadata for the selected alert rule:{  "allOf": [    {      "containsAny": null      "equals": "Administrative"      "field": "category"      "odata.type": null    }    {      "containsAny": null      "equals": "Microsoft.Network/networkSecurityGroups/write"      "field": "operationName"      "odata.type": null    }  ]  "odata.type": null}				Check the command output for the JSON object with the "field" property set to "operationName" (highlighted). If the object's "equals" property is not set to "Microsoft.Security/securitySolutions/write" the selected alert rule is not configured to fire whenever "Create" or "Update Security Solution" events get triggered.			05				Repeat step no. 3 and 4 for the rest of the alert rules available in the current subscription. If none of the verified rules contain the right condition there are no activity log alerts available for "Create" or "Update Security Solution" events within the selected Azure cloud account subscription.			06				Repeat steps no. 1 â 5 for each subscription available in your Microsoft Azure cloud account.			,01				Sign in to Azure Management Console.			02				Navigate to Azure Monitor blade at https://portal.azure.com/#blade/Microsoft_Azure_Monitoring/AzureMonitoringBrowseBlade/overview.			03				In the navigation panel select Alerts to access the alerts available in your Azure cloud account.			04				On the Alerts page click on the Manage alert rules button from the dashboard top menu to access the alert rules management page.			05				On the Rules page select the Azure account subscription where you want to create the new alert rule from the Subscription filter box.			06				Click New alert rule button from the dashboard top menu to start the alert rule setup process.			07				On the Create rule page perform the following actions:										In the RESOURCE section click Select and configure the target subscription that you wish to monitor. Once the appropriate Azure subscription is selected click Done.											In the CONDITION section click Add to configure the alert rule condition (i.e. a signal and its logic). On Configure signal logic panel find and select the signal with the name Create or Update Security Solutions (Microsoft.Security/securitySolutions). To obtain the right configuration for the condition (i.e. Whenever the Security Activity Log "Create or Update Security Solutions (Microsoft.Security/securitySolutions)" has "any" level with "any" status and event is initiated by "any") leave the default settings available for the signal logic unchanged then click Done to generate the necessary condition.											In the ACTIONS section click Select action group to choose an existing action group to attach to the new alert rule or click Create action group button to create a new one. An action group is a collection of alert notification preferences defined for the selected Azure subscription. Azure Monitor service alerts use action groups to notify users that an alert has been triggered.											In the ALERT DETAILS section provide a unique name for the new rule in the Alert rule name box type a short description in the Description box and choose the resource group in which the alert will be created from the Save alert to resource group dropdown list.											Make sure that Enable rule upon creation option is set to Yes then click Create alert rule to finish the rule setup process. It can take up to 5 minutes for an alert rule to become active.					08				Repeat steps no. 5 â 7 for each subscription created in your Microsoft Azure cloud account.			,01				Run monitor activity-log alert create command (Windows/macOS/Linux) to create a new Azure activity log alert that fires whenever a "Create" or "Update Security Solution" event is triggered within the current Microsoft Azure cloud subscription:az monitor activity-log alert create	--name cc-create-update-security-solution-alert	--description "Alert triggered by Create or Update Security Solution events"	--resource-group Default-ActivityLogAlerts	--action-group "/subscriptions/1234abcd-1234-abcd-1234-abcd1234abcd/resourcegroups/default-activitylogalerts/providers/microsoft.insights/actiongroups/cloudconformity%20action%20group"	--condition category=Administrative and operationName=Microsoft.Security/securitySolutions/write02				The command output should return the configuration metadata for the new activity log alert:{  "actions": {    "actionGroups": [      {        "actionGroupId": "/subscriptions/1234abcd-1234-abcd-1234-abcd1234abcd/resourcegroups/default-activitylogalerts/providers/microsoft.insights/actiongroups/cloudconformity%20action%20group"        "webhookProperties": null      }    ]  }  "condition": {    "allOf": [      {        "containsAny": null        "equals": "Administrative"        "field": "category"        "odata.type": null      }      {        "containsAny": null        "equals": "Microsoft.Security/securitySolutions/write"        "field": "operationName"        "odata.type": null      }    ]    "odata.type": null  }  "description": "Alert triggered by Create or Update Security Solution events"  "enabled": true  "id": "/subscriptions/1234abcd-1234-abcd-1234-abcd1234abcd/resourceGroups/Default-ActivityLogAlerts/providers/microsoft.insights/activityLogAlerts/cc-create-update-security-solution-alert"  "identity": null  "kind": null  "location": "Global"  "name": "cc-create-update-security-solution-alert"  "resourceGroup": "Default-ActivityLogAlerts"  "scopes": [    "/subscriptions/1234abcd-1234-abcd-1234-abcd1234abcd/resourceGroups/Default-ActivityLogAlerts"  ]  "tags": {}  "type": "Microsoft.Insights/ActivityLogAlerts"}03				Repeat step no. 1 and 2 for each subscription created in your Microsoft Azure cloud account.			,https://www.cloudconformity.com/knowledge-base/azure/ActivityLog/create-or-update-security-solution-alert.html
Create Alert for "Create, Update or Delete SQL Server Firewall Rule" Events,Activity Log,High (not acceptable risk),ActivityLog-009,Ensure that an Azure activity log alert is fired whenever âCreateâ âUpdateâ or âDelete SQL Server Firewall Ruleâ events are triggered in your Microsoft Azure cloud account. Activity log alerts get activated when a new activity log event that matches the condition specified in the alert occurs. In this case the condition required for the alert is 'Whenever the Administrative Activity Log "Create/Update server firewall rule (Microsoft.Sql/servers/firewallRules)" has "any" level with "any" status and event is initiated by "any"'.,Monitoring your Microsoft Azure account for âCreateâ âUpdateâ or âDelete SQL Server Firewall Ruleâ events can give you insight into the changes made at the SQL servers firewall level and can help reduce the time it takes to detect suspicious activity.,To determine if there is an activity log alert created for âCreate/Update/Delete SQL Server Firewall Ruleâ events in your Azure cloud account perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to Azure Monitor blade at https://portal.azure.com/#blade/Microsoft_Azure_Monitoring/AzureMonitoringBrowseBlade/overview.			03				In the navigation panel select Alerts to access all the alerts available within your Azure cloud account.			04				On the Alerts page click on the Manage alert rules button from the dashboard top menu to access the alert rules management page.			05				On the Rules page select the subscription that you want to examine from the Subscription filter box and the Enabled option from the Status dropdown list to return all the active alert rules created in the selected account subscription.			06				Click on the name (link) of the alert rule that you want to examine.			07				On the selected alert rule configuration page check the condition phrase available in the CONDITION section. If the condition phrase is different than Whenever the Administrative Activity Log "Create/Update server firewall rule (Microsoft.Sql/servers/firewallRules)" has "any" level with "any" status and event is initiated by "any" the selected alert rule is not configured to fire whenever âCreateâ âUpdateâ or âDelete SQL Server Firewall Ruleâ events are triggered.			08				Repeat step no. 6 and 7 for the rest of the alert rules available within the selected account subscription. If none of the verified rules contain the right condition there are no activity log alerts available for âCreateâ âUpdateâ or âDelete SQL Server Firewall Ruleâ events in the selected Azure cloud account subscription.			09				Repeat steps no. 5 â 8 for each subscription created in your Microsoft Azure cloud account.			,01				Run monitor activity-log alert list command (Windows/macOS/Linux) using custom query filters to get the identifiers of all the active activity log alert rules available in the current Azure subscription:az monitor activity-log alert list	--query '[?(enabled==`true`)].id'02				The command output should return the requested alert rule IDs:["/subscriptions/1234abcd-1234-abcd-1234-abcd1234abcd/resourceGroups/cloud-shell-storage-westeurope/providers/microsoft.insights/activityLogAlerts/Cloud Conformity Create Update NSG Rule Alert""/subscriptions/1234abcd-1234-abcd-1234-abcd1234abcd/resourceGroups/cloud-shell-storage-westeurope/providers/microsoft.insights/activityLogAlerts/Cloud Conformity Delete Azure Resource Alert""/subscriptions/1234abcd-1234-abcd-1234-abcd1234abcd/resourceGroups/cloud-shell-storage-westeurope/providers/microsoft.insights/activityLogAlerts/ Cloud Conformity Update Access Policy Alert"]03				Run monitor activity-log alert show command (Windows/macOS/Linux) using the ID of the alert rule that you want to examine as identifier parameter and custom query filters to list the condition(s) defined for the selected activity log alert rule:az monitor activity-log alert show	--ids "/subscriptions/1234abcd-1234-abcd-1234-abcd1234abcd/resourceGroups/cloud-shell-storage-westeurope/providers/microsoft.insights/activityLogAlerts/Cloud Conformity Create Update NSG Rule Alert"	--query 'condition'04				The command output should return the condition metadata for the selected alert rule:{  "allOf": [    {      "containsAny": null      "equals": "Administrative"      "field": "category"      "odata.type": null    }    {      "containsAny": null      "equals": "Microsoft.Network/networkSecurityGroups/securityRules/write"      "field": "operationName"      "odata.type": null    }  ]  "odata.type": null}				Check the command output for the JSON object with the "field" property set to "operationName" (highlighted). If the object's "equals" property is not set to "Microsoft.Sql/servers/firewallRules/write" the selected alert rule is not configured to fire whenever âCreateâ âUpdateâ or âDelete SQL Server Firewall Ruleâ events are triggered.			05				Repeat step no. 3 and 4 for the rest of the alert rules available in the current subscription. If none of the verified rules contain the right condition there are no activity log alerts available for âCreateâ âUpdateâ or âDelete SQL Server Firewall Ruleâ events within the selected Azure cloud account subscription.			06				Repeat steps no. 1 â 5 for each subscription available in your Microsoft Azure cloud account.			,01				Sign in to Azure Management Console.			02				Navigate to Azure Monitor blade at https://portal.azure.com/#blade/Microsoft_Azure_Monitoring/AzureMonitoringBrowseBlade/overview.			03				In the navigation panel select Alerts to access all the alerts available in your Azure cloud account.			04				On the Alerts page click on the Manage alert rules button from the dashboard top menu to access the alert rules management page.			05				On the Rules page select the Azure account subscription where you want to create the new alert rule from the Subscription filter box.			06				Click New alert rule button from the dashboard top menu to start the rule setup process.			07				On the Create rule page perform the following actions:										In the RESOURCE section click Select and configure the target subscription that you wish to monitor. Once the appropriate Azure subscription is selected click Done.											In the CONDITION section click Add to configure the alert rule condition. On Configure signal logic panel find and select the signal with the name Create/Update server firewall rule (Microsoft.Sql/servers/firewallRules). To obtain the right configuration for the condition (i.e. Whenever the Administrative Activity Log "Create/Update server firewall rule (Microsoft.Sql/servers/firewallRules)" has "any" level with "any" status and event is initiated by "any") leave the default settings available for the condition logic unchanged then click Done to generate the condition.											In the ACTIONS section click Select action group to choose an existing action group to attach to the new alert rule or click Create action group button to create a new one. An action group is a collection of alert notification preferences defined for the selected Azure subscription. Azure Monitor service alerts use action groups to notify users that an alert has been triggered.											In the ALERT DETAILS section provide a unique name for the new rule in the Alert rule name box type a short description in the Description box and choose the resource group in which the alert will be created from the Save alert to resource group dropdown list.											Make sure that Enable rule upon creation option is set to Yes then click Create alert rule to finish the rule setup process. It can take up to 5 minutes for an alert rule to become active.					08				Repeat steps no. 5 â 7 for each subscription created in your Microsoft Azure cloud account.			,01				Run monitor activity-log alert create command (Windows/macOS/Linux) to create a new Azure activity log alert that fires whenever a âCreateâ âUpdateâ or âDelete SQL Server Firewall Ruleâ event is triggered within the current Microsoft Azure cloud subscription:az monitor activity-log alert create	--name cc-create-update-delete-sql-firewall-rule-alert	--description "Alert triggered by Create Update or Delete SQL Server Firewall Rule events"	--resource-group Default-ActivityLogAlerts	--action-group "/subscriptions/1234abcd-1234-abcd-1234-abcd1234abcd/resourcegroups/default-activitylogalerts/providers/microsoft.insights/actiongroups/cloudconformity%20action%20group"	--condition category=Administrative and operationName=Microsoft.Sql/servers/firewallRules/write02				The command output should return the configuration metadata for the new activity log alert:{  "actions": {    "actionGroups": [      {        "actionGroupId": "/subscriptions/1234abcd-1234-abcd-1234-abcd1234abcd/resourcegroups/default-activitylogalerts/providers/microsoft.insights/actiongroups/cloudconformity%20action%20group"        "webhookProperties": null      }    ]  }  "condition": {    "allOf": [      {        "containsAny": null        "equals": "Administrative"        "field": "category"        "odata.type": null      }      {        "containsAny": null        "equals": "Microsoft.Sql/servers/firewallRules/write"        "field": "operationName"        "odata.type": null      }    ]    "odata.type": null  }  "description": "Alert triggered by Create Update or Delete SQL Server Firewall Rule events"  "enabled": true  "id": "/subscriptions/1234abcd-1234-abcd-1234-abcd1234abcd/resourceGroups/Default-ActivityLogAlerts/providers/microsoft.insights/activityLogAlerts/cc-create-update-delete-firewall-rule-alert"  "identity": null  "kind": null  "location": "Global"  "name": "cc-create-update-delete-firewall-rule-alert"  "resourceGroup": "Default-ActivityLogAlerts"  "scopes": [    "/subscriptions/1234abcd-1234-abcd-1234-abcd1234abcd/resourceGroups/Default-ActivityLogAlerts"  ]  "tags": {}  "type": "Microsoft.Insights/ActivityLogAlerts"}03				Repeat step no. 1 and 2 for each subscription created in your Microsoft Azure cloud account.			,https://www.cloudconformity.com/knowledge-base/azure/ActivityLog/create-or-update-or-delete-sql-server-firewall-rule-alert.html
Create Alert for "Create/Update Network Security Group" Events,Activity Log,High (not acceptable risk),NA,Ensure that an Azure activity log alert is fired whenever "Create" or "Update Network Security Group" events are triggered within your Microsoft Azure cloud account. Activity log alerts get activated when a new activity log event that matches the condition specified in the alert occurs. In this case the alert condition that we search for is 'Whenever the Administrative Activity Log "Create or Update Network Security Group (Microsoft.Network/networkSecurityGroups)" has "any" level with "any" status and event is initiated by "any"'.,Monitoring your Microsoft Azure account for "Create" or "Update Network Security Group" events can give you insights into the cloud network access changes and can help reduce the time it takes to detect suspicious activity.,To determine if there is an activity log alert created for "Create/Update Network Security Group" events in your Azure cloud account perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to Azure Monitor blade at https://portal.azure.com/#blade/Microsoft_Azure_Monitoring/AzureMonitoringBrowseBlade/overview. 			03				In the navigation panel select Alerts to access all the alerts available within your Azure cloud account.			04				On the Alerts page click on the Manage alert rules button from the dashboard top menu to access the alert rules management page.			05				On the Rules page select the subscription that you want to examine from the Subscription filter box and the Enabled option from the Status dropdown list to return all the active alert rules created in the selected account subscription.			06				Click on the name (link) of the alert rule that you want to examine.			07				On the selected alert rule configuration page check the condition phrase available in the CONDITION section. If the phrase is different than Whenever the Administrative Activity Log "Create or Update Network Security Group (Microsoft.Network/networkSecurityGroups)" has "any" level with "any" status and event is initiated by "any" the selected alert rule is not configured to fire whenever "Create" or "Update Network Security Group" events are triggered.			08				Repeat step no. 6 and 7 for the rest of the alert rules available within the selected account subscription. If none of the verified rules contain the right condition there are no activity log alerts available for "Create" or "Update Network Security Group" events in the selected Azure cloud account subscription.			09				Repeat steps no. 5 â 8 for each subscription created in your Microsoft Azure cloud account.			,01				Run monitor activity-log alert list command (Windows/macOS/Linux) using custom query filters to get the identifiers of all the active activity log alert rules available in the current Azure subscription:az monitor activity-log alert list	--query '[?(enabled==`true`)].id'02				The command output should return the requested activity log alert rule IDs:["/subscriptions/1234abcd-1234-abcd-1234-abcd1234abcd/resourceGroups/cloud-shell-storage-westeurope/providers/microsoft.insights/activityLogAlerts/Cloud Conformity Create Policy Assignment Alert""/subscriptions/1234abcd-1234-abcd-1234-abcd1234abcd/resourceGroups/cloud-shell-storage-westeurope/providers/microsoft.insights/activityLogAlerts/Cloud Conformity Delete Network Security Group Alert"]03				Run monitor activity-log alert show command (Windows/macOS/Linux) using the ID of the alert rule that you want to examine as identifier parameter and custom query filters to list the condition(s) defined for the selected activity log alert rule:az monitor activity-log alert show	--ids "/subscriptions/1234abcd-1234-abcd-1234-abcd1234abcd/resourceGroups/cloud-shell-storage-westeurope/providers/microsoft.insights/activityLogAlerts/Cloud Conformity Create Policy Assignment Alert"	--query 'condition'04				The command output should return the condition metadata for the selected alert rule:{  "allOf": [    {      "containsAny": null      "equals": "Policy"      "field": "category"      "odata.type": null    }    {      "containsAny": null      "equals": "Microsoft.Network/networkSecurityGroups/write"      "field": "operationName"      "odata.type": null    }  ]  "odata.type": null}				Check the command output for the JSON object with the "field" property set to "operationName" (highlighted). If the object's "equals" property is not set to "Microsoft.Network/networkSecurityGroups/write" the selected alert rule is not configured to fire whenever "Create" or "Update Network Security Group" events get triggered.			05				Repeat step no. 3 and 4 for the rest of the alert rules available in the current subscription. If none of the verified rules contain the right condition there are no activity log alerts available for "Create" or "Update Network Security Group" events within the selected Azure cloud account subscription.			06				Repeat steps no. 1 â 5 for each subscription available in your Microsoft Azure cloud account.			,01				Sign in to Azure Management Console.			02				Navigate to Azure Monitor blade at https://portal.azure.com/#blade/Microsoft_Azure_Monitoring/AzureMonitoringBrowseBlade/overview. 			03				In the navigation panel select Alerts to access the alerts available in your Azure cloud account.			04				On the Alerts page click on the Manage alert rules button from the dashboard top menu to access the alert rules management page.			05				On the Rules page select the Azure account subscription where you want to create the new alert rule from the Subscription filter box.			06				Click New alert rule button from the dashboard top menu to start the rule setup process.			07				On the Create rule page perform the following actions:										In the RESOURCE section click Select and configure the target subscription that you wish to monitor. Once the appropriate Azure subscription is selected click Done.											In the CONDITION section click Add to configure the alert rule condition (i.e. a signal and its logic). On Configure signal logic panel find and select the signal with the name Create or Update Network Security Group (Microsoft.Network/networkSecurityGroups). To obtain the right configuration for the condition (i.e. Whenever the Administrative Activity Log "Create or Update Network Security Group (Microsoft.Network/networkSecurityGroups)" has "any" level with "any" status and event is initiated by "any") leave the default settings available for the signal logic unchanged then click Done to generate the condition. 											In the ACTIONS section click Select action group to choose an existing action group to attach to the new alert rule or click Create action group button to create a new one. An action group is a collection of alert notification preferences defined for the selected Azure subscription. Azure Monitor service alerts use action groups to notify users that an alert has been triggered.											In the ALERT DETAILS section provide a unique name for the new rule in the Alert rule name box type a short description in the Description box and choose the resource group in which the alert will be created from the Save alert to resource group dropdown list.											Make sure that Enable rule upon creation option is set to Yes then click Create alert rule to finish the rule setup process. It can take up to 5 minutes for an alert rule to become active.					08				Repeat steps no. 5 â 7 for each subscription created in your Microsoft Azure cloud account.			,01				Run monitor activity-log alert create command (Windows/macOS/Linux) to create a new Azure activity log alert that fires whenever a "Create" or "Update Network Security Group" event is triggered within the current Microsoft Azure cloud subscription:az monitor activity-log alert create	--name cc-create-update-nsg-alert	--description "Alert triggered by Create or Update Network Security Group events"	--resource-group Default-ActivityLogAlerts	--action-group "/subscriptions/1234abcd-1234-abcd-1234-abcd1234abcd/resourcegroups/default-activitylogalerts/providers/microsoft.insights/actiongroups/cloudconformity%20action%20group"	--condition category=Administrative and operationName=Microsoft.Network/networkSecurityGroups/write02				The command output should return the configuration metadata for the new activity log alert:{  "actions": {    "actionGroups": [      {        "actionGroupId": "/subscriptions/1234abcd-1234-abcd-1234-abcd1234abcd/resourcegroups/default-activitylogalerts/providers/microsoft.insights/actiongroups/cloudconformity%20action%20group"        "webhookProperties": null      }    ]  }  "condition": {    "allOf": [      {        "containsAny": null        "equals": "Administrative"        "field": "category"        "odata.type": null      }      {        "containsAny": null        "equals": "Microsoft.Network/networkSecurityGroups/write"        "field": "operationName"        "odata.type": null      }    ]    "odata.type": null  }  "description": "Alert triggered by Create or Update Network Security Group events"  "enabled": true  "id": "/subscriptions/1234abcd-1234-abcd-1234-abcd1234abcd/resourceGroups/Default-ActivityLogAlerts/providers/microsoft.insights/activityLogAlerts/cc-create-update-nsg-alert"  "identity": null  "kind": null  "location": "Global"  "name": "cc-create-update-nsg-alert"  "resourceGroup": "Default-ActivityLogAlerts"  "scopes": [    "/subscriptions/1234abcd-1234-abcd-1234-abcd1234abcd/resourceGroups/Default-ActivityLogAlerts"  ]  "tags": {}  "type": "Microsoft.Insights/ActivityLogAlerts"}03				Repeat step no. 1 and 2 for each subscription created in your Microsoft Azure cloud account.			,https://www.cloudconformity.com/knowledge-base/azure/ActivityLog/create-update-network-security-group-alert-in-use.html
Create Alert for "Delete Network Security Group Rule" Events,Activity Log,High (not acceptable risk),NA,Ensure that an Azure activity log alert is used to detect "Delete Network Security Group Rule" events in your Microsoft Azure cloud account. Activity log alerts get activated when a new activity log event that matches the condition specified in the alert occurs. In this case the condition used is 'Whenever the Administrative Activity Log "Delete Security Rule (networkSecurityGroups/securityRules)" has "any" level with "any" status and event is initiated by "any"'.,Monitoring your Azure cloud account for "Delete Network Security Group Rule" events can provide insights into changes done at the Azure Network Security Group (NSG) level and can help reduce the time it takes to detect unsolicited delete requests for NSG rules.,To determine if there is an activity log alert created for "Delete Network Security Group Rule" events in your Azure cloud account perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to Azure Monitor blade at https://portal.azure.com/#blade/Microsoft_Azure_Monitoring/AzureMonitoringBrowseBlade/overview. 			03				In the navigation panel select Alerts to access all the notification alerts available in your Azure cloud account.			04				On the Alerts page click on the Manage alert rules button from the dashboard top menu to access the alert rules management page.			05				On the Rules page select the appropriate subscription from the Subscription filter box and the Enabled option from the Status dropdown list to return all the active alert rules created in the selected Azure account subscription.			06				Click on the name of the alert rule that you want to examine.			07				On the selected alert rule configuration page check the condition phrase available in the CONDITION section. If the phrase is different than Whenever the Administrative Activity Log "Delete Security Rule (networkSecurityGroups/securityRules)" has "any" level with "any" status and event is initiated by "any" the selected alert rule is not configured to detect "Delete Network Security Group Rule" events.			08				Repeat step no. 6 and 7 for the rest of the alert rules available within the selected subscription. If none of the verified rules contain the right condition there are no activity log alerts created for "Delete Network Security Group Rule" events in the selected Azure cloud account subscription.			09				Repeat steps no. 5 â 8 for each subscription created in your Microsoft Azure cloud account.			,01				Run monitor activity-log alert list command (Windows/macOS/Linux) using custom query filters to get the IDs of all the active activity log alert rules available within the current Azure subscription:az monitor activity-log alert list	--query '[?(enabled==`true`)].id'02				The command output should return the requested activity log alert rule IDs:["/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourceGroups/cloud-shell-storage-westeurope/providers/microsoft.insights/activityLogAlerts/Cloud Conformity Create Update NSG Rule Alert""/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourceGroups/cloud-shell-storage-westeurope/providers/microsoft.insights/activityLogAlerts/Cloud Conformity Configuration Change Alert"]03				Run monitor activity-log alert show command (Windows/macOS/Linux) using the ID of the alert rule that you want to examine as identifier parameter and custom query filters to list the condition defined for the selected activity log alert rule:az monitor activity-log alert show	--ids "/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourceGroups/cloud-shell-storage-westeurope/providers/microsoft.insights/activityLogAlerts/Cloud Conformity Create Update NSG Rule Alert"	--query 'condition'04				The command output should return the selected alert rule condition metadata:{  "allOf": [    {      "containsAny": null      "equals": "Policy"      "field": "category"      "odata.type": null    }    {      "containsAny": null      "equals": "Microsoft.Network/networkSecurityGroups/securityRules/write"      "field": "operationName"      "odata.type": null    }  ]  "odata.type": null}				Check the monitor activity-log alert show command output for the object with the "field" property set to "operationName". If the object's "equals" property is not set to "Microsoft.Network/networkSecurityGroups/securityRules/delete" the selected alert rule is not configured to detect "Delete Network Security Group Rule" events.			05				Repeat step no. 3 and 4 for the rest of the alert rules available in the current subscription. If none of the verified rules contain the right condition there are no activity log alerts created for "Delete Network Security Group Rule" events in the selected Azure cloud account subscription.			06				Repeat steps no. 1 â 5 for each subscription available in your Microsoft Azure cloud account.			,01				Sign in to Azure Management Console.			02				Navigate to Azure Monitor blade at https://portal.azure.com/#blade/Microsoft_Azure_Monitoring/AzureMonitoringBrowseBlade/overview. 			03				In the navigation panel select Alerts to access all the notification alerts available in your Azure cloud account.			04				On the Alerts page click on the Manage alert rules button from the dashboard top menu to access the alert rules management page.			05				On the Rules page select the Azure account subscription where you want to create the new alert rule from the Subscription filter box.			06				Click New alert rule button from the dashboard top menu to initiate the rule setup process.			07				On the Create rule page perform the following actions:										In the RESOURCE section click Select and configure the target that you wish to monitor. In this case select the appropriate Azure account subscription then click Done to complete this step.											In the CONDITION section click Add to configure the alert rule condition. A condition is represented by a signal and its logic. On Configure signal logic panel find and select the signal with the name Delete Security Rule (Microsoft.Network/networkSecurityGroups/securityRules). To get the right configuration for the selected condition (i.e. Whenever the Administrative Activity Log "Delete Security Rule (networkSecurityGroups/securityRules)" has "any" level with "any" status and event is initiated by "any") leave the default settings available for the signal logic unchanged then click Done. 											In the ACTIONS section click Select action group to choose an existing action group to attach to this alert rule or click Create action group button to create a new one. An action group is a collection of alert notification preferences defined for the selected Azure subscription. Azure Monitor alerts use action groups to notify users that an alert has been triggered.											In the ALERT DETAILS section type a unique name for the new alert rule in the Alert rule name box provide a short description in the Description box and choose the resource group in which the alert will be created from the Save alert to resource group dropdown list.											Make sure that Enable rule upon creation option is set to Yes then click Create alert rule to finish the rule setup process. 					08				Repeat steps no. 5 â 7 for each subscription created in your Microsoft Azure cloud account.			,01				Run monitor activity-log alert create command (Windows/macOS/Linux) to create a new Azure activity log alert for detecting "Delete Network Security Group Rule" events within the current Microsoft Azure cloud subscription:az monitor activity-log alert create	--name cc-delete-nsg-rule-alert	--description "Alert triggered by Delete Network Security Group Rule events"	--resource-group Default-ActivityLogAlerts	--action-group "/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourcegroups/default-activitylogalerts/providers/microsoft.insights/actiongroups/cloudconformity%20action%20group"	--condition category=Administrative and operationName=Microsoft.Network/networkSecurityGroups/securityRules/delete02				The command output should return the configuration metadata for the newly created alert:{  "actions": {    "actionGroups": [      {        "actionGroupId": "/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourcegroups/default-activitylogalerts/providers/microsoft.insights/actiongroups/cloudconformity%20action%20group"        "webhookProperties": null      }    ]  }  "condition": {    "allOf": [      {        "containsAny": null        "equals": "Administrative"        "field": "category"        "odata.type": null      }      {        "containsAny": null        "equals": "Microsoft.Network/networkSecurityGroups/securityRules/delete"        "field": "operationName"        "odata.type": null      }    ]    "odata.type": null  }  "description": "Alert triggered by Delete Network Security Group Rule events"  "enabled": true  "id": "/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourceGroups/Default-ActivityLogAlerts/providers/microsoft.insights/activityLogAlerts/cc-delete-nsg-rule-alert"  "identity": null  "kind": null  "location": "Global"  "name": "cc-delete-nsg-rule-alert"  "resourceGroup": "Default-ActivityLogAlerts"  "scopes": [    "/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourceGroups/Default-ActivityLogAlerts"  ]  "tags": {}  "type": "Microsoft.Insights/ActivityLogAlerts"}03				Repeat step no. 1 and 2 for each subscription created within your Microsoft Azure cloud account.			,https://www.cloudconformity.com/knowledge-base/azure/ActivityLog/delete-network-security-group-rule-alert-in-use.html
Create Alert for "Delete Network Security Group" Events,Activity Log,High (not acceptable risk),NA,Ensure that an Azure activity log alert is used to detect "Delete Network Security Group" events in your Microsoft Azure cloud account. Activity log alerts get activated when a new activity log event that matches the condition specified in the alert occurs. In this case the condition used is 'Whenever the Administrative Activity Log "Delete Network Security Group (networkSecurityGroups)" has "any" level with "any" status and event is initiated by "any"'.,Monitoring your Azure cloud account for "Delete Network Security Group" events can provide insights into changes done at the Azure cloud network level and can help reduce the time it takes to detect unsolicited delete actions.,To determine if there is an activity log alert created for "Delete Network Security Group" events in your Azure cloud account perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to Azure Monitor blade at https://portal.azure.com/#blade/Microsoft_Azure_Monitoring/AzureMonitoringBrowseBlade/overview. 			03				In the navigation panel select Alerts to access all the notification alerts available in your Azure cloud account.			04				On the Alerts page click on the Manage alert rules button from the dashboard top menu to access the alert rules management page.			05				On the Rules page select the appropriate subscription from the Subscription filter box and the Enabled option from the Status dropdown list to return all the active alert rules created in the selected Azure account subscription.			06				Click on the name of the alert rule that you want to examine.			07				On the selected alert rule configuration page check the condition phrase available in the CONDITION section. If the phrase is different than Whenever the Administrative Activity Log "Delete Network Security Group (networkSecurityGroups)" has "any" level with "any" status and event is initiated by "any" the selected alert rule is not configured to detect "Delete Network Security Group" events.			08				Repeat step no. 6 and 7 for the rest of the alert rules available within the selected subscription. If none of the verified rules contain the right condition there are no activity log alerts created for "Delete Network Security Group" events in the selected Azure cloud account subscription.			09				Repeat steps no. 5 â 8 for each subscription created in your Microsoft Azure cloud account.			,01				Run monitor activity-log alert list command (Windows/macOS/Linux) using custom query filters to get the IDs of all the active activity log alert rules available within the current Azure subscription:az monitor activity-log alert list	--query '[?(enabled==`true`)].id'02				The command output should return the requested activity log alert rule IDs:["/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourceGroups/cloud-shell-storage-westeurope/providers/microsoft.insights/activityLogAlerts/Cloud Conformity Create Update NSG Alert""/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourceGroups/cloud-shell-storage-westeurope/providers/microsoft.insights/activityLogAlerts/Cloud Conformity Access Policy Change Alert"]03				Run monitor activity-log alert show command (Windows/macOS/Linux) using the ID of the alert rule that you want to examine as identifier parameter and custom query filters to list the condition defined for the selected activity log alert rule:az monitor activity-log alert show	--ids "/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourceGroups/cloud-shell-storage-westeurope/providers/microsoft.insights/activityLogAlerts/Cloud Conformity Create Update NSG Alert"	--query 'condition'04				The command output should return the selected alert rule condition metadata:{  "allOf": [    {      "containsAny": null      "equals": "Policy"      "field": "category"      "odata.type": null    }    {      "containsAny": null      "equals": "Microsoft.Network/networkSecurityGroups/write"      "field": "operationName"      "odata.type": null    }  ]  "odata.type": null}				Check the monitor activity-log alert show command output for the object with the "field" property set to "operationName". If the object's "equals" property is not set to "Microsoft.Network/networkSecurityGroups/delete" the selected alert rule is not configured to detect "Delete Network Security Group" events.			05				Repeat step no. 3 and 4 for the rest of the alert rules available in the current subscription. If none of the verified rules contain the right condition there are no activity log alerts created for "Delete Network Security Group" events in the selected Azure cloud account subscription.			06				Repeat steps no. 1 â 5 for each subscription available in your Microsoft Azure cloud account.			,01				Sign in to Azure Management Console.			02				Navigate to Azure Monitor blade at https://portal.azure.com/#blade/Microsoft_Azure_Monitoring/AzureMonitoringBrowseBlade/overview. 			03				In the navigation panel select Alerts to access all the notification alerts available in your Azure cloud account.			04				On the Alerts page click on the Manage alert rules button from the dashboard top menu to access the alert rules management page.			05				On the Rules page select the Azure account subscription where you want to create the new alert rule from the Subscription filter box.			06				Click New alert rule button from the dashboard top menu to initiate the rule setup process.			07				On the Create rule page perform the following actions:										In the RESOURCE section click Select and configure the target that you wish to monitor. In this case select the appropriate Azure account subscription then click Done to complete this step.											In the CONDITION section click Add to configure the alert rule condition. A condition is represented by a signal and its logic. On Configure signal logic panel find and select the signal with the name Delete Network Security Group (Microsoft.Network/networkSecurityGroups). To get the right configuration for the selected condition (i.e. Whenever the Administrative Activity Log "Delete Network Security Group (networkSecurityGroups)" has "any" level with "any" status and event is initiated by "any") leave the default settings available for the signal logic unchanged then click Done. 											In the ACTIONS section click Select action group to choose an existing action group to attach to this alert rule or click Create action group button to create a new one. An action group is a collection of alert notification preferences defined for the selected Azure subscription. Azure Monitor alerts use action groups to notify users that an alert has been triggered.											In the ALERT DETAILS section type a unique name for the new alert rule in the Alert rule name box provide a short description in the Description box and choose the resource group in which the alert will be created from the Save alert to resource group dropdown list.											Make sure that Enable rule upon creation option is set to Yes then click Create alert rule to finish the rule setup process. 					08				Repeat steps no. 5 â 7 for each subscription created in your Microsoft Azure cloud account.			,01				Run monitor activity-log alert create command (Windows/macOS/Linux) to create a new Azure activity log alert for detecting "Delete Network Security Group" events within the current Microsoft Azure cloud subscription. For example the following monitor activity-log alert create command request creates an activity log alert rule with the name "cc-delete-network-security-group-alert" associated with an action group identified by ID "/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourcegroups/default-activitylogalerts/providers/microsoft.insights/actiongroups/cloudconformity%20action%20group" with a condition defined by "category=Administrative and operationName=Microsoft.Network/networkSecurityGroups/delete":az monitor activity-log alert create	--name cc-delete-network-security-group-alert	--description "Alert triggered by Delete Network Security Group events"	--resource-group Default-ActivityLogAlerts	--action-group "/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourcegroups/default-activitylogalerts/providers/microsoft.insights/actiongroups/cloudconformity%20action%20group"	--condition category=Administrative and operationName=Microsoft.Network/networkSecurityGroups/delete02				The command output should return the configuration metadata for the newly created alert:{  "actions": {    "actionGroups": [      {        "actionGroupId": "/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourcegroups/default-activitylogalerts/providers/microsoft.insights/actiongroups/cloudconformity%20action%20group"        "webhookProperties": null      }    ]  }  "condition": {    "allOf": [      {        "containsAny": null        "equals": "Administrative"        "field": "category"        "odata.type": null      }      {        "containsAny": null        "equals": "Microsoft.Network/networkSecurityGroups/delete"        "field": "operationName"        "odata.type": null      }    ]    "odata.type": null  }  "description": "Alert triggered by Delete Network Security Group events"  "enabled": true  "id": "/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourceGroups/Default-ActivityLogAlerts/providers/microsoft.insights/activityLogAlerts/cc-delete-network-security-group-alert"  "identity": null  "kind": null  "location": "Global"  "name": "cc-delete-network-security-group-alert"  "resourceGroup": "Default-ActivityLogAlerts"  "scopes": [    "/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourceGroups/Default-ActivityLogAlerts"  ]  "tags": {}  "type": "Microsoft.Insights/ActivityLogAlerts"}03				Repeat step no. 1 and 2 for each subscription created within your Microsoft Azure cloud account.			,https://www.cloudconformity.com/knowledge-base/azure/ActivityLog/delete-network-security-group-alert-in-use.html
Create Alert for "Delete Security Solution" Events,Activity Log,High (not acceptable risk),ActivityLog-008,Ensure that an Azure activity log alert is used to detect "Delete Security Solution" events within your Microsoft Azure cloud account. Activity log alerts get activated when a new activity log event that matches the condition specified in the alert occurs. In this case the condition required is 'Whenever the Security Activity Log "Delete Security Solutions (Microsoft.Security/securitySolutions)" has "any" level with "any" status and event is initiated by "any"'.,Monitoring your Azure cloud account for "Delete Security Solution" events can provide insights into the changes made to the Azure Security Solutions and can help reduce the time it takes to detect unauthorized delete actions.,To determine if there is an activity log alert created for "Delete Security Solution" events in your Azure cloud account perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to Azure Monitor blade at https://portal.azure.com/#blade/Microsoft_Azure_Monitoring/AzureMonitoringBrowseBlade/overview.			03				In the navigation panel select Alerts to access all the notification alerts available in your Azure cloud account.			04				On the Alerts page click on the Manage alert rules button from the dashboard top menu to access the alert rules management page.			05				On the Rules page select the appropriate subscription from the Subscription filter box and the Enabled option from the Status dropdown list to return all the active alert rules created in the selected Azure account subscription.			06				Click on the name of the alert rule that you want to examine.			07				On the selected alert rule configuration page check the condition phrase available in the CONDITION section. If the phrase is different than Whenever the Security Activity Log "Delete Security Solutions (Microsoft.Security/securitySolutions)" has "any" level with "any" status and event is initiated by "any" the selected alert rule is not configured to detect "Delete Security Solution" events.			08				Repeat step no. 6 and 7 for the rest of the alert rules available in the selected subscription. If none of the verified rules contain the right condition there are no activity log alerts created for "Delete Security Solution" events in the selected Azure cloud account subscription.			09				Repeat steps no. 5 â 8 for each subscription created in your Microsoft Azure cloud account.			,01				Run monitor activity-log alert list command (Windows/macOS/Linux) using custom query filters to get the IDs of all the active activity log alert rules available within the current Azure subscription:az monitor activity-log alert list	--query '[?(enabled==`true`)].id'02				The command output should return the requested activity log alert rule IDs:["/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourceGroups/cloud-shell-storage-westeurope/providers/microsoft.insights/activityLogAlerts/Cloud Conformity Delete NSG Alert""/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourceGroups/cloud-shell-storage-westeurope/providers/microsoft.insights/activityLogAlerts/Cloud Conformity Access Policy Change Alert"]03				Run monitor activity-log alert show command (Windows/macOS/Linux) using the ID of the alert rule that you want to examine as identifier parameter and custom query filters to list the condition defined for the selected activity log alert rule:az monitor activity-log alert show	--ids "/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourceGroups/cloud-shell-storage-westeurope/providers/microsoft.insights/activityLogAlerts/Cloud Conformity Delete NSG Alert"	--query 'condition'04				The command output should return the selected alert rule condition metadata:{  "allOf": [    {      "containsAny": null      "equals": "Administrative"      "field": "category"      "odata.type": null    }    {      "containsAny": null      "equals": "Microsoft.Network/networkSecurityGroups/delete"      "field": "operationName"      "odata.type": null    }  ]  "odata.type": null}				Check the monitor activity-log alert show command output for the object with the "field" property set to "operationName". If the object's "equals" property is not set to "Microsoft.Security/securitySolutions/delete" the selected alert rule is not configured to detect "Delete Security Solution" events.			05				Repeat step no. 3 and 4 for the rest of the alert rules available in the current subscription. If none of the verified rules contain the right condition there are no activity log alerts created for "Delete Security Solution" events in the selected Azure cloud account subscription.			06				Repeat steps no. 1 â 5 for each subscription available in your Microsoft Azure cloud account.			,01				Sign in to Azure Management Console.			02				Navigate to Azure Monitor blade at https://portal.azure.com/#blade/Microsoft_Azure_Monitoring/AzureMonitoringBrowseBlade/overview.			03				In the navigation panel select Alerts to access all the notification alerts available in your Azure cloud account.			04				On the Alerts page click on the Manage alert rules button from the dashboard top menu to access the alert rules management page.			05				On the Rules page select the Azure account subscription where you want to create the new alert rule from the Subscription filter box.			06				Click New alert rule button from the dashboard top menu to initiate the rule setup process.			07				On the Create rule page perform the following actions:										In the RESOURCE section click Select and configure the target that you wish to monitor. In this case select the appropriate Azure account subscription then click Done to complete this step.											In the CONDITION section click Add to configure the alert rule condition. A condition is represented by a signal and its logic. On Configure signal logic panel find and select the signal with the name Delete Security Solutions (Microsoft.Security/securitySolutions). To get the right configuration for the selected condition (i.e. Whenever the Security Activity Log "Delete Security Solutions (Microsoft.Security/securitySolutions)" has "any" level with "any" status and event is initiated by "any") leave the default settings available for the signal logic unchanged then click Done.											In the ACTIONS section click Select action group to choose an existing action group to attach to this alert rule or click Create action group button to create a new one. An action group is a collection of alert notification preferences defined for the selected Azure subscription. Azure Monitor alerts use action groups to notify users that an alert has been triggered.											In the ALERT DETAILS section type a unique name for the new alert rule in the Alert rule name box provide a short description in the Description box and choose the resource group in which the alert will be created from the Save alert to resource group dropdown list.											Make sure that Enable rule upon creation option is set to Yes then click Create alert rule to finish the rule setup process. It can take up to 5 minutes for an alert rule to become active.					08				Repeat steps no. 5 â 7 for each subscription created in your Microsoft Azure cloud account.			,01				Run monitor activity-log alert create command (Windows/macOS/Linux) to create a new Azure activity log alert for detecting "Delete Security Solution" events in the current Microsoft Azure cloud subscription. For example the following monitor activity-log alert create command request creates an activity log alert rule with the name "cc-delete-security-solution-alert" associated with an action group identified by ID "/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourcegroups/default-activitylogalerts/providers/microsoft.insights/actiongroups/cloudconformity%20action%20group" with a condition defined by "category=Administrative and operationName=Microsoft.Security/securitySolutions/delete":az monitor activity-log alert create	--name cc-delete-security-solution-alert	--description "Alert triggered by Delete Security Solution events"	--resource-group Default-ActivityLogAlerts	--action-group "/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourcegroups/default-activitylogalerts/providers/microsoft.insights/actiongroups/cloudconformity%20action%20group"	--condition category=Administrative and operationName=Microsoft.Security/securitySolutions/delete02				The command output should return the configuration metadata for the newly created alert:{  "actions": {    "actionGroups": [      {        "actionGroupId": "/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourcegroups/default-activitylogalerts/providers/microsoft.insights/actiongroups/cloudconformity%20action%20group"        "webhookProperties": null      }    ]  }  "condition": {    "allOf": [      {        "containsAny": null        "equals": "Administrative"        "field": "category"        "odata.type": null      }      {        "containsAny": null        "equals": "Microsoft.Security/securitySolutions/delete"        "field": "operationName"        "odata.type": null      }    ]    "odata.type": null  }  "description": "Alert triggered by Delete Security Solution events"  "enabled": true  "id": "/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourceGroups/Default-ActivityLogAlerts/providers/microsoft.insights/activityLogAlerts/cc-delete-security-solution-alert"  "identity": null  "kind": null  "location": "Global"  "name": "cc-delete-security-solution-alert"  "resourceGroup": "Default-ActivityLogAlerts"  "scopes": [    "/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourceGroups/Default-ActivityLogAlerts"  ]  "tags": {}  "type": "Microsoft.Insights/ActivityLogAlerts"}03				Repeat step no. 1 and 2 for each subscription created within your Microsoft Azure cloud account.			,https://www.cloudconformity.com/knowledge-base/azure/ActivityLog/delete-security-solution-alert.html
Create Alert for "Update Security Policy" Events,Activity Log,High (not acceptable risk),ActivityLog-007,Ensure that an Azure activity log alert is used to detect "Update Security Policy" events within your Microsoft Azure cloud account. Activity log alerts get activated when a new activity log event that matches the condition specified in the alert occurs. In this case the required alert condition is 'Whenever the Security Activity Log "Update security policy (Microsoft.Security/policies)" has "any" level with "any" status and event is initiated by "any"'.,Monitoring your Azure cloud account for "Update Security Policy" events can provide insight into the security policy changes made in your Azure cloud account and can help reduce the time it takes to detect unsolicited changes.,To determine if there is an activity log alert created for "Update Security Policy" events in your Azure cloud account perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to Azure Monitor blade at https://portal.azure.com/#blade/Microsoft_Azure_Monitoring/AzureMonitoringBrowseBlade/overview.			03				In the navigation panel select Alerts to access all the notification alerts available in your Azure cloud account.			04				On the Alerts page click on the Manage alert rules button from the dashboard top menu to access the alert rules management page.			05				On the Rules page select the appropriate subscription from the Subscription filter box and the Enabled option from the Status dropdown list to return all the active alert rules created in the selected Azure account subscription.			06				Click on the name (link) of the alert rule that you want to examine.			07				On the selected alert rule configuration page check the condition phrase available in the CONDITION section. If the condition phrase is different than Whenever the Security Activity Log "Update security policy (Microsoft.Security/policies)" has "any" level with "any" status and event is initiated by "any" the selected alert rule is not configured to detect "Update Security Policy" events.			08				Repeat step no. 6 and 7 for the rest of the alert rules available in the selected subscription. If none of the verified rules contain the right condition there are no activity log alerts created for "Update Security Policy" events in the selected Azure cloud account subscription.			09				Repeat steps no. 5 â 8 for each subscription created in your Microsoft Azure cloud account.			,01				Run monitor activity-log alert list command (Windows/macOS/Linux) using custom query filters to get the IDs of all the active activity log alert rules available within the current Azure subscription:az monitor activity-log alert list	--query '[?(enabled==`true`)].id'02				The command output should return the requested activity log alert rule IDs:["/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourceGroups/cloud-shell-storage-westeurope/providers/microsoft.insights/activityLogAlerts/Cloud Conformity Create Policy Assignment Alert""/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourceGroups/cloud-shell-storage-westeurope/providers/microsoft.insights/activityLogAlerts/Cloud Conformity Delete Access Policy Alert"]03				Run monitor activity-log alert show command (Windows/macOS/Linux) using the ID of the alert rule that you want to examine as identifier parameter and custom query filters to list the condition defined for the selected activity log alert rule:az monitor activity-log alert show	--ids "/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourceGroups/cloud-shell-storage-westeurope/providers/microsoft.insights/activityLogAlerts/Cloud Conformity Create Policy Assignment Alert Alert"	--query 'condition'04				The command output should return the selected alert rule condition metadata:{  "allOf": [    {      "containsAny": null      "equals": "Policy"      "field": "category"      "odata.type": null    }    {      "containsAny": null      "equals": "Microsoft.Authorization/policyAssignments/write"      "field": "operationName"      "odata.type": null    }  ]  "odata.type": null}				Check the monitor activity-log alert show command output for the object with the "field" property set to "operationName". If the object's "equals" property is not set to "Microsoft.Security/policies/write" the selected alert rule is not configured to detect "Update Security Policy" events.			05				Repeat step no. 3 and 4 for the rest of the alert rules available in the current subscription. If none of the verified rules contain the right condition there are no activity log alerts created for "Update Security Policy" events in the selected Azure cloud account subscription.			06				Repeat steps no. 1 â 5 for each subscription available in your Microsoft Azure cloud account.			,01				Sign in to Azure Management Console.			02				Navigate to Azure Monitor blade at https://portal.azure.com/#blade/Microsoft_Azure_Monitoring/AzureMonitoringBrowseBlade/overview.			03				In the navigation panel select Alerts to access all the notification alerts available in your Azure cloud account.			04				On the Alerts page click on the Manage alert rules button from the dashboard top menu to access the alert rules management page.			05				On the Rules page select the Azure account subscription where you want to create the new alert rule from the Subscription filter box.			06				Click New alert rule button from the dashboard top menu to initiate the rule setup process.			07				On the Create rule page perform the following actions:										In the RESOURCE section click Select and configure the target that you wish to monitor. In this case select the appropriate Azure account subscription then click Done.											In the CONDITION section click Add to configure the alert rule condition (i.e. a signal and its logic). On Configure signal logic panel find and select the signal with the name Update security policy (Microsoft.Security/policies). To obtain the right configuration for the condition (i.e. Whenever the Security Activity Log "Update security policy (Microsoft.Security/policies)" has "any" level with "any" status and event is initiated by "any") leave the default settings available for the signal logic unchanged then click Done.											In the ACTIONS section click Select action group to choose an existing action group to attach to the new alert rule or click Create action group button to create a new one. An action group is a collection of alert notification preferences defined for the selected Azure subscription. Azure Monitor service alerts use action groups to notify users that an alert has been triggered.											In the ALERT DETAILS section provide a unique name for the new alert rule in the Alert rule name box enter a short description in the Description box and choose the resource group in which the alert will be created from the Save alert to resource group dropdown list.											Make sure that Enable rule upon creation option is set to Yes then click Create alert rule to finish the rule setup process. It can take up to 5 minutes for an alert rule to become active.					08				Repeat steps no. 5 â 7 for each subscription created in your Microsoft Azure cloud account.			,01				Run monitor activity-log alert create command (Windows/macOS/Linux) to create a new Azure activity log alert for detecting "Update Security Policy" events within the current Microsoft Azure cloud subscription:az monitor activity-log alert create	--name cc-update-security-policy-alert	--description "Alert triggered by Update Security Policy events"	--resource-group Default-ActivityLogAlerts	--action-group "/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourcegroups/default-activitylogalerts/providers/microsoft.insights/actiongroups/cloudconformity%20action%20group"	--condition category=Administrative and operationName=Microsoft.Security/policies/write02				The command output should return the configuration metadata for the newly created alert:{  "actions": {    "actionGroups": [      {        "actionGroupId": "/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourcegroups/default-activitylogalerts/providers/microsoft.insights/actiongroups/cloudconformity%20action%20group"        "webhookProperties": null      }    ]  }  "condition": {    "allOf": [      {        "containsAny": null        "equals": "Administrative"        "field": "category"        "odata.type": null      }      {        "containsAny": null        "equals": "Microsoft.Security/policies/write"        "field": "operationName"        "odata.type": null      }    ]    "odata.type": null  }  "description": "Alert triggered by Update Security Policy events"  "enabled": true  "id": "/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourceGroups/Default-ActivityLogAlerts/providers/microsoft.insights/activityLogAlerts/cc-update-security-policy-alert"  "identity": null  "kind": null  "location": "Global"  "name": "cc-update-security-policy-alert"  "resourceGroup": "Default-ActivityLogAlerts"  "scopes": [    "/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourceGroups/Default-ActivityLogAlerts"  ]  "tags": {}  "type": "Microsoft.Insights/ActivityLogAlerts"}03				Repeat step no. 1 and 2 for each subscription created within your Microsoft Azure cloud account.			,https://www.cloudconformity.com/knowledge-base/azure/ActivityLog/update-security-policy-alert.html
Create Alert for âCreate/Update Network Security Group Ruleâ Events,Activity Log,High (not acceptable risk),NA,Ensure that an Azure activity log alert is fired whenever âCreateâ or âUpdate Network Security Group Ruleâ events are triggered within your Microsoft Azure cloud account. Activity log alerts get activated when a new activity log event that matches the condition specified in the alert occurs. In this case the alert condition required is 'Whenever the Administrative Activity Log "Create or Update Security Rule (networkSecurityGroups/securityRules)" has "any" level with "any" status and event is initiated by "any"'.,Monitoring your Microsoft Azure account for âCreateâ or âUpdate Network Security Group Ruleâ events can give you insights into the cloud network access changes and can help reduce the time it takes to detect suspicious activity.,To determine if there is an activity log alert created for âCreate/Update Network Security Group Ruleâ events in your Azure cloud account perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to Azure Monitor blade at https://portal.azure.com/#blade/Microsoft_Azure_Monitoring/AzureMonitoringBrowseBlade/overview. 			03				In the navigation panel select Alerts to access all the alerts available within your Azure cloud account.			04				On the Alerts page click on the Manage alert rules button from the dashboard top menu to access the alert rules management page.			05				On the Rules page select the subscription that you want to examine from the Subscription filter box and the Enabled option from the Status dropdown list to return all the active alert rules created in the selected account subscription.			06				Click on the name (link) of the alert rule that you want to examine.			07				On the selected alert rule configuration page check the condition phrase available in the CONDITION section. If the condition phrase is different than Whenever the Administrative Activity Log "Create or Update Security Rule (networkSecurityGroups/securityRules)" has "any" level with "any" status and event is initiated by "any" the selected alert rule is not configured to fire whenever âCreateâ or âUpdate Network Security Group Ruleâ events are triggered.			08				Repeat step no. 6 and 7 for the rest of the alert rules available within the selected account subscription. If none of the verified rules contain the right condition there are no activity log alerts available for âCreateâ or âUpdate Network Security Group Ruleâ events in the selected Azure cloud account subscription.			09				Repeat steps no. 5 â 8 for each subscription created in your Microsoft Azure cloud account.			,01				Run monitor activity-log alert list command (Windows/macOS/Linux) using custom query filters to get the identifiers of all the active activity log alert rules available in the current Azure subscription:az monitor activity-log alert list	--query '[?(enabled==`true`)].id'02				The command output should return the requested alert rule IDs:["/subscriptions/1234abcd-1234-abcd-1234-abcd1234abcd/resourceGroups/cloud-shell-storage-westeurope/providers/microsoft.insights/activityLogAlerts/Cloud Conformity Delete NSG Alert""/subscriptions/1234abcd-1234-abcd-1234-abcd1234abcd/resourceGroups/cloud-shell-storage-westeurope/providers/microsoft.insights/activityLogAlerts/ Cloud Conformity Update Access Policy Alert""/subscriptions/1234abcd-1234-abcd-1234-abcd1234abcd/resourceGroups/cloud-shell-storage-westeurope/providers/microsoft.insights/activityLogAlerts/Cloud Conformity Delete Resource Alert"]03				Run monitor activity-log alert show command (Windows/macOS/Linux) using the ID of the alert rule that you want to examine as identifier parameter and custom query filters to list the condition(s) defined for the selected activity log alert rule:az monitor activity-log alert show	--ids "/subscriptions/1234abcd-1234-abcd-1234-abcd1234abcd/resourceGroups/cloud-shell-storage-westeurope/providers/microsoft.insights/activityLogAlerts/Cloud Conformity Delete NSG Alert"	--query 'condition'04				The command output should return the condition metadata for the selected alert rule:{  "allOf": [    {      "containsAny": null      "equals": "Policy"      "field": "category"      "odata.type": null    }    {      "containsAny": null      "equals": "Microsoft.Network/networkSecurityGroups/delete"      "field": "operationName"      "odata.type": null    }  ]  "odata.type": null}				Check the command output for the JSON object with the "field" property set to "operationName" (highlighted). If the object's "equals" property is not set to "Microsoft.Network/networkSecurityGroups/securityRules/write" the selected alert rule is not configured to fire whenever âCreateâ or âUpdate Network Security Group Ruleâ events are triggered.			05				Repeat step no. 3 and 4 for the rest of the alert rules available in the current subscription. If none of the verified rules contain the right condition there are no activity log alerts available for âCreateâ or âUpdate Network Security Group Ruleâ events within the selected Azure cloud account subscription.			06				Repeat steps no. 1 â 5 for each subscription available in your Microsoft Azure cloud account.			,01				Sign in to Azure Management Console.			02				Navigate to Azure Monitor blade at https://portal.azure.com/#blade/Microsoft_Azure_Monitoring/AzureMonitoringBrowseBlade/overview. 			03				In the navigation panel select Alerts to access all the alerts available in your Azure cloud account.			04				On the Alerts page click on the Manage alert rules button from the dashboard top menu to access the alert rules management page.			05				On the Rules page select the Azure account subscription where you want to create the new alert rule from the Subscription filter box.			06				Click New alert rule button from the dashboard top menu to start the rule setup process.			07				On the Create rule page perform the following actions:										In the RESOURCE section click Select and configure the target subscription that you wish to monitor. Once the appropriate Azure subscription is selected click Done.											In the CONDITION section click Add to configure the alert rule condition. On Configure signal logic panel find and select the signal with the name Create or Update Security Rule (Microsoft.Network/networkSecurityGroups/securityRules). To obtain the right configuration for the condition (i.e. Whenever the Administrative Activity Log "Create or Update Security Rule (networkSecurityGroups/securityRules)" has "any" level with "any" status and event is initiated by "any") leave the default settings available for the condition logic unchanged then click Done to generate the condition. 											In the ACTIONS section click Select action group to choose an existing action group to attach to the new alert rule or click Create action group button to create a new one. An action group is a collection of alert notification preferences defined for the selected Azure subscription. Azure Monitor service alerts use action groups to notify users that an alert has been triggered.											In the ALERT DETAILS section provide a unique name for the new rule in the Alert rule name box type a short description in the Description box and choose the resource group in which the alert will be created from the Save alert to resource group dropdown list.											Make sure that Enable rule upon creation option is set to Yes then click Create alert rule to finish the rule setup process. It can take up to 5 minutes for an alert rule to become active.					08				Repeat steps no. 5 â 7 for each subscription created in your Microsoft Azure cloud account.			,01				Run monitor activity-log alert create command (Windows/macOS/Linux) to create a new Azure activity log alert that fires whenever a âCreateâ or âUpdate Network Security Group Ruleâ event is triggered within the current Microsoft Azure cloud subscription:az monitor activity-log alert create	--name cc-create-update-nsg-rule-alert	--description "Alert triggered by Create or Update Network Security Group Rule events"	--resource-group Default-ActivityLogAlerts	--action-group "/subscriptions/1234abcd-1234-abcd-1234-abcd1234abcd/resourcegroups/default-activitylogalerts/providers/microsoft.insights/actiongroups/cloudconformity%20action%20group"	--condition category=Administrative and operationName=Microsoft.Network/networkSecurityGroups/securityRules/write02				The command output should return the configuration metadata for the new activity log alert:{  "actions": {    "actionGroups": [      {        "actionGroupId": "/subscriptions/1234abcd-1234-abcd-1234-abcd1234abcd/resourcegroups/default-activitylogalerts/providers/microsoft.insights/actiongroups/cloudconformity%20action%20group"        "webhookProperties": null      }    ]  }  "condition": {    "allOf": [      {        "containsAny": null        "equals": "Administrative"        "field": "category"        "odata.type": null      }      {        "containsAny": null        "equals": "Microsoft.Network/networkSecurityGroups/securityRules/write"        "field": "operationName"        "odata.type": null      }    ]    "odata.type": null  }  "description": "Alert triggered by Create or Update Network Security Group Rule events"  "enabled": true  "id": "/subscriptions/1234abcd-1234-abcd-1234-abcd1234abcd/resourceGroups/Default-ActivityLogAlerts/providers/microsoft.insights/activityLogAlerts/cc-create-update-nsg-rule-alert"  "identity": null  "kind": null  "location": "Global"  "name": "cc-create-update-nsg-rule-alert"  "resourceGroup": "Default-ActivityLogAlerts"  "scopes": [    "/subscriptions/1234abcd-1234-abcd-1234-abcd1234abcd/resourceGroups/Default-ActivityLogAlerts"  ]  "tags": {}  "type": "Microsoft.Insights/ActivityLogAlerts"}03				Repeat step no. 1 and 2 for each subscription created in your Microsoft Azure cloud account.			,https://www.cloudconformity.com/knowledge-base/azure/ActivityLog/create-update-network-security-group-rule-alert-in-use.html
Check for Latest Version of .NET Framework,AppService,Low (generally tolerable level of risk),AppService-003,Ensure that all Microsoft Azure App Service web applications developed with the .NET software stack are using the latest available version of .NET Framework in order to take advantage of latest security fixes and/or new functionalities and features.,With each software installation an organization need to determine if a newer version of the software meets their requirements. The organization also verifies the compatibility and support provided for any additional software against the update revision that is selected. These newer software versions contain security enhancements and additional functionality therefore it is highly recommended to use the latest software version to take advantage of security and performance enhancements and new capabilities.,To determine if your Azure App Service ASP.NET applications are using the latest version of .NET Framework perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to App Services blade at https://portal.azure.com/#blade/HubsExtension/BrowseResourceBlade/resourceType/Microsoft.Web%2Fsites. 			03				Click on the name of the App Service web application that you want to examine.			04				In the navigation menu under Settings select Configuration to access the configuration settings defined for the selected application.			05				On the Configuration panel select General settings tab to access the application general settings.			06				In the Stack settings section check the Stack setting value to determine the type of the software stack used by the selected web application. If Stack is set to .NET check the Microsoft. NET Framework version available in the .NET Framework version dropdown list. If .NET Framework version does not show the latest version available in the list (for example v4.7) the selected Azure App Service ASP.NET web application is not configured to use the latest version of Microsoft .NET Framework.			07				Repeat steps no. 3 â 6 for each Azure App Service web application launched in the current subscription.			08				Repeat steps no. 3 â 7 for other subscriptions created in your Microsoft Azure cloud account.			,01				Run webapp list-runtimes command (Windows/macOS/Linux) using custom query filters to list the .NET Framework versions currently supported by Microsoft Azure App Service:az webapp list-runtimes | grep aspnet02				The command output should return the supported versions of the Microsoft .NET Framework:"aspnet|v4.7""aspnet|v3.5"03				Run webapp list command (Windows/macOS/Linux) using custom query filters to list the IDs of all App Service web applications deployed in the current Azure subscription:az webapp list	--query '[*].id'04				The command output should return the requested Azure App Service application IDs:["/subscriptions/1234abcd-1234-abcd-1234-abcd1234abcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Web/sites/cc-main-aspnet-app""/subscriptions/1234abcd-1234-abcd-1234-abcd1234abcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Web/sites/cc-mobile-webapp""/subscriptions/1234abcd-1234-abcd-1234-abcd1234abcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Web/sites/cc-laravel-webapp"]05				Run webapp config show command (Windows/macOS/Linux) using the ID of the application that you want to examine as identifier parameter and custom query filters to describe the .NET Framework version configured for the selected Azure App Service web application:az webapp config show	--ids "/subscriptions/1234abcd-1234-abcd-1234-abcd1234abcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Web/sites/cc-main-aspnet-app"	--query '{"netFrameworkVersion":netFrameworkVersion}'06				The command output should return the .NET Framework version currently in use:{  "netFrameworkVersion": "v3.0"}			If the value returned by the webapp config show command output for "netFrameworkVersion" configuration attribute is null or an empty string (i.e. "") the verified web application is not using a .NET software stack. Otherwise check the returned attribute value and compare it with each version returned at step no. 2. For comparison use the following conversion method: "v4.0" for .NET Framework 4.7 and "v3.0" for .NET Framework version 3.5. If "netFrameworkVersion" value is not set to the latest version of the .NET Framework returned at step no. 2 the selected Azure App Service ASP.NET web application is not using the latest version of the Microsoft .NET Framework for its software stack.			07				Repeat steps no. 3 â 6 for each Azure App Service web application deployed within the current subscription.			08				Repeat steps no. 3 â 7 for each subscription created in your Microsoft Azure cloud account.			,01				Sign in to Azure Management Console.			02				Navigate to App Services blade at https://portal.azure.com/#blade/HubsExtension/BrowseResourceBlade/resourceType/Microsoft.Web%2Fsites. 			03				Click on the name of the web application that you want to reconfigure (see Audit section part I to identify the right ASP.NET application).			04				In the navigation menu under Settings select Configuration to access the configuration settings defined for the selected application.			05				On the Configuration panel select General settings tab to access the web application general settings.			06				In the Stack settings section select the latest version of the .NET Framework available in the .NET Framework version dropdown list.			07				Click Save to apply the configuration change. Once the change becomes active the Azure Management Console should display the following confirmation message: "Successfully updated web app settings".			08				Repeat steps no. 3 â 7 for each Azure App Service ASP.NET web application available in the current subscription.			09				Repeat steps no. 3 â 8 for each subscription created in your Microsoft Azure cloud account.			,01				Run webapp list-runtimes command (Windows/macOS/Linux) using custom query filters to list the .NET Framework versions currently supported by Microsoft Azure App Service:az webapp list-runtimes | grep aspnet02				The command output should return the supported versions of the Microsoft .NET Framework:"aspnet|v4.7""aspnet|v3.5"03				Run webapp config set command (Windows/macOS/Linux) using the ID of the Azure App Service web application that you want to reconfigure as identifier parameter (see Audit section part I to identify the right ASP.NET application) to enable the latest version of the Microsoft .NET Framework for the selected web application. For --net-framework-version parameter value use "v4.0" to enable .NET Framework version 4.7 (latest stable version of .NET Framework returned by the webapp list-runtimes command at step no. 2):az webapp config set	--ids "/subscriptions/1234abcd-1234-abcd-1234-abcd1234abcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Web/sites/cc-main-aspnet-app"	--net-framework-version "v4.0"04				The command output should return the metadata available for the reconfigured Azure App Service web application:{  "alwaysOn": false  "apiDefinition": null  "appCommandLine": ""  "appSettings": null  "autoHealEnabled": false  "autoHealRules": null  "javaContainer": null  "javaContainerVersion": null  "javaVersion": null  "limits": null  "linuxFxVersion": ""  "loadBalancing": "LeastRequests"  "localMySqlEnabled": false  "location": "West Europe"  "logsDirectorySizeLimit": 35  "machineKey": null  "managedPipelineMode": "Integrated"  "managedServiceIdentityId": null  "minTlsVersion": "1.2"  "name": "cc-main-aspnet-app"  "netFrameworkVersion": "v4.0"   ...   "nodeVersion": ""  "numberOfWorkers": 1  "phpVersion": "5.6"  "publishingUsername": "$cc-main-aspnet-app"  "push": null  "pythonVersion": ""  "remoteDebuggingEnabled": false  "remoteDebuggingVersion": "VS2017"  "requestTracingEnabled": false  "requestTracingExpirationTime": null  "resourceGroup": "cloud-shell-storage-westeurope"  "scmIpSecurityRestrictionsUseMain": false  "scmType": "None"  "tracingOptions": null  "type": "Microsoft.Web/sites"  "use32BitWorkerProcess": true  "vnetName": ""  "webSocketsEnabled": false  "windowsFxVersion": null  "xManagedServiceIdentityId": null}05				Repeat step no. 3 and 4 for each Azure App Service ASP.NET web application deployed in the current subscription.			06				Repeat steps no. 3 â 5 for each subscription created in your Microsoft Azure cloud account.			,https://www.cloudconformity.com/knowledge-base/azure/AppService/latest-version-of-dotnet-framework.html
Check for Latest Version of Java,AppService,Low (generally tolerable level of risk),AppService-004,Ensure that all Microsoft Azure App Service applications developed with Java are using the latest available version of Java software in order to take advantage of the most recent security fixes performance improvements and new features.,To benefit from the latest security and performance enhancements and include any new software capabilities and features it is strongly recommended to enable the newest version of Java software supported by Microsoft Azure App Service. For example Azure App Service supports now Java 11 expanding the programming language support to the two latest LTS versions of the Java runtime. This allows you to run your App Service Java applications without incurring unplanned Java SE subscription fees all while benefit from free security patches and platform bug fixes.,To determine if your Microsoft Azure App Service applications are using the latest version of Java perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to App Services blade at https://portal.azure.com/#blade/HubsExtension/BrowseResourceBlade/resourceType/Microsoft.Web%2Fsites. 			03				Click on the name of the App Service web application that you want to examine.			04				In the navigation menu under Settings select Configuration to access the configuration settings defined for the selected application.			05				On the Configuration panel select General settings tab to access the application general settings.			06				In the Stack settings section check the Stack setting value to determine the type of the software stack used by the selected web application. If Stack is set to Java check the stack software version available in the Java version dropdown list. If Java version does not show the latest version available in the list (for example Java 11) the selected Microsoft Azure App Service web application is not configured to use the latest version of Java software.			07				Repeat steps no. 3 â 6 for each Azure App Service web application deployed in the current subscription.			08				Repeat steps no. 3 â 7 for other subscriptions created in your Microsoft Azure cloud account.			,01				Run webapp list-runtimes command (Windows/macOS/Linux) using custom query filters to list the Java versions currently supported by Microsoft Azure App Service:az webapp list-runtimes | grep java02				The command output should return the supported versions of the Java software:"java|1.7|Tomcat|7.0""java|1.7|Tomcat|8.0""java|1.7|Tomcat|8.5""java|1.7|Tomcat|9.0""java|1.7|Jetty|9.1""java|1.7|Jetty|9.3""java|1.8|Tomcat|7.0""java|1.8|Tomcat|8.0""java|1.8|Tomcat|8.5""java|1.8|Tomcat|9.0""java|1.8|Jetty|9.1""java|1.8|Jetty|9.3""java|11|Tomcat|7.0""java|11|Tomcat|8.0""java|11|Tomcat|8.5""java|11|Tomcat|9.0""java|11|Jetty|9.1""java|11|Jetty|9.3"03				Run webapp list command (Windows/macOS/Linux) using custom query filters to list the IDs of all App Service web applications launched in the current Azure subscription:az webapp list   --query '[*].id'04				The command output should return the requested Azure App Service application IDs:["/subscriptions/1234abcd-1234-abcd-1234-abcd1234abcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Web/sites/cc-tomcat-webapp""/subscriptions/1234abcd-1234-abcd-1234-abcd1234abcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Web/sites/cc-mobile-webapp""/subscriptions/1234abcd-1234-abcd-1234-abcd1234abcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Web/sites/cc-frontend-webapp"]05				Run webapp config show command (Windows/macOS/Linux) using the ID of the application that you want to examine as identifier parameter and custom query filters to describe the Java software version configured for the selected Azure App Service web application:az webapp config show	--ids "/subscriptions/1234abcd-1234-abcd-1234-abcd1234abcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Web/sites/cc-tomcat-webapp"	--query '{"javaVersion":javaVersion}'06				The command output should return the Java software version currently in use:{  "javaVersion": "1.8"}			If the value returned by the webapp config show command output for "javaVersion" configuration attribute is null or an empty string (i.e. "") the selected application is not using a Java software stack. Otherwise check the returned attribute value and compare it with each version returned at step no. 2. If "javaVersion" value is different than the latest version of Java returned at step no. 2 the selected Microsoft Azure App Service web application is not using the latest version of Java software.			07				Repeat steps no. 3 â 6 for each Azure App Service web application available within the current subscription.			08				Repeat steps no. 3 â 7 for each subscription created in your Microsoft Azure cloud account.			,01				Sign in to Azure Management Console.			02				Navigate to App Services blade at https://portal.azure.com/#blade/HubsExtension/BrowseResourceBlade/resourceType/Microsoft.Web%2Fsites. 			03				Click on the name of the web application that you want to reconfigure (see Audit section part I to identify the right Java application).			04				In the navigation menu under Settings select Configuration to access the configuration settings defined for the selected application.			05				On the Configuration panel select General settings tab to access the web application general settings.			06				In the Stack settings section perform the following:										Select the latest version of the Java software available in the Java version dropdown list. 											Set Java minor version to the latest minor version available.											Select the latest stable version of the web application container from the Java container version dropdown list.					07				Click Save to apply the configuration changes. Once these changes become active the Azure Management Console should display the following confirmation message: "Successfully updated web app settings".			08				Repeat steps no. 3 â 7 for each Azure App Service Java web application deployed in the current subscription.			09				Repeat steps no. 3 â 8 for each subscription created in your Microsoft Azure cloud account.			,01				Run webapp list-runtimes command (Windows/macOS/Linux) using custom query filters to list the Java software versions currently supported by Microsoft Azure App Service:az webapp list-runtimes | grep php02				The command output should return the Java versions supported by Azure App Service:"java|1.7|Tomcat|7.0""java|1.7|Tomcat|8.0""java|1.7|Tomcat|8.5""java|1.7|Tomcat|9.0""java|1.7|Jetty|9.1""java|1.7|Jetty|9.3""java|1.8|Tomcat|7.0""java|1.8|Tomcat|8.0""java|1.8|Tomcat|8.5""java|1.8|Tomcat|9.0""java|1.8|Jetty|9.1""java|1.8|Jetty|9.3""java|11|Tomcat|7.0""java|11|Tomcat|8.0""java|11|Tomcat|8.5""java|11|Tomcat|9.0""java|11|Jetty|9.1""java|11|Jetty|9.3"03				Run webapp config set command (Windows/macOS/Linux) using the ID of the Azure App Service web application that you want to reconfigure as identifier parameter (see Audit section part I to identify the right Java application) to enable the latest version of Java software stack as described at step no. 2 for the selected web application. For example the following command request enables Java 11 for an application using Tomcat 9.0 as web container software identified by the ID "/subscriptions/1234abcd-1234-abcd-1234-abcd1234abcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Web/sites/cc-tomcat-webapp":az webapp config set	--ids "/subscriptions/1234abcd-1234-abcd-1234-abcd1234abcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Web/sites/cc-tomcat-webapp"	--java-version "11"	--java-container "Tomcat"	--java-container-version "9.0"04				The command output should return the metadata available for the reconfigured Azure App Service Java application:{  "alwaysOn": false  "apiDefinition": null  "appCommandLine": ""  "appSettings": null  "autoHealEnabled": false  "autoHealRules": null  "autoSwapSlotName": null  "azureStorageAccounts": null  "connectionStrings": null  "detailedErrorLoggingEnabled": false  "documentRoot": null  "ftpsState": "AllAllowed"  "handlerMappings": null  "http20Enabled": false  "httpLoggingEnabled": false   ...   "javaContainer": "TOMCAT"  "javaContainerVersion": "9.0"  "javaVersion": "11"  "loadBalancing": "LeastRequests"  "localMySqlEnabled": false  "location": "West Europe"  "logsDirectorySizeLimit": 35  "machineKey": null  "managedPipelineMode": "Integrated"  "managedServiceIdentityId": null  "minTlsVersion": "1.2"  "name": "cc-tomcat-webapp"  "vnetName": ""  "webSocketsEnabled": false  "windowsFxVersion": null  "xManagedServiceIdentityId": null}05				Repeat step no. 3 and 4 for each Azure App Service Java web application deployed in the current subscription.			06				Repeat steps no. 3 â 5 for each subscription created in your Microsoft Azure cloud account.			,https://www.cloudconformity.com/knowledge-base/azure/AppService/latest-version-of-java.html
Check for Latest Version of PHP,AppService,Low (generally tolerable level of risk),AppService-002,Ensure that all Microsoft Azure App Service web applications developed with PHP are using the latest available version of PHP in order to take advantage of the most recent security fixes performance improvements and new functionalities and features.,Periodically newer versions of PHP are released to fix security flaws add performance enhancements or just to include additional functionality. Therefore using the latest software version is highly recommended in order to apply the necessary security patches and take advantage of the new enhancements and capabilities.,To determine if your Azure App Service web applications are using the latest version of PHP perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to App Services blade at https://portal.azure.com/#blade/HubsExtension/BrowseResourceBlade/resourceType/Microsoft.Web%2Fsites. 			03				Click on the name of the App Service web application that you want to examine.			04				In the navigation menu under Settings select Configuration to access the configuration settings defined for the selected application.			05				On the Configuration panel select General settings tab to access the application general settings.			06				In the Stack settings section check the Stack setting value to determine the type of the software stack used by the selected web application. If Stack is set to PHP check the stack software version available in the PHP version dropdown list. If PHP version does not show the latest version available in the list (for example 7.3) the selected Azure App Service PHP web application is not configured to use the latest version of PHP software.			07				Repeat steps no. 3 â 6 for each Azure App Service web application available within the current subscription.			08				Repeat steps no. 3 â 7 for other subscriptions created in your Microsoft Azure cloud account.			,01				Run webapp list-runtimes command (Windows/macOS/Linux) using custom query filters to list the PHP versions currently supported by Microsoft Azure App Service:az webapp list-runtimes | grep php02				The command output should return the supported versions of the PHP software:"php|5.6""php|7.0""php|7.1""php|7.2""php|7.3"03				Run webapp list command (Windows/macOS/Linux) using custom query filters to list the IDs of all App Service web applications deployed in the current Azure subscription:az webapp list	--query '[*].id'04				The command output should return the requested Azure App Service application IDs:["/subscriptions/1234abcd-1234-abcd-1234-abcd1234abcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Web/sites/cc-laravel-webapp""/subscriptions/1234abcd-1234-abcd-1234-abcd1234abcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Web/sites/cc-mobile-webapp""/subscriptions/1234abcd-1234-abcd-1234-abcd1234abcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Web/sites/cc-project5-webapp"]05				Run webapp config show command (Windows/macOS/Linux) using the ID of the application that you want to examine as identifier parameter and custom query filters to describe the PHP version configured for the selected Azure App Service web application:az webapp config show	--ids "/subscriptions/1234abcd-1234-abcd-1234-abcd1234abcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Web/sites/cc-laravel-webapp"	--query '{"phpVersion":phpVersion}'06				The command output should return the PHP software version currently in use:{  "phpVersion": "7.1"}			If the value returned by the webapp config show command output for "phpVersion" configuration attribute is null or an empty string (i.e. "") the verified web application is not using a PHP software stack. Otherwise check the returned attribute value and compare it with each version returned at step no. 2. If "phpVersion" value is different than the latest version of the PHP software returned at step no. 2 the selected Azure App Service web application is not using the latest version of PHP.			07				Repeat steps no. 3 â 6 for each Azure App Service web application provisioned in the current subscription.			08				Repeat steps no. 3 â 7 for each subscription created in your Microsoft Azure cloud account.			,01				Sign in to Azure Management Console.			02				Navigate to App Services blade at https://portal.azure.com/#blade/HubsExtension/BrowseResourceBlade/resourceType/Microsoft.Web%2Fsites. 			03				Click on the name of the web application that you want to reconfigure (see Audit section part I to identify the right application).			04				In the navigation menu under Settings select Configuration to access the configuration settings defined for the selected application.			05				On the Configuration panel select General settings tab to access the web application general settings.			06				In the Stack settings section select the latest version of the PHP software available in the PHP version dropdown list.			07				Click Save to apply the configuration changes. Once these changes become active the Azure Management Console should display the following confirmation message: "Successfully updated web app settings".			08				Repeat steps no. 3 â 7 for each Azure App Service PHP web application available within the current subscription.			09				Repeat steps no. 3 â 8 for each subscription created in your Microsoft Azure cloud account.			,01				Run webapp list-runtimes command (Windows/macOS/Linux) using custom query filters to list the PHP software versions currently supported by Microsoft Azure App Service:az webapp list-runtimes | grep php02				The command output should return the PHP versions supported by Azure App Service:"php|5.6""php|7.0""php|7.1""php|7.2""php|7.3"03				Run webapp config set command (Windows/macOS/Linux) using the ID of the Azure App Service PHP web application that you want to reconfigure as identifier parameter (see Audit section part I to identify the right application) to enable the latest version of PHP software as described at step no. 2 for the selected web application:az webapp config set	--ids "/subscriptions/1234abcd-1234-abcd-1234-abcd1234abcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Web/sites/cc-laravel-webapp"	--php-version "7.3"04				The command output should return the metadata available for the reconfigured Azure App Service web application:{  "alwaysOn": false  "apiDefinition": null  "appSettings": null  "autoHealEnabled": false  "connectionStrings": null  "location": "West Europe"  "logsDirectorySizeLimit": 35  "managedPipelineMode": "Integrated"  "managedServiceIdentityId": null  "minTlsVersion": "1.2"  "name": "cc-laravel-app"  "netFrameworkVersion": "v4.0"  "nodeVersion": ""  "numberOfWorkers": 1   ...   "phpVersion": "7.3"  "publishingUsername": "$cc-laravel-app"  "push": null  "pythonVersion": ""  "remoteDebuggingEnabled": false  "remoteDebuggingVersion": "VS2017"  "requestTracingEnabled": false  "requestTracingExpirationTime": null  "reservedInstanceCount": 0  "resourceGroup": "cloud-shell-storage-westeurope"  "webSocketsEnabled": false  "windowsFxVersion": null  "xManagedServiceIdentityId": null}05				Repeat step no. 3 and 4 for each Azure App Service PHP web application deployed in the current subscription.			06				Repeat steps no. 3 â 5 for each subscription created in your Microsoft Azure cloud account.			,https://www.cloudconformity.com/knowledge-base/azure/AppService/latest-version-of-php.html
Check for Latest Version of Python,AppService,Low (generally tolerable level of risk),AppService-001,Ensure that all Microsoft Azure App Service web applications developed with Python programming language are using the latest available version of Python in order to take advantage of the latest security fixes performance improvements and new functionalities and features.,Newer versions of Python programming language are released regularly to address security vulnerabilities add performance enhancements or include additional functionality. Cloud Conformity strongly recommends enabling the latest version of Python supported by Azure App Service to apply the most recent security patches and take advantage of the new software enhancements and capabilities.,To determine if your Azure App Service web applications are using the latest version of Python perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to App Services blade at https://portal.azure.com/#blade/HubsExtension/BrowseResourceBlade/resourceType/Microsoft.Web%2Fsites. 			03				Click on the name of the App Service web application that you want to examine.			04				In the navigation menu under Settings select Configuration to access the configuration settings defined for the selected application.			05				On the Configuration panel select General settings tab to access the application general settings.			06				In the Stack settings section check the Stack setting value to determine the type of the software stack used by the selected web application. If Stack is set to Python check the software version available in the Python version dropdown list. If Python version does not show the latest version available in the list (for example 3.4) the selected Azure App Service Python web application is not configured to use the latest version of Python programming language.			07				Repeat steps no. 3 â 6 for each Azure App Service web application launched in the current subscription.			08				Repeat steps no. 3 â 7 for other subscriptions created in your Microsoft Azure cloud account.			,01				Run webapp list-runtimes command (Windows/macOS/Linux) using custom query filters to list the Python versions currently supported by Microsoft Azure App Service:az webapp list-runtimes | grep python02				The command output should return the supported versions of the Python programming language:"python|2.7""python|3.4"03				Run webapp list command (Windows/macOS/Linux) using custom query filters to list the IDs of all App Service web applications deployed in the current Azure subscription:az webapp list	--query '[*].id'04				The command output should return the requested Azure App Service application IDs:["/subscriptions/1234abcd-1234-abcd-1234-abcd1234abcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Web/sites/cc-mobile-webapp""/subscriptions/1234abcd-1234-abcd-1234-abcd1234abcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Web/sites/cc-java-main-app""/subscriptions/1234abcd-1234-abcd-1234-abcd1234abcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Web/sites/cc-production-app"]05				Run webapp config show command (Windows/macOS/Linux) using the ID of the application that you want to examine as identifier parameter and custom query filters to describe the Python version configured for the selected Azure App Service web application:az webapp config show	--ids "/subscriptions/1234abcd-1234-abcd-1234-abcd1234abcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Web/sites/cc-mobile-webapp"	--query '{"pythonVersion":pythonVersion}'06				The command output should return the Python version currently in use:{  "pythonVersion": "2.7"}			If the value returned by the webapp config show command output for "pythonVersion" configuration attribute is null or an empty string (i.e. "") the verified web application is not using a Python software stack. Otherwise check the returned attribute value and compare it with each version returned at step no. 2. If "pythonVersion" value is not equal to the latest version of Python software returned at step no. 2 the selected Azure App Service web application is not using the latest version of the Python for its software stack.			07				Repeat steps no. 3 â 6 for each Azure App Service web application available in the current subscription.			08				Repeat steps no. 3 â 7 for each subscription created in your Microsoft Azure cloud account.			,01				Sign in to Azure Management Console.			02				Navigate to App Services blade at https://portal.azure.com/#blade/HubsExtension/BrowseResourceBlade/resourceType/Microsoft.Web%2Fsites. 			03				Click on the name of the web application that you want to reconfigure (see Audit section part I to identify the right Python application).			04				In the navigation menu under Settings select Configuration to access the configuration settings defined for the selected application.			05				On the Configuration panel select General settings tab to access the web application general settings.			06				In the Stack settings section select the latest version of Python available in the Python version dropdown list.			07				Click Save to apply the changes. Once the configuration changes become active the Azure Management Console should display the following confirmation message: "Successfully updated web app settings".			08				Repeat steps no. 3 â 7 for each Azure App Service Python web application available in the current subscription.			09				Repeat steps no. 3 â 8 for each subscription created in your Microsoft Azure cloud account.			,01				Run webapp list-runtimes command (Windows/macOS/Linux) using custom query filters to list the Python versions currently supported by Microsoft Azure App Service:az webapp list-runtimes | grep python02				The command output should return the Python software versions supported by Azure App Service:"python|2.7""python|3.4"03				Run webapp config set command (Windows/macOS/Linux) using the ID of the Azure App Service web application that you want to reconfigure as identifier parameter (see Audit section part I to identify the right application) to enable the latest version of Python programming language (as described at step no. 2) for the selected web application:az webapp config set	--ids "/subscriptions/1234abcd-1234-abcd-1234-abcd1234abcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Web/sites/cc-mobile-webapp"	--python-version "3.4"04				The command output should return the metadata available for the reconfigured Microsoft Azure App Service application:{  "alwaysOn": false  "apiDefinition": null  "appCommandLine": ""  "appSettings": null  "autoHealEnabled": false  "autoHealRules": null  "loadBalancing": "LeastRequests"  "localMySqlEnabled": false  "location": "West Europe"  "logsDirectorySizeLimit": 35  "machineKey": null  "managedPipelineMode": "Integrated"  "managedServiceIdentityId": null  "minTlsVersion": "1.2"  "name": "cc-mobile-webapp"   ...   "pythonVersion": "3.4"  "remoteDebuggingEnabled": false  "remoteDebuggingVersion": "VS2017"  "requestTracingEnabled": false  "requestTracingExpirationTime": null  "reservedInstanceCount": 0  "resourceGroup": "cloud-shell-storage-westeurope"  "scmIpSecurityRestrictionsUseMain": false  "scmType": "None"  "tracingOptions": null  "type": "Microsoft.Web/sites"  "use32BitWorkerProcess": true  "vnetName": ""  "webSocketsEnabled": false  "windowsFxVersion": null  "xManagedServiceIdentityId": null}05				Repeat step no. 3 and 4 for each Azure App Service Python web application deployed in the current subscription.			06				Repeat steps no. 3 â 5 for each subscription created in your Microsoft Azure cloud account.			,https://www.cloudconformity.com/knowledge-base/azure/AppService/latest-version-of-python.html
Check for TLS Protocol Latest Version,AppService,Medium (should be achieved),AppService-007,Ensure that all Microsoft Azure App Service web applications are using the latest version of TLS encryption protocol to secure the applications traffic over the Internet and comply with the industry standards.,The Transport Layer Security (TLS) protocol secures transmission of data between servers and web browsers over the Internet using standard encryption technology. To follow security best practices and the latest PCI compliance standards Cloud Conformity strongly recommends enabling the latest version of TLS protocol (i.e. TLS 1.2) for all your Microsoft Azure App Service web applications. PCI DSS information security standard requires that all websites accepting credit card payments uses TLS 1.2 after June 30 2018.,To determine if your Azure App Service web applications are using the latest version of TLS protocol perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to App Services blade at https://portal.azure.com/#blade/HubsExtension/BrowseResourceBlade/resourceType/Microsoft.Web%2Fsites. 			03				Click on the name of the App Service web application that you want to examine.			04				In the navigation panel under Settings select TLS/SSL settings to access the Transport Layer Security (TLS)/Secure Sockets Layer (SSL) configuration settings available for the selected app.			05				On the TLS/SSL settings panel under Protocol Settings check the Minimum TLS Version configuration to determine the TLS version used by the application. If Minimum TLS Version setting value is not set to 1.2 the selected Microsoft Azure App Service web application is not configured to use the latest version of TLS protocol (i.e. TLS 1.2) to encrypt data in transit.			06				Repeat steps no. 3 â 5 for each Azure App Service web application launched in the current subscription.			07				Repeat steps no. 3 â 6 for other subscriptions created in your Microsoft Azure cloud account.			,01				Run webapp list command (Windows/macOS/Linux) using custom query filters to list the IDs of all App Service web applications deployed in the current Azure subscription:az webapp list   --query '[*].id'02				The command output should return the requested web application IDs:["/subscriptions/1234abcd-1234-abcd-1234-abcd1234abcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Web/sites/cc-production-app""/subscriptions/1234abcd-1234-abcd-1234-abcd1234abcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Web/sites/cc-ecommerce-app"]03				Run webapp config show command (Windows/macOS/Linux) using the ID of the web app that you want to examine as identifier parameter and custom query filters to expose the Transport Layer Security (TLS) protocol version configured for the selected web application:az webapp config show	--ids /subscriptions/1234abcd-1234-abcd-1234-abcd1234abcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Web/sites/cc-production-app	--query 'minTlsVersion'04				The command output should return the TLS protocol version currently in use:"1.1"				If webapp config show command output does not return "1.2" as the version of the Transport Layer Security (TLS) protocol the selected Microsoft Azure App Service web application is not configured to use the latest version of TLS to encrypt data in transit.			05				Repeat step no. 3 and 4 for each Azure App Service application deployed in the current subscription.			06				Repeat steps no. 1 â 5 for each subscription created within your Microsoft Azure cloud account.			,01				Sign in to Azure Management Console.			02				Navigate to App Services blade at https://portal.azure.com/#blade/HubsExtension/BrowseResourceBlade/resourceType/Microsoft.Web%2Fsites. 			03				Click on the name of the web application that you want to reconfigure (see Audit section part I to identify the right web app).			04				In the navigation panel under Settings select TLS/SSL settings to access the Transport Layer Security (TLS)/Secure Sockets Layer (SSL) configuration settings available for the selected app.			05				On the TLS/SSL settings panel under Protocol Settings select 1.2 for the Minimum TLS Version setting as the latest version of TLS protocol required by the selected web application. 			06				Repeat steps no. 3 â 5 for each Azure App Service web application that you want to reconfigure in order to use the latest version of TLS protocol available in the current subscription.			07				Repeat steps no. 3 â 6 for each subscription created in your Microsoft Azure cloud account.			,01				Run webapp config set command (Windows/macOS/Linux) using the ID of the Microsoft Azure App Service web application that you want to reconfigure as identifier parameter (see Audit section part II to identify the right web app) to enable the latest version of Transport Layer Security (TLS) protocol i.e. TLS 1.2 for the selected web application:az webapp config set	--ids "/subscriptions/1234abcd-1234-abcd-1234-abcd1234abcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Web/sites/cc-production-app"	--min-tls-version 1.202				The command output should return the configuration metadata available for selected Microsoft Azure App Service web application:{  "alwaysOn": false  "apiDefinition": null  "limits": null  "linuxFxVersion": "NODE|10.14"  "loadBalancing": "LeastRequests"  "localMySqlEnabled": false  "location": "West Europe"  "logsDirectorySizeLimit": 35  "machineKey": null  "managedPipelineMode": "Integrated"  "managedServiceIdentityId": null  "minTlsVersion": "1.2"  "name": "cc-production-app"  "netFrameworkVersion": "v4.0"  "nodeVersion": ""   ...   "numberOfWorkers": 1  "publishingUsername": "$cc-production-app"  "push": null  "remoteDebuggingEnabled": false  "remoteDebuggingVersion": "VS2017"  "requestTracingEnabled": false  "requestTracingExpirationTime": null  "reservedInstanceCount": 0  "resourceGroup": "cloud-shell-storage-westeurope"  "scmIpSecurityRestrictionsUseMain": false  "scmType": "None"  "tracingOptions": null  "type": "Microsoft.Web/sites"  "use32BitWorkerProcess": true  "windowsFxVersion": null  "xManagedServiceIdentityId": null}03				Repeat step no. 1 and 2 for each Azure App Service application that you want to reconfigure with the latest version of TLS protocol (TLS 1.2) available within the current subscription.			04				Repeat steps no. 1 â 3 for each subscription created in your Microsoft Azure cloud account.			,https://www.cloudconformity.com/knowledge-base/azure/AppService/latest-version-of-tls-encryption-in-use.html
Enable App Service Authentication,AppService,Medium (should be achieved),NA,Ensure that App Service Authentication feature is enabled for Microsoft Azure App Service to add an extra layer of security to the authentication process implemented by your web applications.,By default App Service Authentication feature is disabled when a new web application is created using the Azure Command Line Interface (CLI) or Azure Management Console. Therefore all new applications have anonymous access enabled and this allows users to log in without being prompted for login. By enabling Azure App Service Authentication every incoming HTTP request passes through it before being handled by the web application code. The feature also handles authentication of users with a specific provider such as Azure Active Directory (AAD) Google Facebook Twitter and Microsoft Account validation storing and refreshing of access tokens managing the authenticated sessions and injecting identity information into request headers.,To determine if Microsoft Azure App Service Authentication is enabled perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to App Services blade at https://portal.azure.com/#blade/HubsExtension/BrowseResourceBlade/resourceType/Microsoft.Web%2Fsites. 			03				Click on the name (link) of the web application that you want to examine.			04				In the navigation panel under Settings select Authentication / Authorization to access the authentication configuration settings available for the selected application.			05				On the Authentication / Authorization panel check the App Service Authentication configuration setting. If the setting status is Off the Microsoft Azure App Service Authentication feature is not enabled for the selected web application.			06				Repeat steps no. 3 â 5 for each Azure App Service application deployed in the current subscription.			07				Repeat steps no. 3 â 6 for other subscriptions created within your Microsoft Azure cloud account.			,01				Run webapp list command (Windows/macOS/Linux) using custom query filters to list the IDs of all App Service web applications deployed in the current Azure subscription:az webapp list	--query '[*].id'02				The command output should return the requested application identifiers (IDs):["/subscriptions/1234abcd-1234-abcd-1234-abcd1234abcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Web/sites/cc-project5-webapp""/subscriptions/1234abcd-1234-abcd-1234-abcd1234abcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Web/sites/cc-node10-webapp"]03				Run webapp auth show command (Windows/macOS/Linux) using the ID of the web app that you want to examine as identifier parameter and custom query filters to describe the App Service Authentication feature status for the selected web application:az webapp auth show	--ids "/subscriptions/1234abcd-1234-abcd-1234-abcd1234abcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Web/sites/cc-project5-webapp"	--query 'enabled'04				The command output should return the App Service Authentication configuration status (true for enabled false for disabled):false			If the webapp auth show command output returns false as shown in the example above the Microsoft Azure App Service Authentication feature is not enabled for the selected web application.			05				Repeat step no. 3 and 4 for each Azure App Service application available within the current subscription.			06				Repeat steps no. 1 â 5 for each subscription created in your Microsoft Azure cloud account.			,01				Sign in to Azure Management Console.			02				Navigate to App Services blade at https://portal.azure.com/#blade/HubsExtension/BrowseResourceBlade/resourceType/Microsoft.Web%2Fsites. 			03				Click on the name of the web application that you want to reconfigure (see Audit section part I to identify the right web app).			04				In the navigation panel under Settings select Authentication / Authorization to access the authentication configuration settings available for the selected application.			05				On the Authentication / Authorization panel perform the following actions:										Select On under App Service Authentication configuration setting to enable the feature. 											From Action to take when request is not authenticated dropdown list choose one of the following:														Select Allow Anonymous requests (no action) if you want more flexibility in handling anonymous requests as it lets you present multiple sign-in providers to your app users. This option defers authorization of unauthenticated user traffic to your web application code. To use this option you have to write code.															Select Log in with <provider-name> to allow only authenticated requests. Microsoft Azure App Service redirects all anonymous requests to /.auth/login/<provider> for the provider that you choose. If the anonymous request comes from a native mobile application the returned response is an HTTP 401 Unauthorized. To use this option you don't have to write any authentication code for your web application.													If you choose to authenticate requests with an authentication provider select the suitable provider from the Authentication Providers list and configure it by following the Microsoft Azure documentation for the selected provider. Azure App Service uses federated identity in which a third-party identity provider manages the user identities and authentication flow. The identity providers available by default are: Azure Active Directory (AAD) Microsoft Account Google Facebook and Twitter. Once you enable authentication and authorization with one of these providers its sign-in endpoint is available for user authentication and for validation of authentication tokens from the specified provider.											Under Advanced Settings select On next to Token Store to store the authentication tokens. Azure App Service Token Store is a repository of tokens that are associated with the users of your web applications APIs or native mobile apps. When you enable authentication with any of the providers listed at the previous step the Token Store is immediately available to your application.											If required paste the application redirect URL(s) in the Allowed External Redirect URLs box.											Click Save to apply the configuration changes.					06				Repeat steps no. 3 â 5 for each Azure App Service application that you want to reconfigure for secure authentication and authorization available in the current subscription.			07				Repeat steps no. 3 â 6 for each subscription created in your Microsoft Azure cloud account.			,01				Run webapp auth update command (Windows/macOS/Linux) using the ID of the Microsoft Azure App Service web app that you want to reconfigure as identifier parameter (see Audit section part II to identify the right web app) to enable App Service Authentication feature for the selected web application. For example the following command request enables App Service Authentication feature for a web application identified by the ID "/subscriptions/1234abcd-1234-abcd-1234-abcd1234abcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Web/sites/cc-project5-webapp" with authentication token storage enabled using Google as authentication provider:az webapp auth update	--ids "/subscriptions/1234abcd-1234-abcd-1234-abcd1234abcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Web/sites/cc-project5-webapp"	--enabled true	--action LoginWithGoogle	--google-client-id "123456789012-abcd1234abcd1234abcd1234abcd1234.apps.googleusercontent.com"	--google-client-secret "abcdabcdabcdabcdabcdabcd"	--token-store true02				The command output should return the metadata for reconfigured Azure App Service web application:{  "additionalLoginParams": null  "allowedAudiences": null  "allowedExternalRedirectUrls": null  "clientId": null  "clientSecret": null  "clientSecretCertificateThumbprint": null  "defaultProvider": "Google"  "enabled": true  "facebookAppId": null  "facebookAppSecret": null  "facebookOauthScopes": null  "googleClientId": "123456789012-abcd1234abcd1234abcd1234abcd1234.apps.googleusercontent.com"  "googleClientSecret": "abcdabcdabcdabcdabcdabcd"  "googleOauthScopes": null  "id": "/subscriptions/1234abcd-1234-abcd-1234-abcd1234abcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Web/sites/cc-project5-webapp/config/authsettings"  "issuer": null  "kind": null  "location": "West Europe"  "microsoftAccountClientId": null  "microsoftAccountClientSecret": null  "microsoftAccountOauthScopes": null  "name": "authsettings"  "resourceGroup": "cloud-shell-storage-westeurope"  "runtimeVersion": "1.0.0"  "tags": {}  "tokenRefreshExtensionHours": null  "tokenStoreEnabled": true  "twitterConsumerKey": null  "twitterConsumerSecret": null  "type": "Microsoft.Web/sites/config"  "unauthenticatedClientAction": "RedirectToLoginPage"  "validateIssuer": null}03				Repeat step no. 1 and 2 for each Azure App Service application that you want to reconfigure for secure authentication and authorization available in the current subscription.			04				Repeat steps no. 1 â 3 for each subscription created within your Microsoft Azure cloud account.			,https://www.cloudconformity.com/knowledge-base/azure/AppService/enable-app-service-authentication.html
Enable HTTP/2,AppService,Low (generally tolerable level of risk),AppService-005,Ensure that your Microsoft Azure App Service web applications are using the latest version of the HTTP protocol (i.e. HTTP/2) in order to make your web applications load faster. HTTP 2.0 represents a major upgrade of the HTTP/1.1 protocol that has the primary goal of reducing the impact of latency and connection load on web servers by implementing full request and response multiplexing minimizing protocol overhead via compression of HTTP header fields and by adding support for HTTP request prioritization and server push.,Once enabled HTTP/2 will make your Azure App Service web applications faster simpler and more robust as this optimized version of the HTTP protocol no longer supports HTTP 1.1's chunked transfer encoding mechanism and provides its own more efficient mechanism for data streaming. The main benefits of HTTP/2: it is fully multiplexed (instead of ordered and blocking like HTTP 1.1) uses only one TCP/IP connection and has the ability to use this connection for parallelism uses header compression to reduce overhead and it's binary.,To determine if your Azure App Service applications are using the latest version of the HTTP protocol perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to App Services blade at https://portal.azure.com/#blade/HubsExtension/BrowseResourceBlade/resourceType/Microsoft.Web%2Fsites. 			03				Click on the name of the App Service web application that you want to examine.			04				In the navigation menu under Settings select Configuration to access the configuration settings defined for the selected application.			05				On the Configuration panel select General settings tab to access the application general settings.			06				In the Platform settings section check the HTTP version setting value to determine the HTTP version configured for the selected web application. If HTTP version is set to 1.1 (i.e. HTTP 1.1) the selected Microsoft Azure App Service web application is not configured to use the latest version of HTTP protocol.			07				Repeat steps no. 3 â 6 for each Azure App Service web application created within the current subscription.			08				Repeat steps no. 3 â 7 for other subscriptions available in your Microsoft Azure cloud account.			,01				Run webapp list command (Windows/macOS/Linux) using custom query filters to list the IDs of all App Service web applications deployed in the current Azure subscription:az webapp list --query '[*].id'02				The command output should return the requested Azure App Service application IDs:["/subscriptions/1234abcd-1234-abcd-1234-abcd1234abcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Web/sites/cc-frontend-webapp""/subscriptions/1234abcd-1234-abcd-1234-abcd1234abcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Web/sites/cc-project5-webapp"]03				Run webapp config show command (Windows/macOS/Linux) using the ID of the application that you want to examine as identifier parameter and custom query filters to determine if the selected Azure App Service web application is configured to use the HTTP/2 protocol:az webapp config show	--ids "/subscriptions/1234abcd-1234-abcd-1234-abcd1234abcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Web/sites/cc-frontend-webapp"	--query 'http20Enabled'04				The command output should return the HTTP/2 protocol configuration status for the specified application:false			If the webapp config show command output returns false as shown in the example above HTTP/2 is not enabled therefore the selected Microsoft Azure App Service web application is not configured to use the latest version of HTTP protocol.			05				Repeat steps no. 3 â 6 for each Azure App Service web application available within the current subscription.			06				Repeat steps no. 3 â 7 for each subscription created in your Microsoft Azure cloud account.			,01				Sign in to Azure Management Console.			02				Navigate to App Services blade at https://portal.azure.com/#blade/HubsExtension/BrowseResourceBlade/resourceType/Microsoft.Web%2Fsites. 			03				Click on the name of the web application that you want to reconfigure (see Audit section part I to identify the right application).			04				In the navigation menu under Settings select Configuration to access the configuration settings defined for the selected application.			05				On the Configuration panel select General settings tab to access the web application general settings.			06				In the Platform settings section select 2.0 from the HTTP version dropdown list to enable HTTP/2 â the latest version of HTTP protocol for the selected web application.			07				Click Save to apply the change. Once this configuration change becomes active the Azure Management Console should display the following confirmation message: "Successfully updated web app settings".			08				Repeat steps no. 3 â 7 for each Azure App Service web application deployed in the current subscription.			09				Repeat steps no. 3 â 8 for each subscription created in your Microsoft Azure cloud account.			,01				Run webapp config set command (Windows/macOS/Linux) using the ID of the Azure App Service web application that you want to reconfigure as identifier parameter (see Audit section part I to identify the right application) to enable HTTP/2 â the latest version of HTTP protocol for the selected web application.:az webapp config set	--ids "/subscriptions/1234abcd-1234-abcd-1234-abcd1234abcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Web/sites/cc-frontend-webapp"	--http20-enabled true02				The command output should return the metadata available for the reconfigured web application:{  "alwaysOn": false  "apiDefinition": null  "appCommandLine": ""  "appSettings": null  "autoHealEnabled": false  "autoHealRules": null  "autoSwapSlotName": null  "azureStorageAccounts": null  "connectionStrings": null  "detailedErrorLoggingEnabled": false  "documentRoot": null  "ftpsState": "AllAllowed"  "handlerMappings": null  "http20Enabled": true   ...   "httpLoggingEnabled": false  "publishingUsername": "$cc-frontend-webapp"  "push": null  "pythonVersion": ""  "remoteDebuggingEnabled": false  "remoteDebuggingVersion": "VS2017"  "requestTracingEnabled": false  "requestTracingExpirationTime": null  "reservedInstanceCount": 0  "resourceGroup": "cloud-shell-storage-westeurope"  "webSocketsEnabled": false  "windowsFxVersion": null  "xManagedServiceIdentityId": null}03				Repeat step no. 3 and 4 for each Azure App Service web application available within the current subscription.			04				Repeat steps no. 3 â 5 for each subscription created in your Microsoft Azure cloud account.			,https://www.cloudconformity.com/knowledge-base/azure/AppService/enable-http-2-for-app-service-web-applications.html
Enable HTTPS-Only Traffic,AppService,Medium (should be achieved),AppService-006,Ensure that your Azure App Service web applications redirect all non-secure HTTP traffic to HTTPS in order to encrypt the communication between applications and web clients. HTTPS uses the Secure Sockets Layer (SSL)/Transport Layer Security (TLS) protocol to provide a secure connection which is both encrypted and authenticated. This adds an extra layer of security to the HTTP requests made to the web application.,Enforcing HTTPS-only traffic for your Azure App Service applications can guarantee that the encrypted traffic between the web application servers and the application clients cannot be decrypted by malicious users in case they are able to intercept packets sent across the Internet.,To determine if your Azure App Service web apps are configured to implement HTTPS-only traffic perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to App Services blade at https://portal.azure.com/#blade/HubsExtension/BrowseResourceBlade/resourceType/Microsoft.Web%2Fsites. 			03				Click on the name of the App Service web application that you want to examine.			04				In the navigation panel under Settings select TLS/SSL settings to access the Transport Layer Security (TLS)/Secure Sockets Layer (SSL) configuration settings available for the selected app.			05				On the TLS/SSL settings panel under Protocol Settings check the HTTPS Only configuration setting. If the setting status is Off the selected Microsoft Azure App Service web application does not enforce HTTP to HTTPS redirection thus its TLS/SSL configuration is not compliant.			06				Repeat steps no. 3 â 5 for each Azure App Service application available within the current subscription.			07				Repeat steps no. 3 â 6 for other subscriptions created in your Microsoft Azure cloud account.			,01				Run webapp list command (Windows/macOS/Linux) using custom query filters to list the IDs of all App Service web applications deployed in the current Azure subscription:az webapp list	--query '[*].id'02				The command output should return the requested web application IDs:[  {    "accountEnabled": true    "createdDateTime": "2019-05-01T10:47:42Z"    "creationType": "Invitation"    "employeeId": null    "jobTitle": null    "lastDirSyncTime": null    "legalAgeGroupClassification": null    "mail": "adproject@cloudconformity.com"    "mobile": null    "objectId": "abcdabcd-1234-1234-1234-abcd1234abcd"    "objectType": "User"    "odata.type": "Microsoft.DirectoryServices.User"    "o[	"/subscriptions/1234abcd-1234-abcd-1234-abcd1234abcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Web/sites/cc-node10-webapp"	"/subscriptions/1234abcd-1234-abcd-1234-abcd1234abcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Web/sites/cc-internal-webapp"]03				Run webapp show command (Windows/macOS/Linux) using the ID of the web app that you want to examine as identifier parameter and custom query filters to describe the HTTPS-only feature status available for the selected web application:az webapp show	--ids "/subscriptions/1234abcd-1234-abcd-1234-abcd1234abcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Web/sites/cc-node10-webapp"	--query 'httpsOnly'04				The command output should return the HTTPS-only feature configuration status (true for enabled false for disabled):false			If the webapp show command output returns false as shown in the example above the selected Microsoft Azure App Service web application does not enforce HTTP to HTTPS redirection therefore the app TLS/SSL configuration is not compliant.			05			Repeat step no. 3 and 4 for each Azure App Service application deployed in the current subscription.			06				Repeat steps no. 1 â 5 for each subscription created within your Microsoft Azure cloud account.			,01				Sign in to Azure Management Console.			02				Navigate to App Services blade at https://portal.azure.com/#blade/HubsExtension/BrowseResourceBlade/resourceType/Microsoft.Web%2Fsites. 			03				Click on the name of the web application that you want to reconfigure (see Audit section part I to identify the right app).			04				In the navigation panel under Settings select TLS/SSL settings to access the Transport Layer Security (TLS)/Secure Sockets Layer (SSL) configuration settings available for the selected application.			05				On the TLS/SSL settings panel under Protocol Settings select On next to HTTPS Only to enable the HTTPS-only feature. Once the feature becomes active the Azure Management Console should display the following confirmation message: "HTTPS Only was successfully set to On".			06				Repeat steps no. 3 â 5 for each Azure App Service web application that you want to reconfigure to enforce HTTPS-only traffic available in the current subscription.			07				Repeat steps no. 3 â 6 for each subscription created in your Microsoft Azure cloud account.			,01				Run webapp update command (Windows/macOS/Linux) using the ID of the Microsoft Azure App Service web application that you want to reconfigure as identifier parameter (see Audit section part II to identify the right app) to enable the HTTPS-only feature for the selected web application. Once the feature is enabled all incoming HTTP requests are redirected to the designated HTTPS port:az webapp update	--ids "/subscriptions/1234abcd-1234-abcd-1234-abcd1234abcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Web/sites/cc-node10-webapp"	--https-only true02				The command output should return the metadata for reconfigured Microsoft Azure App Service application:{  "availabilityState": "Normal"  "clientAffinityEnabled": false  "clientCertEnabled": false  "clientCertExclusionPaths": null  "cloningInfo": null  "containerSize": 0  "dailyMemoryTimeQuota": 0  "defaultHostName": "cc-node10-webapp.azurewebsites.net"  "enabled": true  "httpsOnly": true  "hyperV": false  "id": "/subscriptions/1234abcd-1234-abcd-1234-abcd1234abcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Web/sites/cc-node10-webapp"  "identity": null  "inProgressOperationId": null  "isDefaultContainer": null  "isXenon": false  "kind": "applinux"  "lastModifiedTimeUtc": "2019-09-22T11:20:32.903333"   ...   "location": "West Europe"  "maxNumberOfWorkers": null  "name": "cc-node10-webapp"  "redundancyMode": "None"  "repositorySiteName": "cc-node10-webapp"  "reserved": true  "resourceGroup": "cloud-shell-storage-westeurope"  "scmSiteAlsoStopped": false  "serverFarmId": "/subscriptions/1234abcd-1234-abcd-1234-abcd1234abcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Web/serverfarms/ASP-cloudshellstoragewesteurope-abcd"  "siteConfig": null  "slotSwapStatus": null  "state": "Running"  "suspendedTill": null  "targetSwapSlot": null  "trafficManagerHostNames": null  "type": "Microsoft.Web/sites"  "usageState": "Normal"}03				Repeat step no. 1 and 2 for each Azure App Service web application that you want to reconfigure in order to enable HTTPS-only traffic available in the current subscription.			04				Repeat steps no. 1 â 3 for each subscription created within your Microsoft Azure cloud account.			,https://www.cloudconformity.com/knowledge-base/azure/AppService/enable-https-only-traffic.html
Enable Incoming Client Certificates,AppService,Medium (should be achieved),AppService-008,Ensure that your Microsoft Azure App Service web applications are configured to request an SSL certificate for all incoming requests for security and compliance purposes. Once the certificate is implemented only web clients that have this valid SSL certificate will be able to reach your application. By default incoming client certificates are disabled for Azure App Service web applications.,The SSL/TLS mutual authentication approach utilized in enterprise cloud environments ensures the authenticity of web clients to the application server. If incoming client certificates are enabled then only an authenticated client with a valid SSL certificate can access the web application.,To determine if your Azure App Service web applications are configured to use incoming client certificates perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to App Services blade at https://portal.azure.com/#blade/HubsExtension/BrowseResourceBlade/resourceType/Microsoft.Web%2Fsites. 			03				Click on the name of the App Service web application that you want to examine.			04				In the navigation panel under Settings select TLS/SSL settings to access the TLS/SSL configuration settings available for the selected application.			05				On the TLS/SSL settings panel in the Protocol Settings section check Incoming client certificates configuration setting. If Incoming client certificates is set to Off the selected Microsoft Azure App Service web application is not configured to use an SSL certificate for incoming requests.			06				Repeat steps no. 3 â 5 for each Azure App Service web application deployed in the current subscription.			07				Repeat steps no. 3 â 6 for other subscriptions created in your Microsoft Azure cloud account.			,01				Run webapp list command (Windows/macOS/Linux) using custom query filters to list the IDs of all App Service web applications available in your Azure subscription:az webapp list	--query '[*].id'02				The command output should return the requested web application IDs:["/subscriptions/1234abcd-1234-abcd-1234-abcd1234abcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Web/sites/cc-ecommerce-app""/subscriptions/1234abcd-1234-abcd-1234-abcd1234abcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Web/sites/cc-main-webapp"]03				Run webapp show command (Windows/macOS/Linux) using the ID of the web app that you want to examine as identifier parameter and custom query filters to obtain the "Incoming client certificates" feature status for the selected web application:az webapp show	--ids "/subscriptions/1234abcd-1234-abcd-1234-abcd1234abcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Web/sites/cc-ecommerce-app"	--query 'clientCertEnabled'04				The command output should return the requested feature status available for the specified web app (true for enabled false for disabled):false				If the webapp show command output returns false as shown in the output example above the selected Microsoft Azure App Service web application is not configured to use an SSL certificate to authenticate incoming client requests.			05				Repeat step no. 3 and 4 for each Azure App Service application deployed within the current subscription.			06				Repeat steps no. 1 â 5 for each subscription available in your Microsoft Azure cloud account.			,01				Sign in to Azure Management Console.			02				Navigate to App Services blade at https://portal.azure.com/#blade/HubsExtension/BrowseResourceBlade/resourceType/Microsoft.Web%2Fsites. 			03				Click on the name of the web application that you want to reconfigure (see Audit section part I to identify the right application).			04				In the navigation panel under Settings select TLS/SSL settings to access the TLS/SSL configuration settings available for the selected web application.			05				On the TLS/SSL settings panel in the Protocol Settings section select On next to Incoming client certificates to enable the "Incoming client certificates" feature for the selected application. Once the feature becomes active the Azure Management Console should display the following confirmation message: "Successfully enabled client certificate".			06				Repeat steps no. 3 â 5 for each Azure App Service web application that you want to reconfigure to enable incoming client certificates available within the current subscription.			07				Repeat steps no. 3 â 6 for each subscription created in your Microsoft Azure cloud account.			,01				Run webapp update command (Windows/macOS/Linux) using the ID of the Microsoft Azure App Service web application that you want to reconfigure as identifier parameter (see Audit section part II to identify the right app) to enable "Incoming client certificates" feature for the selected web application:az webapp update	--ids "/subscriptions/1234abcd-1234-abcd-1234-abcd1234abcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Web/sites/cc-ecommerce-app"	--set clientCertEnabled=true02				The command output should return the reconfigured Azure App Service web application metadata:{  "availabilityState": "Normal"  "clientAffinityEnabled": false  "clientCertEnabled": true  "clientCertExclusionPaths": null  "cloningInfo": null  "containerSize": 0  "dailyMemoryTimeQuota": 0  "defaultHostName": "cc-ecommerce-app.azurewebsites.net"  "enabled": true  "geoDistributions": null  "hostNamesDisabled": false  "hostingEnvironmentProfile": null  "httpsOnly": false  "hyperV": false  "identity": null  "inProgressOperationId": null  "isDefaultContainer": null  "isXenon": false   ...   "kind": "applinux"  "lastModifiedTimeUtc": "2019-09-23T10:15:23.180000"  "location": "West Europe"  "maxNumberOfWorkers": null  "name": "cc-ecommerce-app"  "redundancyMode": "None"  "repositorySiteName": "cc-ecommerce-app"  "reserved": true  "resourceGroup": "cloud-shell-storage-westeurope"  "scmSiteAlsoStopped": false  "siteConfig": null  "slotSwapStatus": null  "state": "Running"  "suspendedTill": null  "tags": null  "targetSwapSlot": null  "trafficManagerHostNames": null  "type": "Microsoft.Web/sites"  "usageState": "Normal"}03				Repeat step no. 1 and 2 for each Microsoft Azure App Service application that you want to reconfigure in order to enable incoming client certificates available in the current subscription.			04				Repeat steps no. 1 â 3 for each subscription created within your Microsoft Azure cloud account.			,https://www.cloudconformity.com/knowledge-base/azure/AppService/enable-incoming-client-certificates.html
Enable Registration with Azure Active Directory,AppService,Medium (should be achieved),AppService-009,Ensure that registration with Azure Active Directory (AAD) is enabled for Microsoft Azure App Service web applications so that your applications can connect to other Azure cloud services securely without the need of access credentials such as user names and passwords.,App Service is a highly scalable and self-patching web hosting service provided by Microsoft Azure. The service also provides a managed identity for your web applications which is a turn-key solution for securing access to other Azure cloud services. A system assigned managed identity like Azure Active Directory (AAD) enables App Service web applications to authenticate to cloud services such as Azure Key Vault and Azure Storage without the need of storing credentials within the application code.,To determine if registration with Azure Active Directory is enabled for your App Service web applications perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to App Services blade at https://portal.azure.com/#blade/HubsExtension/BrowseResourceBlade/resourceType/Microsoft.Web%2Fsites. 			03				Click on the name (link) of the web application that you want to examine.			04				In the navigation panel under Settings select Identity to access the managed service identity configuration settings available for the selected application.			05				On the Identity panel check the Status configuration setting. If the setting status is Off the registration using Azure Active Directory (AAD) is not configured for the selected Microsoft Azure App Service web application.			06				Repeat steps no. 3 â 5 for each Azure App Service application deployed within the current subscription.			07				Repeat steps no. 3 â 6 for other subscriptions available in your Microsoft Azure cloud account.			,01				Run webapp list command (Windows/macOS/Linux) using custom query filters to list the IDs of all App Service web applications deployed in the current Azure subscription:az webapp list	--query '[*].id'02				The command output should return the requested application identifiers (IDs):["/subscriptions/1234abcd-1234-abcd-1234-abcd1234abcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Web/sites/cc-python-webapp""/subscriptions/1234abcd-1234-abcd-1234-abcd1234abcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Web/sites/cc-node10-webapp"]03				Run webapp identity show command (Windows/macOS/Linux) using the ID of the web app that you want to examine as identifier parameter and custom query filters to describe the principal object ID of the managed service identity configured for the selected web application:az webapp identity show	--ids "/subscriptions/1234abcd-1234-abcd-1234-abcd1234abcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Web/sites/cc-python-webapp"	--query 'principalId'04				The command output should return the principal object ID of the web application's managed identity. If the webapp identity show command request does not return an output the registration using Azure Active Directory (AAD) is not configured for the selected Microsoft Azure App Service web application.			05				Repeat step no. 3 and 4 for each Azure App Service application available within the current subscription.			06				Repeat steps no. 1 â 5 for each subscription created in your Microsoft Azure cloud account.			,01				Sign in to Azure Management Console.			02				Navigate to App Services blade at https://portal.azure.com/#blade/HubsExtension/BrowseResourceBlade/resourceType/Microsoft.Web%2Fsites. 			03				Click on the name of the web application that you want to reconfigure (see Audit section part I to identify the right web app).			04				In the navigation panel under Settings select Identity to access the managed service identity settings available for the selected application.			05				On the Identity panel select On for the Status configuration setting to enable system assigned managed identity in order to register the selected Azure App Service web application with Azure Active Directory (AAD). In the Enable system assigned managed identity box click Yes to confirm your action. Once the system assigned managed identity is enabled the selected Azure App Service web application will be registered with Microsoft Azure Active Directory. After being registered you can safely control its access to other cloud services like Azure Resource Manager Azure Key Vault etc.			06				Repeat steps no. 3 â 5 for each Azure App Service application that you want to register with Azure Active Directory (AAD) available within the current subscription.			07				Repeat steps no. 3 â 6 for each subscription created in your Microsoft Azure cloud account.			,01				Run webapp identity assign command (Windows/macOS/Linux) using the ID of the Microsoft Azure App Service application that you want to reconfigure as identifier parameter (see Audit section part II to identify the right web app) to assign a managed service identity to the selected web application in order to register it with Azure Active Directory (AAD). After being registered you can control the application access to other cloud services such as Azure Storage Azure Resource Manager and Azure Key Vault:az webapp identity assign	--ids "/subscriptions/1234abcd-1234-abcd-1234-abcd1234abcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Web/sites/cc-python-webapp"02				The command output should return the assigned managed service identity metadata:allowedAudiences": null{  "principalId": "abcdabcd-1234-1234-1234-abcdabcdabcd"  "tenantId": "1234abcd-1234-abcd-1234-abcd1234abcd"  "type": "SystemAssigned"  "userAssignedIdentities": null}03				Repeat step no. 1 and 2 for each Azure App Service application that you want to register with Azure Active Directory (AAD) deployed in the current subscription.			04				Repeat steps no. 1 â 3 for each subscription created within your Microsoft Azure cloud account.			,https://www.cloudconformity.com/knowledge-base/azure/AppService/enable-registration-with-azure-active-directory.html
Enable AuditEvent Logging for Azure Key Vaults,KeyVault,Medium (should be achieved),KeyVault-004,Ensure that AuditEvent logging is enabled for Azure Key Vault instances in order to record any interactions with your vaults for enhancing data protection and compliance within your Azure cloud account. With Azure Key Vault you can safeguard encryption keys and application secrets like passwords using keys stored in Hardware Security Modules (HSMs).,Monitoring how and when your Azure Key Vaults are accessed and by whom enables an audit trail of interactions with private information encryption keys and certificates managed by Azure Key Vault service. Enabling logging for Key Vault saves information in a Microsoft Azure storage account that you provide during setup. A new storage container named "insights-logs-auditevent" is automatically created for the storage account that you specified.,To determine if your Azure Key Vaults have AuditEvent logging enabled perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to All resources blade at https://portal.azure.com/#blade/HubsExtension/BrowseAll to access all your Microsoft Azure resources.			03				From the Type filter box select Key vault to list all Key Vault instances available within your Azure account.			04				Click on the name (link) of the Key Vault instance that you want to examine.			05				In the navigation panel under Monitoring select Diagnostic settings to access the diagnostic configuration settings available for the selected Key Vault.			06				On Diagnostic settings page check for any diagnostic settings defined. If there are no diagnostic settings defined at all the verified Azure Key Vault does not have diagnostic logging enabled. If there are one or more diagnostic settings already defined but these are not including AuditEvent logging (i.e. the AuditEvent checkbox is not selected) the selected Microsoft Azure Key Vault does not have AuditEvent logging enabled.			07				Repeat steps no. 4 â 10 for each subscription created in your Microsoft Azure cloud account.			,01				Run keyvault list command (Windows/macOS/Linux) using custom query filters to list the identifiers (IDs) of all Key Vault instances available in the current Azure subscription:az keyvault list	--query '[*].id'02				The command output should return the requested Azure resource ID(s):["/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.KeyVault/vaults/cc-main-key-vault""/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.KeyVault/vaults/cc-production-vault"]03				Run monitor diagnostic-settings list command (Windows/macOS/Linux) using the ID of the Key Vault returned at the previous step as identifier parameter and custom query filters to get the active diagnostic settings list for the specified Azure Key Vault:az monitor diagnostic-settings list	--resource "/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.KeyVault/vaults/cc-main-key-vault"	--query 'value'04				The command output should return the diagnostic settings metadata (including AuditEvent logging metadata) available for the selected Key Vault:										If the command output returns an empty array as shown in the example below there are no diagnostic settings currently defined therefore the selected Azure Key Vault does not have diagnostic logging enabled.[]						If monitor diagnostic-settings list command output returns any configuration metadata check the value (boolean) set for "enabled" configuration attribute associated with the "AuditEvent" log category. If "enabled" is set to false as shown in the output example below the diagnostic settings defined for the specified resource does not include AuditEvent logging thus the selected Microsoft Azure Key Vault does not have AuditEvent logging enabled.[  {    ...    "logs": [      {        "category": "AuditEvent"        "enabled": false        "retentionPolicy": {          "days": 0          "enabled": false        }      }    ]    ...  }]05				Repeat steps no. 1 â 4 for each subscription available in your Microsoft Azure cloud account.			,01				Sign in to Azure Management Console.			02				Navigate to All resources blade at https://portal.azure.com/#blade/HubsExtension/BrowseAll to access all your Microsoft Azure resources.			03				From the Type filter box select Key vault to list all Key Vault instances available within your Azure account.			04				Click on the name (link) of the Key Vault instance that you want to reconfigure.			05				In the navigation panel under Monitoring select Diagnostic settings to access the diagnostic configuration settings available for the selected Key Vault.			06				On the Diagnostic settings page click Add diagnostic setting and perform the following commands:										Provide a unique name for the new diagnostic setting in the Name box.											Select Archive to a storage account checkbox click on Configure storage account and select an existing account for AuditEvent logging storage from the Storage Account dropdown list.											Select AuditEvent checkbox available in the LOG configuration section and set the number of days to retain AuditEvent log data for the selected Key Vault in the Retention (days) box to 365 or 0 or use the slider control to set the right value. A setting of 0 (zero) days retains the AuditEvent logs forever.											Click Save to apply the configuration changes.					07				Repeat steps no. 3 â 6 for each subscription created in your Microsoft Azure cloud account.			,01				Run monitor diagnostic-settings create command (Windows/macOS/Linux) to create a new Key Vault diagnostic setting that will enable and configure AuditEvent logging for the specified Microsoft Azure Key Vault. For example the following monitor diagnostic-settings create command request creates a diagnostic setting with the name "cc-audit-event-log-setting" for an Azure Key Vault identified by ID "/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.KeyVault/vaults/cc-main-key-vault" that retains AuditEvent logging data for 365 days within a storage account identified by the ID "abcdabcdabcdabcdabcdabcd":az monitor diagnostic-settings create	--name cc-audit-event-log-setting	--resource /subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.KeyVault/vaults/cc-main-key-vault	--storage-account abcdabcdabcdabcdabcdabcd	--logs '[{"category": "AuditEvent""enabled": true"retentionPolicy": {"enabled": true"days": 365}}]'02				The command output should return the configuration metadata for the newly created Azure Key Vault diagnostic setting:{  "eventHubAuthorizationRuleId": null  "eventHubName": null  "id": "/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourcegroups/cloud-shell-storage-westeurope/providers/microsoft.keyvault/vaults/cc-main-key-vault/providers/microsoft.insights/diagnosticSettings/cc-audit-event-log-setting"  "identity": null  "kind": null  "location": null  "logs": [    {      "category": "AuditEvent"      "enabled": true      "retentionPolicy": {        "days": 365        "enabled": true      }    }  ]  "metrics": []  "name": "cc-audit-event-log-setting"  "resourceGroup": "cloud-shell-storage-westeurope"  "storageAccountId": "/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourceGroups/cloud-shell-storage-westeurope/providers/microsoft.Storage/storageAccounts/abcdabcdabcdabcdabcdabcd"  "tags": null  "type": null  "workspaceId": null}03				Repeat step no. 1 and 2 for each subscription created within your Microsoft Azure cloud account.			,https://www.cloudconformity.com/knowledge-base/azure/KeyVault/enable-audit-event-logging-for-azure-key-vaults.html
Enable Key Vault Recoverability,KeyVault,High (not acceptable risk),KeyVault-001,Ensure that production Azure Key Vaults are recoverable in order to prevent permanent deletion/purging of encryption keys secrets and certificates stored within these vaults. To make your Azure Key Vault instances recoverable you need to enable both "Soft Delete" and "Do Not Purge" features: "Soft Delete" implemented by enableSoftDelete parameter ensures that even if the Key Vault is deleted the vault itself or its objects (keys secrets certificates) remain recoverable for next 90 days. In this span of 90 days either the vault and its objects can be recovered or purged (permanent deletion). If no action is taken after 90 days the Azure Key Vault and all its objects will be purged."Do Not Purge" feature implemented by enablePurgeProtection parameter ensures that the Azure Key Vault and its objects cannot be purged at all preventing users from accidentally purging Azure Key Vault resources. This adds to the "Soft Delete" feature which only ensures that Key Vault is not deleted permanently and will be recoverable for 90 days from the date of deletion.,Deleting or purging a Key Vault instance can lead to immediate data loss as the keys encrypting the data and the secrets or certificates allowing access to resources and applications will become non-accessible. To prevent loss of encrypted data including storage accounts SQL databases and other cloud resources and services dependent on Key Vault objects (i.e. encryption keys secrets certificates) as may happen in the case of accidental deletion by a negligent user or from disruptive activity initiated by a malicious user Cloud Conformity highly recommends implementing Azure Key Vault recoverability by enabling both "Soft Delete" and "Do Not Purge" features for the production vaults.,To determine if your Microsoft Azure Key Vault instances are recoverable perform the following actions:,01				Run keyvault list command (Windows/macOS/Linux) using custom query filters to list the names of all Key Vault instances provisioned in the current Azure subscription:az keyvault list	--query '[*].name'02				The command output should return the requested Microsoft Azure resource identifiers (names):[  "cc-main-production-vault"  "cc-project5-app-vault"  "cc-user-access-vault"]03				Run keyvault show command (Windows/macOS/Linux) using the name of the Azure Key Vault instance that you want to examine as identifier parameter and custom query filters to describe the configuration status for both "Soft Delete" and "Do Not Purge" features set for the selected vault:az keyvault show	--name cc-main-production-vault	--query 'properties.{"enableSoftDelete":enableSoftDelete"enablePurgeProtection":enablePurgeProtection}'04				The command output should return the requested features configuration metadata: {  "enablePurgeProtection": null  "enableSoftDelete": null}				If keyvault show command output returns null for both "enablePurgeProtection" and "enableSoftDelete" configuration attributes as shown in the example above the verified Microsoft Azure Key Vault instance and its objects are not recoverable.			05				Repeat step no. 3 and 4 for each production Azure Key Vault provisioned within the current subscription.			06				Repeat steps no. 1 â 5 for each subscription created in your Microsoft Azure cloud account.			,01				Run keyvault update command (Windows/macOS/Linux) using the name of the production Key Vault instance that you want to reconfigure as identifier parameter (see Audit section part II to identify the right vault) to implement recoverability for the selected vault and its objects by enabling both "Soft Delete" and "Do Not Purge" features:az keyvault update	--name cc-main-production-vault	--enable-soft-delete true	--enable-purge-protection true02				The command output should return the metadata for the reconfigured Microsoft Azure Key Vault:{  "id": "/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.KeyVault/vaults/cc-main-production-vault"  "location": "westeurope"  "name": "cc-main-production-vault"  "properties": {    "accessPolicies": [      {        "applicationId": null        "objectId": "1234abcd-1234-abcd-1234-abcd1234abcd"        "permissions": {          "certificates": [            "Get"            "List"            "Update"            "Create"            "Import"            "Delete"            "Recover"            "Backup"            "Restore"            "ManageContacts"            "ManageIssuers"            "GetIssuers"            "ListIssuers"            "SetIssuers"            "DeleteIssuers"          ]          "keys": [            "Get"            "List"            "Update"            "Create"            "Import"            "Delete"            "Recover"            "Backup"            "Restore"          ]          "secrets": [            "Get"            "List"            "Set"            "Delete"            "Recover"            "Backup"            "Restore"          ]          "storage": null        }        "tenantId": "1234abcd-1234-abcd-1234-abcd1234abcd"      }    ]    "createMode": null    "enablePurgeProtection": true    "enableSoftDelete": true    "enabledForDeployment": false    "enabledForDiskEncryption": false    "enabledForTemplateDeployment": false    "networkAcls": null    "provisioningState": "Succeeded"    "sku": {      "name": "standard"    }    "tenantId": "1234abcd-1234-abcd-1234-abcd1234abcd"    "vaultUri": "https://cc-main-production-vault.vault.azure.net/"  }  "resourceGroup": "cloud-shell-storage-westeurope"  "tags": {}  "type": "Microsoft.KeyVault/vaults"}03				Repeat step no. 1 and 2 for each Azure Key Vault used in production provisioned within the current subscription.			04				Repeat steps no. 1 â 3 for each subscription created in your Microsoft Azure cloud account.			,,,https://www.cloudconformity.com/knowledge-base/azure/KeyVault/enable-key-vault-recoverability.html
Set Azure Secret Key Expiration,KeyVault,Medium (should be achieved),KeyVault-003,Ensure that all the secret keys available within your Microsoft Azure Key Vault have an expiration date/time set in order to follow security best practices and promote secret key rotation. The expiration parameter configured for an Azure secret identifies the expiration time after which the secret key must not be used anymore for storing sensitive data such as passwords and database connection strings.,Microsoft Azure Key Vault enables you to store and keep secrets within your Azure cloud environment. By default these secret keys never expire therefore it is strongly recommended to configure all the secret keys with an explicit expiration date/time to enforce secret rotation as an additional layer of protection. This should significantly reduce the chance that a compromised secret could be used without your knowledge to access important Azure resources such as SQL databases.,To determine if your Azure Key Vault secret keys have an expiration time set perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to All resources blade at https://portal.azure.com/#blade/HubsExtension/BrowseAll to access all your Microsoft Azure resources.			03				From the Type filter box select Key vault to list all Key Vault instances available in your Azure account.			04				Click on the name of the Key Vault instance that you want to examine.			05				In the navigation panel under Settings select Secrets to access the secret keys stored in the selected Azure Key Vault.			06				Click on the name of the active secret key that you want to examine. An active Azure secret has its STATUS set to Enabled.			07				On the selected secret overview page check the date available within the EXPIRATION DATE column for the current version of the secret key. If there is no date available in the EXPIRATION DATE column the selected Azure Key Vault secret does not have an expiration date/time set. 			08				Repeat step no. 6 and 7 for each active secret key created in the selected Azure Key Vault.			09				Repeat steps no. 4 â 8 for each Microsoft Azure Key Vault instance available in the current subscription.			10				Repeat steps no. 3 â 9 for each subscription created in your Microsoft Azure cloud account.			,01				Run keyvault list command (Windows/macOS/Linux) using custom query filters to describe the names of all Key Vault instances created in the current Azure subscription:az keyvault list	--query '[*].name'02				The command output should return the requested Microsoft Azure resource names:[  "cc-production-vault"  "cc-project5-vault"]03				Run keyvault secret list command (Windows/macOS/Linux) using the name of the Azure Key Vault that you want to examine as identifier parameter and custom query filters to describe the secret keys stored within the selected vault:az keyvault secret list	--vault-name cc-production-vault	--output table	--query '[*].{"id":id"enabled":attributes.enabled}'04				The command output should return the ID and the status for each secret available in the vault:Id                                                                        Enabled------------------------------------------------------------------------  -------https://cc-production-vault.vault.azure.net/secrets/cc-internal-api-key   Truehttps://cc-production-vault.vault.azure.net/secrets/cc-project5-api-key   False05				Run keyvault secret show command (Windows/macOS/Linux) using the ID of the active secret key that you want to examine as identifier parameter and custom query filters to obtain the expiration date/time for the specified Azure Key Vault secret. An active secret key has its status set to Enabled (i.e. Enabled: True):az keyvault secret show	--id https://cc-production-vault.vault.azure.net/secrets/cc-internal-api-key	--query '{"expires":attributes.expires}'06				The command output should return the expiration date for the specified secret as value for the "expires" attribute:{  "expires": null}				If the keyvault secret show command output returns null as value for the "expires" attribute as shown in the example above the selected Azure Key Vault secret key does not have an expiration date configured. 			07				Repeat step no. 5 and 6 for each active secret stored within the selected Azure Key Vault.			08				Repeat steps no. 3 â 7 for each Microsoft Azure Key Vault provisioned in the current Azure subscription.			09				Repeat steps no. 1 â 8 for each subscription created in your Microsoft Azure cloud account.			,01				Sign in to Azure Management Console.			02				Navigate to All resources blade at https://portal.azure.com/#blade/HubsExtension/BrowseAll to access all your Microsoft Azure resources.			03				From the Type filter box select Key vault to list all Key Vault instances available in your Azure account.			04				Click on the name of the Microsoft Azure Key Vault instance that you want to access.			05				In the navigation panel under Settings select Secrets to access the secret keys stored in the selected Key Vault.			06				Click on the name of the active Azure secret that you want to reconfigure (see Audit section part I to identify the right secret key).			07				On the selected secret overview page in the CURRENT VERSION section choose and open the current version of the secret key.			08				On the selected secret version page inside the Settings section select Set expiration date? checkbox and use the date and time picker (DTP) controls to configure when the resource will become inactive. Click Save to apply the chosen expiration date and time to the specified Microsoft Azure secret.			09				Repeat steps no. 6 â 8 for each active secret key that requires an expiration date stored within the selected Azure Key Vault.			10				Repeat steps no. 4 â 9 for each Microsoft Azure Key Vault instance in the current subscription.			11				Repeat steps no. 3 â 10 for each subscription created in your Microsoft Azure cloud account.			,01				Run keyvault secret set-attributes command (Windows/macOS/Linux) using the ID of the active Azure secret that you want to reconfigure as identifier parameter (see Audit section part II to identify the right secret key) and the --expires parameter to configure the expiration date and time for the specified Azure Key Vault secret. For example the following command request sets the expiration time for an Azure secret identified by the ID "https://cc-production-vault.vault.azure.net/secrets/cc-internal-api-key" to Monday September 21 2020 10:30:00 UTC:az keyvault secret set-attributes	--id https://cc-production-vault.vault.azure.net/secrets/cc-internal-api-key	--expires "2020-09-21T10:30:00Z"02				The command output should return the metadata for the reconfigured Microsoft Azure secret:{  "attributes": {    "created": "2019-09-21T11:59:31+00:00"    "enabled": true    "expires": "2020-09-21T10:30:00+00:00"    "notBefore": "2019-09-21T11:59:10+00:00"    "recoveryLevel": "Purgeable"    "updated": "2019-09-18T12:26:12+00:00"  }  "contentType": null  "id": "https://cc-production-vault.vault.azure.net/secrets/cc-internal-api-key/0abcdabcdabcdabcdabcdabcdbabcdab"  "kid": null  "managed": null  "tags": null  "value": null}03				Repeat step no. 1 and 2 for each active secret key that requires an expiration date/time created within the current subscription.			04				Repeat steps no. 1 â 3 for each subscription created within your Microsoft Azure cloud account.			,https://www.cloudconformity.com/knowledge-base/azure/KeyVault/set-secret-key-expiration.html
Set Encryption Key Expiration,KeyVault,Medium (should be achieved),KeyVault-002,Ensure that all the encryption keys available within your Microsoft Azure Key Vault have an expiration time set in order to follow security best practices and promote encryption key rotation. The expiration attribute configured for an encryption key identifies the expiration date and time after which the key must not be used anymore for a cryptographic operations.,Microsoft Azure Key Vault enables you to store and use encryption keys within your Azure cloud environment. By default the encryption keys stored within a vault never expire. Therefore Cloud Conformity highly recommends that you configure all your keys with an explicit expiration time so that these keys can't be used beyond their assigned lifetime. This should significantly reduce the chance that a compromised key could be used without your knowledge to access valuable Azure cloud resources.,To determine if your Azure Key Vault encryption keys have an expiration time set perform the following:,01				Sign in to Azure Management Console.			02				Navigate to All resources blade at https://portal.azure.com/#blade/HubsExtension/BrowseAll to access all your Microsoft Azure resources.			03				From the Type filter box select Key vault to list all Key Vault instances available in your Azure account.			04				Click on the name (link) of the Key Vault instance that you want to examine.			05				In the navigation panel under Settings select Keys to access the encryption keys stored within the selected Key Vault.			06				Click on the name of the active cryptographic key that you want to examine. An active encryption key has its STATUS set to Enabled.			07				On the selected key overview page check the date available in the EXPIRATION DATE column for the current version of the key. If there is no date available in the EXPIRATION DATE column the selected Azure Key Vault cryptographic key does not have an expiration time set. 			08				Repeat step no. 6 and 7 for each active encryption key created in the selected Azure Key Vault.			09				Repeat steps no. 4 â 8 for each Microsoft Azure Key Vault instance available in the current subscription.			10				Repeat steps no. 3 â 9 for each subscription created in your Microsoft Azure cloud account.			,01				Run keyvault list command (Windows/macOS/Linux) using custom query filters to list the identifiers (names) of all Key Vault instances available in the current Azure subscription:az keyvault list	--query '[*].name'02				The command output should return the requested Azure resource names:[  "cc-production-vault"  "cc-main-key-vault"  "cc-project5-vault"]03				Run keyvault key list command (Windows/macOS/Linux) using the name of the Azure Key Vault that you want to examine as identifier parameter and custom query filters to describe the cryptographic keys available within the selected vault:az keyvault key list	--vault-name cc-production-vault	--output table	--query '[*].{"kid":kid"enabled":attributes.enabled}'04				The command output should return the ID and the status of each encryption key available in the vault:Kid                                                                           Enabled---------------------------------------------------------------------------   -------https://cc-production-vault.vault.azure.net/keys/cc-main-app-encryption-key   Truehttps://cc-production-vault.vault.azure.net/keys/cc-project5-encryption-key   False05				Run keyvault key show command (Windows/macOS/Linux) using the ID of the active encryption key that you want to examine as identifier parameter and custom query filters to get the expiration date/time for the specified Azure Key Vault cryptographic key. An active encryption key has its status set to Enabled (i.e. Enabled: True):az keyvault key show	--id https://cc-production-vault.vault.azure.net/keys/cc-main-app-encryption-key	--query '{"expires":attributes.expires}'06				The command output should return the expiration date for the specified key as value for the "expires" attribute:{  "expires": null}				If the command output returns null as value for the "expires" attribute as shown in the example above the selected Azure Key Vault encryption key does not have an expiration date configured. 			07				Repeat step no. 5 and 6 for each active encryption key available in the selected Azure Key Vault.			08				Repeat steps no. 3 â 7 for each Microsoft Azure Key Vault provisioned in the current Azure subscription.			09				Repeat steps no. 1 â 8 for each subscription created in your Microsoft Azure cloud account.			,01				Sign in to Azure Management Console.			02				Navigate to All resources blade at https://portal.azure.com/#blade/HubsExtension/BrowseAll to access all your Microsoft Azure resources.			03				From the Type filter box select Key vault to list all Key Vault instances available in your Azure account.			04				Click on the name of the Azure Key Vault instance that you want to access.			05				In the navigation panel under Settings select Keys to access the encryption keys stored in the selected Key Vault.			06				Click on the name of the active key that you want to reconfigure (see Audit section part I to identify the right key). 			07				On the selected key overview page in the CURRENT VERSION section choose and open the current version of the encryption key.			08				On the selected key version page within the Settings section select Set expiration date? checkbox and use the date and time picker (DTP) controls to configure when the resource will become inactive. Click Save to apply the chosen expiration date and time to the specified cryptographic key.			09				Repeat steps no. 6 â 8 for each active encryption key that requires an expiration date available in the selected Azure Key Vault.			10				Repeat steps no. 4 â 9 for each Microsoft Azure Key Vault instance within the current subscription.			11				Repeat steps no. 3 â 10 for each subscription created in your Microsoft Azure cloud account.			,01				Run keyvault key set-attributes command (Windows/macOS/Linux) using the ID of the active encryption key that you want to reconfigure as identifier parameter (see Audit section part II to identify the right key) and the --expires parameter to configure the expiration date/time for the specified Azure Key Vault cryptographic key. For example the following command request sets the expiration time for an encryption key identified by the ID "https://cc-production-vault.vault.azure.net/keys/cc-main-app-encryption-key" to Friday September 18 2020 08:05:00 UTC:az keyvault key set-attributes	--id https://cc-production-vault.vault.azure.net/keys/cc-main-app-encryption-key	--expires "2020-09-18T08:05:00Z"02				The command output should return the metadata for the reconfigured Azure Key Vault encryption key:{  "attributes": {    "created": "2019-09-18T08:03:07+00:00"    "enabled": true    "expires": "2020-09-18T08:05:00+00:00"    "notBefore": "2019-09-18T08:02:59+00:00"    "recoveryLevel": "Purgeable"    "updated": "2019-09-18T10:16:47+00:00"  }  "key": {    "crv": null    "d": null    "dp": null    "dq": null    "e": "AQAB"    "k": null    "keyOps": [      "sign"      "verify"      "wrapKey"      "unwrapKey"      "encrypt"      "decrypt"    ]    "kid": "https://cc-production-vault.vault.azure.net/keys/cc-main-app-encryption-key/0abcdabcdabcdabcdabcdabcdbabcdab"    "kty": "RSA"    "n": "..."    "p": null    "q": null    "qi": null    "t": null    "x": null    "y": null  }  "managed": null  "tags": null}03				Repeat step no. 1 and 2 for each active encryption key that requires an expiration date/time available in the current subscription.			04				Repeat steps no. 1 â 3 for each subscription created within your Microsoft Azure cloud account.			,https://www.cloudconformity.com/knowledge-base/azure/KeyVault/set-encryption-key-expiration.html
Enable AuditEvent Logging for Azure Key Vaults,KeyVault,Medium (should be achieved),KeyVault-004,Ensure that AuditEvent logging is enabled for Azure Key Vault instances in order to record any interactions with your vaults for enhancing data protection and compliance within your Azure cloud account. With Azure Key Vault you can safeguard encryption keys and application secrets like passwords using keys stored in Hardware Security Modules (HSMs).,Monitoring how and when your Azure Key Vaults are accessed and by whom enables an audit trail of interactions with private information encryption keys and certificates managed by Azure Key Vault service. Enabling logging for Key Vault saves information in a Microsoft Azure storage account that you provide during setup. A new storage container named "insights-logs-auditevent" is automatically created for the storage account that you specified.,To determine if your Azure Key Vaults have AuditEvent logging enabled perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to All resources blade at https://portal.azure.com/#blade/HubsExtension/BrowseAll to access all your Microsoft Azure resources.			03				From the Type filter box select Key vault to list all Key Vault instances available within your Azure account.			04				Click on the name (link) of the Key Vault instance that you want to examine.			05				In the navigation panel under Monitoring select Diagnostic settings to access the diagnostic configuration settings available for the selected Key Vault.			06				On Diagnostic settings page check for any diagnostic settings defined. If there are no diagnostic settings defined at all the verified Azure Key Vault does not have diagnostic logging enabled. If there are one or more diagnostic settings already defined but these are not including AuditEvent logging (i.e. the AuditEvent checkbox is not selected) the selected Microsoft Azure Key Vault does not have AuditEvent logging enabled.			07				Repeat steps no. 4 â 10 for each subscription created in your Microsoft Azure cloud account.			,01				Run keyvault list command (Windows/macOS/Linux) using custom query filters to list the identifiers (IDs) of all Key Vault instances available in the current Azure subscription:az keyvault list	--query '[*].id'02				The command output should return the requested Azure resource ID(s):["/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.KeyVault/vaults/cc-main-key-vault""/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.KeyVault/vaults/cc-production-vault"]03				Run monitor diagnostic-settings list command (Windows/macOS/Linux) using the ID of the Key Vault returned at the previous step as identifier parameter and custom query filters to get the active diagnostic settings list for the specified Azure Key Vault:az monitor diagnostic-settings list	--resource "/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.KeyVault/vaults/cc-main-key-vault"	--query 'value'04				The command output should return the diagnostic settings metadata (including AuditEvent logging metadata) available for the selected Key Vault:										If the command output returns an empty array as shown in the example below there are no diagnostic settings currently defined therefore the selected Azure Key Vault does not have diagnostic logging enabled.[]						If monitor diagnostic-settings list command output returns any configuration metadata check the value (boolean) set for "enabled" configuration attribute associated with the "AuditEvent" log category. If "enabled" is set to false as shown in the output example below the diagnostic settings defined for the specified resource does not include AuditEvent logging thus the selected Microsoft Azure Key Vault does not have AuditEvent logging enabled.[  {    ...    "logs": [      {        "category": "AuditEvent"        "enabled": false        "retentionPolicy": {          "days": 0          "enabled": false        }      }    ]    ...  }]05				Repeat steps no. 1 â 4 for each subscription available in your Microsoft Azure cloud account.			,01				Sign in to Azure Management Console.			02				Navigate to All resources blade at https://portal.azure.com/#blade/HubsExtension/BrowseAll to access all your Microsoft Azure resources.			03				From the Type filter box select Key vault to list all Key Vault instances available within your Azure account.			04				Click on the name (link) of the Key Vault instance that you want to reconfigure.			05				In the navigation panel under Monitoring select Diagnostic settings to access the diagnostic configuration settings available for the selected Key Vault.			06				On the Diagnostic settings page click Add diagnostic setting and perform the following commands:										Provide a unique name for the new diagnostic setting in the Name box.											Select Archive to a storage account checkbox click on Configure storage account and select an existing account for AuditEvent logging storage from the Storage Account dropdown list.											Select AuditEvent checkbox available in the LOG configuration section and set the number of days to retain AuditEvent log data for the selected Key Vault in the Retention (days) box to 365 or 0 or use the slider control to set the right value. A setting of 0 (zero) days retains the AuditEvent logs forever.											Click Save to apply the configuration changes.					07				Repeat steps no. 3 â 6 for each subscription created in your Microsoft Azure cloud account.			,01				Run monitor diagnostic-settings create command (Windows/macOS/Linux) to create a new Key Vault diagnostic setting that will enable and configure AuditEvent logging for the specified Microsoft Azure Key Vault. For example the following monitor diagnostic-settings create command request creates a diagnostic setting with the name "cc-audit-event-log-setting" for an Azure Key Vault identified by ID "/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.KeyVault/vaults/cc-main-key-vault" that retains AuditEvent logging data for 365 days within a storage account identified by the ID "abcdabcdabcdabcdabcdabcd":az monitor diagnostic-settings create	--name cc-audit-event-log-setting	--resource /subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.KeyVault/vaults/cc-main-key-vault	--storage-account abcdabcdabcdabcdabcdabcd	--logs '[{"category": "AuditEvent""enabled": true"retentionPolicy": {"enabled": true"days": 365}}]'02				The command output should return the configuration metadata for the newly created Azure Key Vault diagnostic setting:{  "eventHubAuthorizationRuleId": null  "eventHubName": null  "id": "/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourcegroups/cloud-shell-storage-westeurope/providers/microsoft.keyvault/vaults/cc-main-key-vault/providers/microsoft.insights/diagnosticSettings/cc-audit-event-log-setting"  "identity": null  "kind": null  "location": null  "logs": [    {      "category": "AuditEvent"      "enabled": true      "retentionPolicy": {        "days": 365        "enabled": true      }    }  ]  "metrics": []  "name": "cc-audit-event-log-setting"  "resourceGroup": "cloud-shell-storage-westeurope"  "storageAccountId": "/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourceGroups/cloud-shell-storage-westeurope/providers/microsoft.Storage/storageAccounts/abcdabcdabcdabcdabcdabcd"  "tags": null  "type": null  "workspaceId": null}03				Repeat step no. 1 and 2 for each subscription created within your Microsoft Azure cloud account.			,https://www.cloudconformity.com/knowledge-base/azure/KeyVault/enable-audit-event-logging-for-azure-key-vaults.html
Enable Key Vault Recoverability,KeyVault,High (not acceptable risk),KeyVault-001,Ensure that production Azure Key Vaults are recoverable in order to prevent permanent deletion/purging of encryption keys secrets and certificates stored within these vaults. To make your Azure Key Vault instances recoverable you need to enable both "Soft Delete" and "Do Not Purge" features: "Soft Delete" implemented by enableSoftDelete parameter ensures that even if the Key Vault is deleted the vault itself or its objects (keys secrets certificates) remain recoverable for next 90 days. In this span of 90 days either the vault and its objects can be recovered or purged (permanent deletion). If no action is taken after 90 days the Azure Key Vault and all its objects will be purged."Do Not Purge" feature implemented by enablePurgeProtection parameter ensures that the Azure Key Vault and its objects cannot be purged at all preventing users from accidentally purging Azure Key Vault resources. This adds to the "Soft Delete" feature which only ensures that Key Vault is not deleted permanently and will be recoverable for 90 days from the date of deletion.,Deleting or purging a Key Vault instance can lead to immediate data loss as the keys encrypting the data and the secrets or certificates allowing access to resources and applications will become non-accessible. To prevent loss of encrypted data including storage accounts SQL databases and other cloud resources and services dependent on Key Vault objects (i.e. encryption keys secrets certificates) as may happen in the case of accidental deletion by a negligent user or from disruptive activity initiated by a malicious user Cloud Conformity highly recommends implementing Azure Key Vault recoverability by enabling both "Soft Delete" and "Do Not Purge" features for the production vaults.,To determine if your Microsoft Azure Key Vault instances are recoverable perform the following actions:,01				Run keyvault list command (Windows/macOS/Linux) using custom query filters to list the names of all Key Vault instances provisioned in the current Azure subscription:az keyvault list	--query '[*].name'02				The command output should return the requested Microsoft Azure resource identifiers (names):[  "cc-main-production-vault"  "cc-project5-app-vault"  "cc-user-access-vault"]03				Run keyvault show command (Windows/macOS/Linux) using the name of the Azure Key Vault instance that you want to examine as identifier parameter and custom query filters to describe the configuration status for both "Soft Delete" and "Do Not Purge" features set for the selected vault:az keyvault show	--name cc-main-production-vault	--query 'properties.{"enableSoftDelete":enableSoftDelete"enablePurgeProtection":enablePurgeProtection}'04				The command output should return the requested features configuration metadata: {  "enablePurgeProtection": null  "enableSoftDelete": null}				If keyvault show command output returns null for both "enablePurgeProtection" and "enableSoftDelete" configuration attributes as shown in the example above the verified Microsoft Azure Key Vault instance and its objects are not recoverable.			05				Repeat step no. 3 and 4 for each production Azure Key Vault provisioned within the current subscription.			06				Repeat steps no. 1 â 5 for each subscription created in your Microsoft Azure cloud account.			,01				Run keyvault update command (Windows/macOS/Linux) using the name of the production Key Vault instance that you want to reconfigure as identifier parameter (see Audit section part II to identify the right vault) to implement recoverability for the selected vault and its objects by enabling both "Soft Delete" and "Do Not Purge" features:az keyvault update	--name cc-main-production-vault	--enable-soft-delete true	--enable-purge-protection true02				The command output should return the metadata for the reconfigured Microsoft Azure Key Vault:{  "id": "/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.KeyVault/vaults/cc-main-production-vault"  "location": "westeurope"  "name": "cc-main-production-vault"  "properties": {    "accessPolicies": [      {        "applicationId": null        "objectId": "1234abcd-1234-abcd-1234-abcd1234abcd"        "permissions": {          "certificates": [            "Get"            "List"            "Update"            "Create"            "Import"            "Delete"            "Recover"            "Backup"            "Restore"            "ManageContacts"            "ManageIssuers"            "GetIssuers"            "ListIssuers"            "SetIssuers"            "DeleteIssuers"          ]          "keys": [            "Get"            "List"            "Update"            "Create"            "Import"            "Delete"            "Recover"            "Backup"            "Restore"          ]          "secrets": [            "Get"            "List"            "Set"            "Delete"            "Recover"            "Backup"            "Restore"          ]          "storage": null        }        "tenantId": "1234abcd-1234-abcd-1234-abcd1234abcd"      }    ]    "createMode": null    "enablePurgeProtection": true    "enableSoftDelete": true    "enabledForDeployment": false    "enabledForDiskEncryption": false    "enabledForTemplateDeployment": false    "networkAcls": null    "provisioningState": "Succeeded"    "sku": {      "name": "standard"    }    "tenantId": "1234abcd-1234-abcd-1234-abcd1234abcd"    "vaultUri": "https://cc-main-production-vault.vault.azure.net/"  }  "resourceGroup": "cloud-shell-storage-westeurope"  "tags": {}  "type": "Microsoft.KeyVault/vaults"}03				Repeat step no. 1 and 2 for each Azure Key Vault used in production provisioned within the current subscription.			04				Repeat steps no. 1 â 3 for each subscription created in your Microsoft Azure cloud account.			,,,https://www.cloudconformity.com/knowledge-base/azure/KeyVault/enable-key-vault-recoverability.html
Set Azure Secret Key Expiration,KeyVault,Medium (should be achieved),KeyVault-003,Ensure that all the secret keys available within your Microsoft Azure Key Vault have an expiration date/time set in order to follow security best practices and promote secret key rotation. The expiration parameter configured for an Azure secret identifies the expiration time after which the secret key must not be used anymore for storing sensitive data such as passwords and database connection strings.,Microsoft Azure Key Vault enables you to store and keep secrets within your Azure cloud environment. By default these secret keys never expire therefore it is strongly recommended to configure all the secret keys with an explicit expiration date/time to enforce secret rotation as an additional layer of protection. This should significantly reduce the chance that a compromised secret could be used without your knowledge to access important Azure resources such as SQL databases.,To determine if your Azure Key Vault secret keys have an expiration time set perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to All resources blade at https://portal.azure.com/#blade/HubsExtension/BrowseAll to access all your Microsoft Azure resources.			03				From the Type filter box select Key vault to list all Key Vault instances available in your Azure account.			04				Click on the name of the Key Vault instance that you want to examine.			05				In the navigation panel under Settings select Secrets to access the secret keys stored in the selected Azure Key Vault.			06				Click on the name of the active secret key that you want to examine. An active Azure secret has its STATUS set to Enabled.			07				On the selected secret overview page check the date available within the EXPIRATION DATE column for the current version of the secret key. If there is no date available in the EXPIRATION DATE column the selected Azure Key Vault secret does not have an expiration date/time set. 			08				Repeat step no. 6 and 7 for each active secret key created in the selected Azure Key Vault.			09				Repeat steps no. 4 â 8 for each Microsoft Azure Key Vault instance available in the current subscription.			10				Repeat steps no. 3 â 9 for each subscription created in your Microsoft Azure cloud account.			,01				Run keyvault list command (Windows/macOS/Linux) using custom query filters to describe the names of all Key Vault instances created in the current Azure subscription:az keyvault list	--query '[*].name'02				The command output should return the requested Microsoft Azure resource names:[  "cc-production-vault"  "cc-project5-vault"]03				Run keyvault secret list command (Windows/macOS/Linux) using the name of the Azure Key Vault that you want to examine as identifier parameter and custom query filters to describe the secret keys stored within the selected vault:az keyvault secret list	--vault-name cc-production-vault	--output table	--query '[*].{"id":id"enabled":attributes.enabled}'04				The command output should return the ID and the status for each secret available in the vault:Id                                                                        Enabled------------------------------------------------------------------------  -------https://cc-production-vault.vault.azure.net/secrets/cc-internal-api-key   Truehttps://cc-production-vault.vault.azure.net/secrets/cc-project5-api-key   False05				Run keyvault secret show command (Windows/macOS/Linux) using the ID of the active secret key that you want to examine as identifier parameter and custom query filters to obtain the expiration date/time for the specified Azure Key Vault secret. An active secret key has its status set to Enabled (i.e. Enabled: True):az keyvault secret show	--id https://cc-production-vault.vault.azure.net/secrets/cc-internal-api-key	--query '{"expires":attributes.expires}'06				The command output should return the expiration date for the specified secret as value for the "expires" attribute:{  "expires": null}				If the keyvault secret show command output returns null as value for the "expires" attribute as shown in the example above the selected Azure Key Vault secret key does not have an expiration date configured. 			07				Repeat step no. 5 and 6 for each active secret stored within the selected Azure Key Vault.			08				Repeat steps no. 3 â 7 for each Microsoft Azure Key Vault provisioned in the current Azure subscription.			09				Repeat steps no. 1 â 8 for each subscription created in your Microsoft Azure cloud account.			,01				Sign in to Azure Management Console.			02				Navigate to All resources blade at https://portal.azure.com/#blade/HubsExtension/BrowseAll to access all your Microsoft Azure resources.			03				From the Type filter box select Key vault to list all Key Vault instances available in your Azure account.			04				Click on the name of the Microsoft Azure Key Vault instance that you want to access.			05				In the navigation panel under Settings select Secrets to access the secret keys stored in the selected Key Vault.			06				Click on the name of the active Azure secret that you want to reconfigure (see Audit section part I to identify the right secret key).			07				On the selected secret overview page in the CURRENT VERSION section choose and open the current version of the secret key.			08				On the selected secret version page inside the Settings section select Set expiration date? checkbox and use the date and time picker (DTP) controls to configure when the resource will become inactive. Click Save to apply the chosen expiration date and time to the specified Microsoft Azure secret.			09				Repeat steps no. 6 â 8 for each active secret key that requires an expiration date stored within the selected Azure Key Vault.			10				Repeat steps no. 4 â 9 for each Microsoft Azure Key Vault instance in the current subscription.			11				Repeat steps no. 3 â 10 for each subscription created in your Microsoft Azure cloud account.			,01				Run keyvault secret set-attributes command (Windows/macOS/Linux) using the ID of the active Azure secret that you want to reconfigure as identifier parameter (see Audit section part II to identify the right secret key) and the --expires parameter to configure the expiration date and time for the specified Azure Key Vault secret. For example the following command request sets the expiration time for an Azure secret identified by the ID "https://cc-production-vault.vault.azure.net/secrets/cc-internal-api-key" to Monday September 21 2020 10:30:00 UTC:az keyvault secret set-attributes	--id https://cc-production-vault.vault.azure.net/secrets/cc-internal-api-key	--expires "2020-09-21T10:30:00Z"02				The command output should return the metadata for the reconfigured Microsoft Azure secret:{  "attributes": {    "created": "2019-09-21T11:59:31+00:00"    "enabled": true    "expires": "2020-09-21T10:30:00+00:00"    "notBefore": "2019-09-21T11:59:10+00:00"    "recoveryLevel": "Purgeable"    "updated": "2019-09-18T12:26:12+00:00"  }  "contentType": null  "id": "https://cc-production-vault.vault.azure.net/secrets/cc-internal-api-key/0abcdabcdabcdabcdabcdabcdbabcdab"  "kid": null  "managed": null  "tags": null  "value": null}03				Repeat step no. 1 and 2 for each active secret key that requires an expiration date/time created within the current subscription.			04				Repeat steps no. 1 â 3 for each subscription created within your Microsoft Azure cloud account.			,https://www.cloudconformity.com/knowledge-base/azure/KeyVault/set-secret-key-expiration.html
Set Encryption Key Expiration,KeyVault,Medium (should be achieved),KeyVault-002,Ensure that all the encryption keys available within your Microsoft Azure Key Vault have an expiration time set in order to follow security best practices and promote encryption key rotation. The expiration attribute configured for an encryption key identifies the expiration date and time after which the key must not be used anymore for a cryptographic operations.,Microsoft Azure Key Vault enables you to store and use encryption keys within your Azure cloud environment. By default the encryption keys stored within a vault never expire. Therefore Cloud Conformity highly recommends that you configure all your keys with an explicit expiration time so that these keys can't be used beyond their assigned lifetime. This should significantly reduce the chance that a compromised key could be used without your knowledge to access valuable Azure cloud resources.,To determine if your Azure Key Vault encryption keys have an expiration time set perform the following:,01				Sign in to Azure Management Console.			02				Navigate to All resources blade at https://portal.azure.com/#blade/HubsExtension/BrowseAll to access all your Microsoft Azure resources.			03				From the Type filter box select Key vault to list all Key Vault instances available in your Azure account.			04				Click on the name (link) of the Key Vault instance that you want to examine.			05				In the navigation panel under Settings select Keys to access the encryption keys stored within the selected Key Vault.			06				Click on the name of the active cryptographic key that you want to examine. An active encryption key has its STATUS set to Enabled.			07				On the selected key overview page check the date available in the EXPIRATION DATE column for the current version of the key. If there is no date available in the EXPIRATION DATE column the selected Azure Key Vault cryptographic key does not have an expiration time set. 			08				Repeat step no. 6 and 7 for each active encryption key created in the selected Azure Key Vault.			09				Repeat steps no. 4 â 8 for each Microsoft Azure Key Vault instance available in the current subscription.			10				Repeat steps no. 3 â 9 for each subscription created in your Microsoft Azure cloud account.			,01				Run keyvault list command (Windows/macOS/Linux) using custom query filters to list the identifiers (names) of all Key Vault instances available in the current Azure subscription:az keyvault list	--query '[*].name'02				The command output should return the requested Azure resource names:[  "cc-production-vault"  "cc-main-key-vault"  "cc-project5-vault"]03				Run keyvault key list command (Windows/macOS/Linux) using the name of the Azure Key Vault that you want to examine as identifier parameter and custom query filters to describe the cryptographic keys available within the selected vault:az keyvault key list	--vault-name cc-production-vault	--output table	--query '[*].{"kid":kid"enabled":attributes.enabled}'04				The command output should return the ID and the status of each encryption key available in the vault:Kid                                                                           Enabled---------------------------------------------------------------------------   -------https://cc-production-vault.vault.azure.net/keys/cc-main-app-encryption-key   Truehttps://cc-production-vault.vault.azure.net/keys/cc-project5-encryption-key   False05				Run keyvault key show command (Windows/macOS/Linux) using the ID of the active encryption key that you want to examine as identifier parameter and custom query filters to get the expiration date/time for the specified Azure Key Vault cryptographic key. An active encryption key has its status set to Enabled (i.e. Enabled: True):az keyvault key show	--id https://cc-production-vault.vault.azure.net/keys/cc-main-app-encryption-key	--query '{"expires":attributes.expires}'06				The command output should return the expiration date for the specified key as value for the "expires" attribute:{  "expires": null}				If the command output returns null as value for the "expires" attribute as shown in the example above the selected Azure Key Vault encryption key does not have an expiration date configured. 			07				Repeat step no. 5 and 6 for each active encryption key available in the selected Azure Key Vault.			08				Repeat steps no. 3 â 7 for each Microsoft Azure Key Vault provisioned in the current Azure subscription.			09				Repeat steps no. 1 â 8 for each subscription created in your Microsoft Azure cloud account.			,01				Sign in to Azure Management Console.			02				Navigate to All resources blade at https://portal.azure.com/#blade/HubsExtension/BrowseAll to access all your Microsoft Azure resources.			03				From the Type filter box select Key vault to list all Key Vault instances available in your Azure account.			04				Click on the name of the Azure Key Vault instance that you want to access.			05				In the navigation panel under Settings select Keys to access the encryption keys stored in the selected Key Vault.			06				Click on the name of the active key that you want to reconfigure (see Audit section part I to identify the right key). 			07				On the selected key overview page in the CURRENT VERSION section choose and open the current version of the encryption key.			08				On the selected key version page within the Settings section select Set expiration date? checkbox and use the date and time picker (DTP) controls to configure when the resource will become inactive. Click Save to apply the chosen expiration date and time to the specified cryptographic key.			09				Repeat steps no. 6 â 8 for each active encryption key that requires an expiration date available in the selected Azure Key Vault.			10				Repeat steps no. 4 â 9 for each Microsoft Azure Key Vault instance within the current subscription.			11				Repeat steps no. 3 â 10 for each subscription created in your Microsoft Azure cloud account.			,01				Run keyvault key set-attributes command (Windows/macOS/Linux) using the ID of the active encryption key that you want to reconfigure as identifier parameter (see Audit section part II to identify the right key) and the --expires parameter to configure the expiration date/time for the specified Azure Key Vault cryptographic key. For example the following command request sets the expiration time for an encryption key identified by the ID "https://cc-production-vault.vault.azure.net/keys/cc-main-app-encryption-key" to Friday September 18 2020 08:05:00 UTC:az keyvault key set-attributes	--id https://cc-production-vault.vault.azure.net/keys/cc-main-app-encryption-key	--expires "2020-09-18T08:05:00Z"02				The command output should return the metadata for the reconfigured Azure Key Vault encryption key:{  "attributes": {    "created": "2019-09-18T08:03:07+00:00"    "enabled": true    "expires": "2020-09-18T08:05:00+00:00"    "notBefore": "2019-09-18T08:02:59+00:00"    "recoveryLevel": "Purgeable"    "updated": "2019-09-18T10:16:47+00:00"  }  "key": {    "crv": null    "d": null    "dp": null    "dq": null    "e": "AQAB"    "k": null    "keyOps": [      "sign"      "verify"      "wrapKey"      "unwrapKey"      "encrypt"      "decrypt"    ]    "kid": "https://cc-production-vault.vault.azure.net/keys/cc-main-app-encryption-key/0abcdabcdabcdabcdabcdabcdbabcdab"    "kty": "RSA"    "n": "..."    "p": null    "q": null    "qi": null    "t": null    "x": null    "y": null  }  "managed": null  "tags": null}03				Repeat step no. 1 and 2 for each active encryption key that requires an expiration date/time available in the current subscription.			04				Repeat steps no. 1 â 3 for each subscription created within your Microsoft Azure cloud account.			,https://www.cloudconformity.com/knowledge-base/azure/KeyVault/set-encryption-key-expiration.html
Enable Azure Resource Locks,Locks,High (not acceptable risk),Locks-001,Ensure that all your mission critical Azure cloud resources have resource locks enabled so that certain users are not be able to delete or modify these resources in order to help prevent accidental and malicious changes or deletion.,Azure resource locks enable you to restrict operations on production Azure cloud resources where modifying or deleting a resource would have a significant negative impact. As an Azure account administrator it may be necessary to lock an important resource a resource group or even a subscription in order to prevent other users within your organization from mistakenly deleting or modifying the resource. A resource lock can have one of the following types:"CanNotDelete" â when authorized users can still read and modify a cloud resource but they cant delete the resource."ReadOnly" â when authorized users can read a cloud resource but they cant delete or update the resource. Using this resource lock level is similar to restricting all authorized users to the permissions granted by the "Reader" role.,To determine if your mission critical resources have resource locks configured perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to All resources blade at https://portal.azure.com/#blade/HubsExtension/BrowseAll to access all your Microsoft Azure resources.			03				Choose the Azure subscription that you want to access from the Subscription filter box.			04				From the Type filter box select Key vault to list only the Key Vault instances provisioned in the selected subscription.			05				Click on the name (link) of the mission critical Key Vault instance that you want to examine.			06				In the navigation panel under Settings select Locks to access the resource locks set for the selected Azure Key Vault.			07				On the Locks page check for any available "CanNotDelete" or "ReadOnly" locks based on the selected resource requirements. If the Key Vault instance does not have the appropriate resource lock configured or there are no resource locks available at all and the following message is displayed: "This resource has no locks." the selected Microsoft Azure Key Vault does not have resource locks enabled.			08				Repeat steps no. 5 â 7 for other mission critical Azure Key Vault instances available within the selected subscription.			09				Repeat steps no. 3 â 8 for each subscription created in your Microsoft Azure cloud account.			,01				Run keyvault list command (Windows/macOS/Linux) using custom query filters to list the IDs of all Key Vault instances provisioned in the current Azure subscription:az keyvault list	--query '[*].id'02				The command output should return the requested Microsoft Azure resource identifiers (IDs):["/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.KeyVault/vaults/cc-production-app-vault""/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.KeyVault/vaults/cc-warehouse-data-vault"]03				Run lock list command (Windows/macOS/Linux) using the ID of the Azure Key Vault that you want to examine as identifier parameter and custom query filters to describe the name and the level of the resource lock set for the selected vault:az lock list	--resource "/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.KeyVault/vaults/cc-production-app-vault"	--query '[*].{"name":name"level":level}'04				Based on the resource lock configuration the command output should return one of the following: 										If the command output returns the name and the level (i.e. "CanNotDelete" or "ReadOnly") of the resource lock but the lock level is not the required one as shown in the example below where the "ReadOnly" lock is expected the selected Microsoft Azure Key Vault does not have the appropriate resource lock enabled:[  {    "name": "cc-delete-lock"        "level": "CanNotDelete"  }]						If the lock list command output returns an empty array (i.e. []) as shown in the example below the selected Microsoft Azure Key Vault does not have resource locks enabled at all:[]05				Repeat step no. 3 and 4 for other mission critical Azure Key Vault instances available in the current subscription.			06				Repeat steps no. 1 â 5 for each subscription created in your Microsoft Azure cloud account.			,01				Sign in to Azure Management Console.			02				Navigate to All resources blade at https://portal.azure.com/#blade/HubsExtension/BrowseAll to access all your Microsoft Azure resources.			03				Choose the Azure subscription that you want to access from the Subscription filter box.			04				From the Type filter box select Key vault to list all the Key Vault instances provisioned in the selected subscription.			05				Click on the name of the mission critical Key Vault instance that you want to lock down (see Audit section part I to identify the right resource).			06				In the navigation panel under Settings select Locks to access the resource locks configuration page.			07				On the Locks page click +Add to open the Add lock panel and provide the following details:										In the Lock name box type the name of the new resource lock.											Select the appropriate type (level) of lock restriction from the Lock type dropdown list. Use Read-only when you need authorized users to read the resource without being able to update or delete the resource. Select Delete when you need authorized users to read and update the resource without being able to delete the resource.											In the Notes box provide a short description of the lock restriction implemented.											Click Ok to complete the setup process and enable the resource lock.					08				Repeat steps no. 5 â 7 for other mission critical Azure Key Vault instances available in the current subscription.			09				Repeat steps no. 3 â 8 for each subscription created in your Microsoft Azure cloud account.			,01				Run lock create command (Windows/macOS/Linux) using the ID of the mission critical Key Vault instance that you want to lock down as identifier parameter (see Audit section part II to identify the right Azure resource) to enable resource locks for the selected Azure Key Vault instance. For example the following command request locks down a Microsoft Azure Key Vault identified by the ID "/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.KeyVault/vaults/cc-production-app-vault" using the "ReadOnly" type (level) of lock restriction which allows authorized users to read the resource without being able to update or delete the resource:az lock create	--name cc-read-only-lock	--lock-type ReadOnly	--resource "/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.KeyVault/vaults/cc-production-app-vault"02				The command output should return the metadata for the newly created resource lock:{  "id": "/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourcegroups/cloud-shell-storage-westeurope/providers/Microsoft.KeyVault/vaults/cc-production-vault/providers/Microsoft.Authorization/locks/cc-read-only-lock"  "level": "ReadOnly"  "name": "cc-read-only-lock"  "notes": null  "owners": null  "resourceGroup": "cloud-shell-storage-westeurope"  "type": "Microsoft.Authorization/locks"}03				Repeat step no. 1 and 2 for other mission critical Azure Key Vault instances available within the current subscription.			04				Repeat steps no. 1 â 3 for each subscription created in your Microsoft Azure cloud account.			,https://www.cloudconformity.com/knowledge-base/azure/Locks/enable-resource-locks.html
Activity Log All Activities,Monitor,Medium (should be achieved),NA,Ensure that the Log Profile created for your Azure cloud activity log is configured to collect logs for all the control & management activity categories i.e. "Write" "Delete" and "Action" for security and compliance purposes. A Log Profile controls how the activity log is exported and retained within your Microsoft Azure cloud account.,By configuring your account Log Profile to collect logs for "Write" "Delete" and "Action" event categories ensures that all the control and management activities performed on your Azure subscription are exported. These logs can be extremely useful for security and compliance auditing.,To determine if your Azure Log Profile is configured to export logs for all activities perform the following actions:,01				Run monitor log-profiles list command (Windows/macOS/Linux) using custom query filters to get the name of the event categories to export configured for the Log Profile available in the current Azure subscription. If there is no Log Profile currently available follow the steps outlined in this conformity rule to create one. Each Azure subscription has only one Log Profile:az monitor log-profiles list 	--query '[*].categories[]'02				The command output should return the requested configuration information i.e. the activity log event categories to export:[  "Action"]				If the monitor log-profiles list command output does not return an array with all activity log event categories i.e. "Write" "Delete" and "Action" the configuration of the Log Profile created to export activity logs within the selected Microsoft Azure subscription is not compliant.			03				Repeat step no. 1 and 2 for each subscription available in your Microsoft Azure cloud account.			,01				Run monitor log-profiles list command (Windows/macOS/Linux) using custom query filters to get the name of the Log Profile available in the current Azure subscription. Each Microsoft Azure subscription has only one Log Profile:az monitor log-profiles list	--query '[*].name'02				The command output should return the name of the requested Azure Log Profile:[  "cc-activity-log-profile"]03				Run monitor log-profiles update command (Windows/macOS/Linux) using the name of the Azure Log Profile returned at the previous step as identifier parameter to configure the selected profile to export logs for all the activities/operations performed within the current Microsoft Azure subscription i.e. "Write" "Delete" and "Action" (the command does not produce an output):az monitor log-profiles update	--name cc-activity-log-profile	--set categories=["Delete""Write""Action"]04				Repeat steps no. 1 â 3 for each subscription created in your Microsoft Azure cloud account.			,,,https://www.cloudconformity.com/knowledge-base/azure/Monitor/activity-log-all-activities.html
Activity Log All Regions,Monitor,Medium (should be achieved),Monitor-004,Ensure that the Log Profile created for your Azure cloud activity log is configured to export activities from all supported regions including global. A Log Profile controls how the activity log is exported and retained within your Microsoft Azure cloud account.,By configuring your account Log Profile to export the activity logs from all Azure supported regions the logging data recorded for potentially unexpected activities occurring in otherwise unused regions are stored and made available later for incident response investigations and internal audit. Including global region in the Azure Log Profile locations ensures all events from the account control & management console are also exported as many events in the activity log are global events.,To determine if your Log Profile is configured to export activity logs from all Azure regions perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to Azure Monitor blade at https://portal.azure.com/#blade/Microsoft_Azure_Monitoring/AzureMonitoringBrowseBlade/overview. 			03				In the navigation panel select Activity log to access the activity log available in your Azure cloud account.			04				From the Subscription filter box select the Azure account subscription that you want to examine.			05				On the Activity log page click Export to Event Hub to access your Azure Log profile configuration settings. If there is no Log Profile currently available follow the steps outlined in this conformity rule to create and configure one. If there is a Log Profile available check the Regions dropdown list. If the Select All option from the Region dropdown list is not checked the Log Profile created for the selected Azure subscription is not configured to export activities from all supported Azure regions/locations (including global) thus the configuration is not compliant.			06				Repeat step no. 4 and 5 for each subscription created in your Microsoft Azure cloud account.			,01				Run account list-locations command (Windows/macOS/Linux) using custom query filters to get the number of regions supported by the Microsoft Azure cloud:az account list-locations 	--query '[*].displayName' | grep -P '\w+' | wc -l02				The command output should return the current number of Azure cloud supported regions (excluding global):3403				Run monitor log-profiles list command (Windows/macOS/Linux) using custom query filters to get the number of Azure cloud regions configured for your Azure Log Profile. Each Azure subscription has only one Log Profile. If there is no Log Profile currently available follow the steps outlined in this conformity rule to create one:az monitor log-profiles list 	--query '[*].locations' | grep -P '\w+' | wc -l04				The command output should return the number of Azure regions configured for the selected Log Profile + 1 (i.e. global region):5				If the number of regions returned by the monitor log-profiles list command output is less than the number returned at step no. 2 + 1 (global region) e.g. 35 the Log Profile available for the selected Azure subscription is not configured to export activities from all supported Azure regions/locations (including global) therefore the Log Profile configuration is not compliant.			05				Repeat steps no. 1 â 4 for each subscription available in your Microsoft Azure cloud account.			,01				Sign in to Azure Management Console.			02				Navigate to Azure Monitor blade at https://portal.azure.com/#blade/Microsoft_Azure_Monitoring/AzureMonitoringBrowseBlade/overview. 			03				In the navigation panel select Activity log to access the activity log available in your Azure cloud account.			04				From the Subscription filter box select the Azure account subscription that you want to update.			05				On the Activity log page click Export to Event Hub to access your Azure Log Profile configuration settings.			06				On the Export activity log panel click on the Select All option from the Region dropdown list to configure the selected Azure Log Profile to export activities from all Azure supported regions/locations (including global region). Click Save to apply the configuration changes.			07				Repeat steps no. 4 â 6 for each subscription created in your Microsoft Azure cloud account.			,01				Run monitor log-profiles list command (Windows/macOS/Linux) using custom query filters to get the name of the Log Profile available in the current Azure subscription. Each Microsoft Azure subscription has only one Log Profile:az monitor log-profiles list 	--query '[*].name'02				The command output should return the name of the requested Azure Log Profile:[  "cc-azure-log-profile"]03				Run monitor log-profiles update command (Windows/macOS/Linux) using the name of the Azure Log Profile returned at the previous step as identifier parameter to configure the selected Log Profile to capture activity logs for all Microsoft Azure supported regions (including global). To configure your Log Profile to include all supported regions define a comma-separated list of regions for which you would like to collect Azure activity log events. You can view a list of all regions for your subscription using az account list-locations --query '[*].name' command. The following command request does not produce an output:az monitor log-profiles update	--name cc-azure-log-profile	--set locations=["global""eastasia""southeastasia""centralus""eastus""eastus2""westus""northcentralus""southcentralus""northeurope""westeurope""japanwest""japaneast""brazilsouth""australiaeast""australiasoutheast""southindia""centralindia""westindia""canadacentral""canadaeast""uksouth""ukwest""westcentralus""westus2""koreacentral""koreasouth""francecentral""francesouth""australiacentral""australiacentral2""uaecentral""uaenorth""southafricanorth""southafricawest"]04				Repeat steps no. 1 â 3 for each subscription created in your Microsoft Azure cloud account.			,https://www.cloudconformity.com/knowledge-base/azure/Monitor/activity-log-all-regions.html
Activity Log Retention,Monitor,Medium (should be achieved),NA,Ensure that the Log Profile created for your Azure activity log has a retention period of 365 days or more configured for reliability and compliance purposes. A Log Profile controls how the activity log is exported and retained within your Azure cloud account. The retention period represents the number of days to retain activity logs for a Microsoft Azure cloud subscription.,A retention period of 365 days or more should allow you to collect the necessary amount of activity log data useful to find any anomalies and potential security breaches. Because the average time to detect a breach is 210 days your Azure activity log should be retained for 365 days or more in order to give you enough time to respond efficiently to any incidents.,To determine if your Azure Log Profile has a sufficient retention period configured for activity log data perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to Azure Monitor blade at https://portal.azure.com/#blade/Microsoft_Azure_Monitoring/AzureMonitoringBrowseBlade/overview.			03				In the navigation panel select Activity log to access the activity log available in your Azure cloud account.			04				From the Subscription filter box select the Azure account subscription that you want to examine.			05				On the Activity log page click Export to Event Hub to access your Azure Log profile configuration settings. If there is no Log Profile currently available follow the steps outlined in this conformity rule to create and configure one. If there is a Log Profile available check the value set for the Retention (days) setting. If this value is less than 365 and different from 0 (retain data forever) the Log Profile created for the selected Azure subscription does not have a sufficient retention period configured.			06				Repeat step no. 4 and 5 for each subscription created in your Microsoft Azure cloud account.			,01				Run monitor log-profiles list command (Windows/macOS/Linux) using custom query filters to get the retention period configured for the Log Profile available in the current Azure subscription. If there is no Log Profile currently available follow the steps outlined in this conformity rule to create one. Each Azure subscription has only one Log Profile:az monitor log-profiles list   --query '[*].retentionPolicy'02				The command output should return the requested configuration information (i.e. the number of days to retain activity log data):90				If the number (days) returned by the monitor log-profiles list command output is less than 365 and different from 0 (unlimited retention) as shown in the example above the verified Azure Log Profile does not have a sufficient activity log data retention period configured.			03				Repeat step no. 1 and 2 for each subscription available in your Microsoft Azure cloud account.			,01				Sign in to Azure Management Console.			02				Navigate to Azure Monitor blade at https://portal.azure.com/#blade/Microsoft_Azure_Monitoring/AzureMonitoringBrowseBlade/overview.			03				In the navigation panel select Activity log to access the activity log available in your Azure cloud account.			04				From the Subscription filter box select the Azure account subscription that you want to update.			05				On the Activity log page click Export to Event Hub to access your Azure Log Profile configuration settings.			06				On the Export activity log panel set the number of days to retain activity log data for the selected Azure subscription in the Retention (days) box to 365 or 0 or use the slider control to set the right value. A setting of 0 (zero) days retains the activity logs forever. Click Save to apply the configuration changes.			07				Repeat steps no. 4 â 6 for each subscription created in your Microsoft Azure cloud account.			,01				Run monitor log-profiles update command (Windows/macOS/Linux) using the name of the Azure Log Profile that you want to reconfigure as identifier parameter to extend the retention period for activity log data recorded for the selected Azure subscription. For compliance the activity log data retention period can be set to 365 and 0 (unlimited retention) days. For example the following command request sets a retention period of 365 days for the activity log recorded within the current Microsoft Azure subscription (the command does not produce an output):az monitor log-profiles update	--name cc-activity-log-profile	--set retentionPolicy.days=36502				Repeat step no. 1 for each subscription created in your Microsoft Azure cloud account.			,https://www.cloudconformity.com/knowledge-base/azure/Monitor/activity-log-retention.html
Azure Activity Log Profile in Use,Monitor,Medium (should be achieved),Monitor-001,Ensure there is a Log Profile created for each Microsoft Azure account subscription for exporting activity logs. The Azure activity log captures all management activities performed on a subscription. By default the Azure Portal retains activity logs only for 90 days. To make sure that all activity events recorded for your subscription are retained for a longer duration you can create and configure a Log Profile to archive the activity log to an Azure storage account or stream it to an Event Hub. Each Microsoft Azure subscription can have only one Log Profile.,A Log Profile controls how and where an Azure activity log is exported. A well configured Log Profile should allow your activity logs to be exported and stored for a longer period of time in order to be able to perform a better analysis of the activity recorded within your Azure subscription useful later for security and compliance auditing.,To determine if there is a Log Profile created for each Microsoft Azure subscription perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to Azure Monitor blade at https://portal.azure.com/#blade/Microsoft_Azure_Monitoring/AzureMonitoringBrowseBlade/overview.			03				In the navigation panel select Activity log to access the activity log available in your Azure cloud account.			04				From the Subscription filter box select the Azure account subscription that you want to examine.			05				On the Activity log page check for any Log Profiles configured for the selected subscription. If there is no Log Profile currently available the selected Microsoft Azure subscription does not have a Log Profile configured.			06				Repeat step no. 4 and 5 for each subscription created in your Microsoft Azure cloud account.			,01				Run monitor log-profiles list command (Windows/macOS/Linux) using custom query filters to list the name of the Log Profile created for the current Azure subscription:az monitor log-profiles list --query '[*].name'02				The command output should return the requested Log Profile identifier:[]				If the monitor log-profiles list command output returns an empty array as shown in the example above there is no Log Profile created to export activity logs within the selected Microsoft Azure subscription.			03				Repeat step no. 1 and 2 for each subscription available in your Microsoft Azure cloud account.			,01				Sign in to Azure Management Console.			02				Navigate to Azure Monitor blade at https://portal.azure.com/#blade/Microsoft_Azure_Monitoring/AzureMonitoringBrowseBlade/overview.			03				In the navigation panel select Activity log to access the activity log available within your Azure account.			04				From the Subscription filter box select the Azure account subscription where you want to create the new Log Profile.			05        On the Activity log page click on the purple banner to launch the Export activity log setup page (Azure Management Console legacy experience).      06				On the Diagnostic settings page click Diagnostic settings. Diagnostic settings are used to configure the streaming export of the Azure subscription logs and metrics to the destination of your choice.      07        On the Export activity log panel perform the following actions:        Select the appropriate subscription from the Subscription dropdown list.From Regions dropdown list select the regions with the events to export. It is recommended to select all regions to make sure that you export all the key events recorded as the Azure activity log is a global (non-regional) log and so most events donât have a region associated with them.Select Export to a storage account if you want to write the activity log to an Azure storage account. Click Select a storage account and choose the Azure storage account that will store your log data. Enter the number of days that you need to retain your activity log data in the Retention day(s) box or use the slider control to set the appropriate retention period. A setting of 0 (zero) days retains the logs forever.Select Export to an event hub if you want to write the activity log to an Azure Event Hub. Click Select a service bus namespace and choose the event hub namespace in which you would like an event hub to be created for streaming your activity log data.Click Save to complete the setup process for your new Azure Log Profile and return to the Activity log blade.08				Repeat steps no. 4 â 7 for each subscription created in your Microsoft Azure cloud account.			,01				Run monitor log-profiles create command (Windows/macOS/Linux) to create a new Log Profile for the selected Microsoft Azure subscription in order to archive all Azure activity logs to a storage account or stream them to an Azure Event Hub. For example the following command request creates an Azure Log Profile named "cc-log-profile" that writes Delete Write and Action event-type activity logs to an Azure storage account identified by the ID "/subscriptions/abcdabcd-abcd-abcd-abcd-abcdabcdabcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Storage/storageAccounts/abcd1234abcd1234abcd" available within West Europe region (the command does not produce an output):az monitor log-profiles create	--name cc-log-profile	--categories "Delete" "Write" "Action"	--days 365	--enabled true	--location "westeurope"	--locations "westeurope"	--storage-account-id "/subscriptions/abcdabcd-abcd-abcd-abcd-abcdabcdabcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Storage/storageAccounts/abcd1234abcd1234abcd"02				Repeat step no. 1 for each subscription created in your Microsoft Azure cloud account.			,https://www.cloudconformity.com/knowledge-base/azure/Monitor/log-profiles-exist.html
Check for Publicly Accessible Activity Log Storage Container,Monitor,High (not acceptable risk),NA,Ensure that the Microsoft Azure storage container where the exported activity log files are saved is not publicly accessible from the Internet in order to avoid exposing sensitive data and minimize security risks.,Allowing public access to your Azure cloud activity logs can increase the attack surface and the opportunity for malicious activity as attackers can identify weaknesses in your Azure account's use or configuration when they are able to access the activity log container anonymously.,To determine if the storage container holding the activity logs is publicly accessible perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to Azure Monitor blade at https://portal.azure.com/#blade/Microsoft_Azure_Monitoring/AzureMonitoringBrowseBlade/overview. 			03				In the navigation panel select Activity log to access the activity log available in your Azure cloud account.			04				From the Subscription filter box select the Azure account subscription that you want to examine.			05				On the Activity log page click Export to Event Hub to access your Azure Log profile configuration settings.			06				On the Export activity log panel click on the Storage account tab and copy the identifier of the storage container that holds the activity logs available in the Storage account box. 			07				Navigate to Azure Storage accounts blade at https://portal.azure.com/#blade/HubsExtension/BrowseResourceBlade/resourceType/Microsoft.Storage%2FStorageAccounts and paste the storage account ID copied at step no. 6 into the Filter by name box.			08				Click on the name of the Azure storage account returned by the filtering process.			09				In the navigation panel under Blob service click Blobs to access the blob containers provisioned in the selected storage account.			10				On the Blobs page choose the storage container named insights-operational-logs and check the configuration value available in the PUBLIC ACCESS LEVEL column. If the configuration value is set to Container the Microsoft Azure storage container that contains your activity logs is publicly accessible hence your Azure activity log data can be read using anonymous requests.			11				Repeat steps no. 4 â 10 for each subscription created in your Microsoft Azure cloud account.			,01				Run monitor log-profiles list command (Windows/macOS/Linux) using custom query filters to get the identifier (ID) of the Azure storage account configured to store activity logs within the current Azure subscription:az monitor log-profiles list    --query '[*].storageAccountId'02				The command output should return the ID of the associated Azure storage account:[  "abcd1234abcd1234abcd1234"]03				Run storage container show command (Windows/macOS/Linux) using the ID of the storage account returned at the previous step and the name of the blob container that stores the activity log files as identifier parameters to expose the public access level set for the selected container:az storage container show	--account-name abcd1234abcd1234abcd1234	--name insights-operational-logs	--query 'properties.publicAccess'04				The command output should return the name of the configured public access level. There are three levels of public access: Private (no anonymous access) Blob (anonymous read access for blobs only) and Container (anonymous read access for containers and blobs):"container"				If the storage container show command output returns "container" as shown in the example above the Microsoft Azure storage container that holds your activity log files is publicly accessible therefore your Azure activity log data can be read by anyone using anonymous requests.			05				Repeat steps no. 1 â 4 for each subscription available in your Microsoft Azure cloud account.			,01				Sign in to Azure Management Console.			02				Navigate to Azure Storage accounts blade at https://portal.azure.com/#blade/HubsExtension/BrowseResourceBlade/resourceType/Microsoft.Storage%2FStorageAccounts. 			03				Click on the name of the Azure storage account associated with your Log Profile (see Audit section part I to identify the right account).			04				In the navigation panel under Blob service click Blobs to access the blob containers provisioned for the selected storage account.			05				On the Blobs page select the storage container that you want to reconfigure i.e. insights-operational-logs container then click Change access level button from the blade top menu.			06				On the Change access level configuration panel select Private (no anonymous access) option from the Public access level dropdown list to disable anonymous access for the selected blob container. Click Ok to apply the configuration change. Setting the container access policy to Private (no anonymous access) will remove access from the container for everyone except the owners of the storage account.			07				Repeat steps no. 3 â 6 for each subscription created in your Microsoft Azure cloud account.			,01				Run storage container set-permission command (Windows/macOS/Linux) using the name of the storage container that contains your activity logs (i.e. insights-operational-logs) as identifier parameter to disable anonymous access to the selected blob container by setting the "Public access level" configuration option to Private (no anonymous access). Setting the container access policy to Private (no anonymous access) will remove access from the container for everyone except the owners of the associated storage account: az storage container set-permission	--account-name abcd1234abcd1234abcd1234	--name insights-operational-logs	--public-access off02				Repeat step no. 1 for each subscription created within your Microsoft Azure cloud account.			,https://www.cloudconformity.com/knowledge-base/azure/Monitor/check-for-publicly-accessible-activity-log-storage-container.html
Use BYOK for Activity Log Storage Container Encryption,Monitor,Medium (should be achieved),NA,Ensure that your Microsoft Azure activity log storage container is encrypted with BYOK (Bring Your Own Key) in order to protect your activity log data at rest with a key from your own Azure key vault. By default activity log data is encrypted using Microsoft managed keys. Cloud Conformity strongly recommends that you bring your own key for encrypting all activity log data stored on Azure storage blob containers.,Bring Your Own Key (BYOK) support for the activity log storage container encryption allows user control of the encryption keys and restricts who can access these keys and when. This provides additional confidentiality controls on your activity log data as the user that requires access to this data must have 1) read permission on the corresponding storage account and 2) must be granted decrypt permission by the customer-managed key (BYOK). With BYOK the container encryption key is protected by an asymmetric key stored in the Azure Key Vault - a cloud-based external key management system developed by Microsoft Azure. The asymmetric key is set at the storage account level and inherited by all containers created on that storage account.,To determine if BYOK is used for your Azure activity log storage container encryption perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to Azure Monitor blade at https://portal.azure.com/#blade/Microsoft_Azure_Monitoring/AzureMonitoringBrowseBlade/overview. 			03				In the navigation panel select Activity log to access the activity log available in your Azure cloud account.			04				From the Subscription filter box select the Azure account subscription that you want to examine.			05				On the Activity log page click Export to Event Hub to access your Azure Log profile configuration settings.			06				On the Export activity log panel click on the Storage account tab and copy the identifier of the storage container that contains the Azure cloud activity logs available in the Storage account box. 			07				Navigate to Azure Storage accounts blade at https://portal.azure.com/#blade/HubsExtension/BrowseResourceBlade/resourceType/Microsoft.Storage%2FStorageAccounts and paste the storage account ID copied at step no. 6 into the Filter by name box.			08				Click on the name of the Azure storage account returned by the portal filtering process.			09				In the navigation panel under Settings click Encryption to access the encryption configuration page for the selected storage account.			10				On the Encryption page verify the Use your own key setting configuration. If Use your own key setting checkbox is not checked the Microsoft Azure storage container that holds your activity log files is encrypted using a service-managed key (default key) instead of a customer-managed key (also known as Bring Your Own Key - BYOK).			11				Repeat steps no. 4 â 10 for each subscription created in your Microsoft Azure cloud account.			,01				Run monitor log-profiles list command (Windows/macOS/Linux) using custom query filters to get the ID of the Azure storage account configured to store activity logs within the current Azure subscription:az monitor log-profiles list   --query '[*].storageAccountId'02				The command output should return the ID of the associated Azure storage account:[  "abcd1234abcd1234abcd1234"]03				Run storage account show command (Windows/macOS/Linux) using the ID of the storage account returned at the previous step as identifier parameter and custom query filters to expose the type of the encryption key used by Azure Transparent Data Encryption (TDE) for the selected storage account:az storage account show	--name abcd1234abcd1234abcd1234	--query 'encryption.keySource'04				The command output should return the type of the encryption key used for the selected Azure storage account ("Microsoft.Storage" for a service-managed key or "Microsoft.Keyvault" for a customer-managed key â BYOK):"Microsoft.Storage"				If the storage account show command output returns "Microsoft.Storage" as shown in the example above the Microsoft Azure storage container that contains your activity log files is encrypted using a service-managed key instead of a customer-managed key (i.e. Bring Your Own Key â BYOK).			05				Repeat steps no. 1 â 4 for each subscription available in your Microsoft Azure cloud account.			,01				Sign in to Azure Management Console.			02				Navigate to Azure Storage accounts blade at https://portal.azure.com/#blade/HubsExtension/BrowseResourceBlade/resourceType/Microsoft.Storage%2FStorageAccounts. 			03				Click on the name of the storage account associated with your Azure Log Profile (see Audit section part I to identify the right account).			04				In the navigation panel under Settings click Encryption to access the encryption configuration page for the selected storage account.			05				On the Encryption page perform the following actions:										Select Use your own key checkbox to initiate the customer-managed key configuration process. 											Under Encryption key choose Enter key URI and just provide the customer-managed key URI in the Key URI box or choose Select from Key Vault option to select the encryption key from an Azure Key Vault and continue with the configuration process with the next steps.											Click on the Key Vault link and select the encryption key vault that holds the customer-managed key.											Click on the Encryption key link and select an existing customer-managed key (BYOK) that you want to use as TDE protector for the selected Azure storage account. If you need to create a new encryption key click on the Create a new key button and use the default configuration settings provided by Microsoft Azure to create a new customer-managed key.											Click Save to apply the new encryption configuration changes.					06				Repeat steps no. 3 â 5 for each subscription created in your Microsoft Azure cloud account.			07				Repeat steps no. 3 â 6 for each subscription created in your Microsoft Azure cloud account.			,01				Run keyvault create command (Windows/macOS/Linux) to create the necessary Microsoft Azure Key Vault that will store the new customer-managed encryption key (BYOK):az keyvault create	--name cc-byok-key-vault	--resource-group cloud-shell-storage-westeurope	--location westeurope	--enable-soft-delete true	--enable-purge-protection true02				The command output should return the configuration metadata for the newly created Azure Key Vault:{  "id": "/subscriptions/abcdabcd-abcd-abcd-abcd-abcdabcdabcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.KeyVault/vaults/cc-byok-key-vault"  "location": "westeurope"  "name": "cc-byok-key-vault"  "properties": {    "createMode": null    "enablePurgeProtection": true    "enableSoftDelete": true    "enabledForDeployment": false    "enabledForDiskEncryption": null     ...     "enabledForTemplateDeployment": null    "networkAcls": null    "provisioningState": "Succeeded"    "sku": {      "name": "standard"    }    "vaultUri": "https://cc-byok-key-vault.vault.azure.net/"  }  "resourceGroup": "cloud-shell-storage-westeurope"  "tags": {}  "type": "Microsoft.KeyVault/vaults"}03				Run keyvault key create command (Windows/macOS/Linux) to create a new customer-managed encryption key (also known as Bring Your Own Key â BYOK) within the Azure Key Vault created at the previous step:az keyvault key create	--name cc-byok-key	--vault-name cc-byok-key-vault	--kty RSA	--ops encrypt decrypt wrapKey unwrapKey sign verify	--size 204804				The command output should return the metadata for the new customer-managed key:{  "attributes": {    "created": "2019-08-11T16:58:06+00:00"    "enabled": true    "expires": null    "notBefore": null    "recoveryLevel": "Recoverable"    "updated": "2019-08-11T16:58:06+00:00"  }  "key": {    "crv": null    "d": null     ...     "dp": null    "dq": null    "e": "AQAB"    "k": null    "p": null    "q": null    "qi": null    "t": null    "x": null    "y": null  }  "managed": null  "tags": null}05				Run keyvault set-policy command (Windows/macOS/Linux) to update the security policy of the Azure Key Vault created earlier in the process with the appropriate permissions:az keyvault set-policy	--name cc-byok-key-vault	--object-id 1234abcd-1234-abcd-1234-abcd1234abcd	--key-permissions get wrapkey unwrapkey06				The command output should return the metadata for the updated Microsoft Azure Key Vault:{  "id": "/subscriptions/abcdabcd-abcd-abcd-abcd-abcdabcdabcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.KeyVault/vaults/cc-byok-key-vault"  "location": "westeurope"  "name": "cc-byok-key-vault"  "properties": {      {        "applicationId": null        "permissions": {          "certificates": null          "keys": [            "get"            "wrapKey"            "unwrapKey"          ]          "secrets": null          "storage": null        }      }    ]     ...     "createMode": null    "enablePurgeProtection": true    "enableSoftDelete": true    "enabledForDeployment": false    "enabledForDiskEncryption": null    "enabledForTemplateDeployment": null    "networkAcls": null    "provisioningState": "Succeeded"    "sku": {      "name": "standard"    }    "vaultUri": "https://cc-byok-key-vault.vault.azure.net/"  }  "resourceGroup": "cloud-shell-storage-westeurope"  "tags": {}  "type": "Microsoft.KeyVault/vaults"}07				Run storage account update command (Windows/macOS/Linux) using the ID of the Azure storage account that you want to reconfigure as identifier parameter (see Audit section part II to identify the right resource) to configure Transparent Data Encryption (TDE) feature to use the customer-managed key (Bring Your Own Key - BYOK) created at the previous steps for the selected storage account and all the blob containers available inside the account:az storage account update	--name abcd1234abcd1234abcd1234	--resource-group cloud-shell-storage-westeurope	--encryption-key-source=Microsoft.Keyvault	--encryption-key-vault https://cc-byok-key-vault.vault.azure.net/	--encryption-key-name cc-byok-key	--encryption-key-version abcdabcd12341234abcdabcd12341234	--encryption-services blob08				The command output should return the TDEâs configuration metadata for the selected storage account:{  "accessTier": null  "azureFilesIdentityBasedAuthentication": null  "creationTime": "2019-07-25T08:47:35.787368+00:00"  "customDomain": null  "enableHttpsTrafficOnly": false  "encryption": {    "keySource": "Microsoft.Keyvault"    "keyVaultProperties": {      "keyName": "cc-byok-key"      "keyVaultUri": "https://cc-byok-key-vault.vault.azure.net/"      "keyVersion": "abcdabcd12341234abcdabcd12341234"    }    "services": {      "blob": {        "enabled": true        "lastEnabledTime": "2019-07-25T08:47:35.927993+00:00"      }      "file": {        "enabled": true        "lastEnabledTime": "2019-07-25T08:47:35.927993+00:00"      }    }  }   ...   "primaryLocation": "westeurope"  "provisioningState": "Succeeded"  "resourceGroup": "cloud-shell-storage-westeurope"  "secondaryEndpoints": null  "secondaryLocation": null  "sku": {    "capabilities": null    "kind": null    "locations": null    "name": "Standard_LRS"    "resourceType": null    "restrictions": null    "tier": "Standard"  }  "statusOfPrimary": "available"  "statusOfSecondary": null  "tags": {}  "type": "Microsoft.Storage/storageAccounts"}09				Repeat steps no. 1 â 8 for each subscription created within your Microsoft Azure cloud account.			,https://www.cloudconformity.com/knowledge-base/azure/Monitor/use-byok-for-activity-log-storage-container-encryption.html
Enable In-Transit Encryption for MySQL Servers,MySQL,High (not acceptable risk),NA,Ensure that Microsoft Azure MySQL server data is encrypted in transit in order to meet security and compliance requirements. In-transit data encryption helps prevent unauthorized users from reading sensitive data available on your MySQL databases.,When working with production data it is strongly recommended to enable in-transit encryption by enforcing Secure Sockets Layer (SSL) connections between MySQL database servers and client applications. This will protect your data against Man-In-the-Middle (MITM) attacks and fulfill compliance requirements for in-transit encryption within your organization. For example a compliance requirement is to protect sensitive data that could potentially identify a specific individual such as Personally Identifiable Information (PII) usually used in Financial Services Healthcare and Telecommunications sectors.,To determine in-transit encryption configuration for your Azure MySQL database servers perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to All resources blade at https://portal.azure.com/#blade/HubsExtension/BrowseAll to access all your Microsoft Azure resources.			03				From the Type filter box select Azure Database for MySQL server to list only the MySQL servers available in your Azure account.			04				Click on the name of the MySQL database server that you want to examine.			05				In the navigation panel under Settings select Connection security to access the connection security settings for the selected MySQL server.			06				On the Connection security configuration page in the SSL settings section check the Enforce SSL connection status. If the setting status is set to DISABLED in-transit encryption is not enabled for the selected Microsoft Azure MySQL server.			07				Repeat steps no. 4 â 6 for each MySQL database server available in the current Azure subscription.			08				Repeat steps no. 3 â 7 for each subscription created in your Microsoft Azure cloud account.			,01				Run mysql server list command (Windows/macOS/Linux) using custom query filters to list the identifier for each MySQL server provisioned in the current Azure subscription:az mysql server list   --query '[*].id'02				The command output should return the requested MySQL server identifiers:["/subscriptions/abcdabcd-abcd-1234-abcd-abcdabcdabcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.DBforMySQL/servers/cc-mysql-db-server""/subscriptions/abcdabcd-abcd-1234-abcd-abcdabcdabcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.DBforMySQL/servers/cc-development-server""/subscriptions/abcdabcd-abcd-1234-abcd-abcdabcdabcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.DBforMySQL/servers/cc-wordpress-server"]03				Run mysql server show command (Windows/macOS/Linux) using the ID of the Azure MySQL server that you want to examine as identifier parameter and custom query filters to get the "Enforce SSL connection" setting status for the selected server:az mysql server show	--ids /subscriptions/abcdabcd-abcd-1234-abcd-abcdabcdabcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.DBforMySQL/servers/cc-mysql-db-server	--query sslEnforcement04				The command output should return the requested configuration setting status:"Disabled"				If the mysql server show command output returns "Disabled" as shown in the example above the encryption in transit using Secure Sockets Layer (SSL) is not enabled for the selected Microsoft Azure MySQL database server.			05				Repeat step no. 3 and 4 for each Azure MySQL server provisioned in the selected subscription.			06				Repeat steps no. 1 â 5 for each subscription available within your Microsoft Azure cloud account.			,01				Sign in to Azure Management Console.			02				Navigate to All resources blade at https://portal.azure.com/#blade/HubsExtension/BrowseAll to access all your Microsoft Azure resources.			03				From the Type filter box select Azure Database for MySQL server to list only the MySQL servers available in your Azure account.			04				Click on the name of the MySQL server that you want to reconfigure (see Audit section part I to identify the right Azure resource).			05				In the navigation panel under Settings select Connection security to access the connection security settings for the selected MySQL database server.			06				On the Connection security configuration page in the SSL settings section select ENABLED next to Enforce SSL connection setting to enable in-transit encryption for the selected Azure MySQL database server. 			07				Click Save to apply the configuration changes.			08				Repeat steps no. 4 â 7 for each MySQL database server available within the selected subscription.			09				Repeat steps no. 3 â 8 for each subscription created in your Microsoft Azure cloud account.			,01				Run mysql server update command (Windows/macOS/Linux) using the ID of the Azure MySQL server that you want to reconfigure as identifier parameter (see Audit section part II to identify the right MySQL resource) to enable in-transit encryption for the selected database server by setting the --ssl-enforcement parameter to Enabled:az mysql server update	--ids /subscriptions/abcdabcd-abcd-1234-abcd-abcdabcdabcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.DBforMySQL/servers/cc-mysql-db-server	--ssl-enforcement Enabled02				The command output should return the metadata for the reconfigured Azure MySQL server:{  "earliestRestoreDate": "2019-07-25T09:37:29.653000+00:00"  "fullyQualifiedDomainName": "cc-mysql-db-server.mysql.database.azure.com"  "location": "westeurope"  "masterServerId": ""  "name": "cc-mysql-db-server"  "resourceGroup": "cloud-shell-storage-westeurope"   ...   "sslEnforcement": "Enabled"  "storageProfile": {    "backupRetentionDays": 30    "geoRedundantBackup": "Disabled"    "storageAutoGrow": "Disabled"    "storageAutogrow": null  }  "type": "Microsoft.DBforMySQL/servers"  "userVisibleState": "Ready"  "version": "5.7"}03				Repeat step no. 1 and 2 for each MySQL database server available in the selected subscription.			04				Repeat steps no. 1 â 3 for each subscription created within your Microsoft Azure cloud account.			,https://www.cloudconformity.com/knowledge-base/azure/MySQL/in-transit-encryption.html
Check for NSG Flow Log Retention Period,Network,Medium (should be achieved),Network-004,Ensure that your Microsoft Azure Network Security Groups (NSGs) have a sufficient flow log retention period i.e. greater than or equal to 90 days configured for reliability and compliance purposes. The retention period represents the number of days to retain flow log data recorded for your network security groups. Azure Network Security Group (NSG) flow log is a feature of the Network Watcher service that allows you to view information about inbound and outbound IP traffic through an NSG.,Flow logs capture information about IP traffic flowing in and out of Azure Network Security Groups. A flow log data retention period of 90 days or more should allow you to collect the necessary amount of logging data required to check for anomalies and provide details about any potential security breach.,To determine if the flow log retention period configured for your Azure NSGs is greater than or equal to 90 days perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to Network Watcher blade at https://portal.azure.com/#blade/Microsoft_Azure_Network/NetworkWatcherMenuBlade/overview.			03				In the navigation panel under Logs click NSG flow logs to access all Azure NSG flow logs.			04				On the NSG flow logs page choose the Azure subscription that you want to examine from the Subscription dropdown list.			05				Click on the active Network Security Group flow log that you want to examine to access the flow log configuration details. An active NSG flow log has the STATUS set to Enabled.			06				On the selected NSG flow log settings page check the Retention (days) setting value. If this value (days) is less than 90 and different from 0 (unlimited retention) the flow log associated with the selected Azure Network Security Group does not have a sufficient log data retention period configured.			07				Repeat steps no. 5 and 6 for each active NSG flow log available in the current subscription.			08				Repeat steps no. 4 â 7 for each subscription created in your Microsoft Azure cloud account.			,01				Run network nsg list command (Windows/macOS/Linux) using custom query filters to list the names of all network security groups and their associated resource groups available in the current Azure subscription:az network nsg list	--output table	--query '[*].{name:name resourceGroup:resourceGroup}'02				The command output should return a table with requested resource information:Name                ResourceGroup-----------------   ------------------------------cc-production-nsg   cloud-shell-storage-westeuropecc-sec-ops-nsg      cloud-shell-storage-westeurope03				Run network watcher flow-log show command (Windows/macOS/Linux) command using the name of the network security group that you want to examine as identifier parameter and custom query filters to get the status and the retention period configured for the flow log associated with the selected Azure NSG:az network watcher flow-log show	--nsg cc-production-nsg	--resource-group cloud-shell-storage-westeurope	--query 'retentionPolicy'04				The command output should return the feature status and the number of days to retain flow log data:{  "enabled": true  "days": 7}				If "enabled" is set to true and the "days" number returned by the network watcher flow-log show command output is less than 90 and different from 0 (unlimited retention) as shown in the example above the selected Network Security Group (NSG) flow log does not have a sufficient log data retention period currently configured.			05				Repeat step no. 3 and 4 for each NSG flow log enabled within the current subscription.			06				Repeat steps no. 1 â 5 for each subscription available in your Microsoft Azure cloud account.			,01				Sign in to Azure Management Console.			02				Navigate to Network Watcher blade at https://portal.azure.com/#blade/Microsoft_Azure_Network/NetworkWatcherMenuBlade/overview.			03				In the navigation panel under Logs click NSG flow logs to access all Azure NSG flow logs.			04				On the NSG flow logs page choose the Azure subscription that you want to access from the Subscription dropdown list.			05				Click on the active Network Security Group flow log that you want to reconfigure (see Audit section part I to identify the right log). An active Network Security Group flow log has the STATUS set to Enabled.			06				On the selected flow log settings page set the number of days to retain flow log data for the specified NSG in the Retention (Days) box to 90 days or more or use the slider control to set the right value. Click Save to apply the retention period changes.			07				Repeat steps no. 5 and 6 for each active NSG flow log that you want to reconfigure available in the current subscription.			08				Repeat steps no. 4 â 7 for each subscription created in your Microsoft Azure cloud account.			,01				Run network watcher flow-log configure command (Windows/macOS/Linux) using the name of the associated NSG and the name of the required resource group as identifier parameter (see Audit section part II to identify the right NSG resource) to extend the retention period for flow log data recorded for the selected Azure Network Security Group. For example the following command request sets a retention period of 140 days for any flow logs recorded under the specified NSG:az network watcher flow-log configure	--nsg cc-production-nsg	--resource-group cloud-shell-storage-westeurope	--enabled true	--retention 120	--storage-account abcdabcdabcdabcdabcd	--workspace cc-log-analytics-workspace02				The command output should return the modified NSG flow log configuration metadata:{  "enabled": true  "flowAnalyticsConfiguration": {    "networkWatcherFlowAnalyticsConfiguration": {      "enabled": true      "workspaceRegion": "westeurope"      "workspaceResourceId": "/subscriptions/abcd1234-abcd-1234-abcd-1234abcd1234/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.OperationalInsights/workspaces/cc-log-analytics-workspace"    }  }  ...  "retentionPolicy": {    "days": 140    "enabled": true  }  "storageId": "/subscriptions/abcd1234-abcd-1234-abcd-1234abcd1234/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Storage/storageAccounts/abcdabcdabcdabcdabcd"  "targetResourceId": "/subscriptions/abcd1234-abcd-1234-abcd-1234abcd1234/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Network/networkSecurityGroups/cc-production-nsg"}03				Repeat step no. 1 and 2 for each active NSG flow log that you want to reconfigure available in the selected subscription.			04				Repeat steps no. 1 â 3 for each subscription created within your Microsoft Azure cloud account.			,https://www.cloudconformity.com/knowledge-base/azure/Network/sufficient-nsg-flow-log-retention-period.html
Check for Unrestricted FTP Access,Network,Very High (act immediately),Network-005,Ensure that Microsoft Azure network security groups (NSGs) do not allow unrestricted access on TCP ports 20 and 21 in order to protect against attackers that use brute force methods to gain access to Azure virtual machines associated with these NSGs. TCP ports 20 and 21 are used for data transfer and communication by the File Transfer Protocol (FTP) client-server applications.,Allowing unrestricted FTP access to your Azure virtual machines (VMs) via network security groups (NSGs) can increase opportunities for malicious activities such as brute-force attacks FTP bounce attacks spoofing and packet capture attacks.,To determine if your Azure network security groups allow unrestricted access on TCP ports 20 and 21 (FTP) perform the following actions,01				Sign in to Azure Management Console.			02				Navigate to All resources blade at https://portal.azure.com/#blade/HubsExtension/BrowseAll to access all your Microsoft Azure resources.			03				From the Subscription filter box select the Azure account subscription that you want to examine.			04				From the Type filter box select Network security group to list only the security groups available in the selected Azure subscription.			05				Click on the name of the network security group that you want to examine.			06				In the navigation panel under Settings select Inbound security rules to access the list with the inbound rules defined for the selected security group.			07        On the Inbound security rules page verify the value available in the SOURCE column for any inbound rules with the PORT set to 20 or 21 (FTP) and the PROTOCOL set to TCP. If one or more rules have the SOURCE set to Any (i.e. 0.0.0.0/0) the selected network security group allows unrestricted traffic on TCP port 20/21 therefore the FTP access to the associated Microsoft Azure virtual machine(s) is not secured.			08				Repeat steps no. 5 â 7 for each network security group available in the current Azure subscription.			09				Repeat steps no. 3 â 8 for each subscription created in your Microsoft Azure cloud account.			,01				Run network nsg list command (Windows/macOS/Linux) using custom query filters to list the names of all network security groups (and the name of their associated resource groups) available in the current Azure subscription:az network nsg list	--output table	--query '[*].{name:name resourceGroup:resourceGroup}'02				The command output should return a table with requested resource information:Name                       ResourceGroup------------------------   ------------------------------cc-production-vm-nsg       cloud-shell-storage-westeuropecc-project5-server-nsg     cloud-shell-storage-westeurope03				Run az network nsg rule list command (Windows/macOS/Linux) using the name of the Azure network security group that you want to examine and its associated resource group as identifier parameters to describe the FTP inbound rule defined for the selected network security group using custom query filters:az network nsg rule list	--nsg-name cc-production-vm-nsg	--resource-group cloud-shell-storage-westeurope	--query "[?direction=='Inbound' && access=='Allow' && protocol=='TCP' && (destinationPortRange=='20' || destinationPortRange=='21')]"04				The command output should return the requested security group rule metadata or an empty array such as [] if there is no FTP rule for TCP port 20 or 21 defined:[  {    "access": "Allow"    "description": null    "destinationAddressPrefix": "*"    "destinationAddressPrefixes": []    "destinationApplicationSecurityGroups": null    "destinationPortRange": "21"    "destinationPortRanges": []    "direction": "Inbound"    "etag": "W/\"abcdabcd-1234-abcd-1234-abcdabcdabcd\""    "id": "/subscriptions/abcd1234-abcd-1234-abcd-1234abcd1234/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Network/networkSecurityGroups/cc-production-nsg/securityRules/FTP"    "name": "FTP"    "priority": 100    "protocol": "TCP"    "provisioningState": "Succeeded"    "resourceGroup": "cloud-shell-storage-westeurope"    "sourceAddressPrefix": "*"    "sourceAddressPrefixes": []    "sourceApplicationSecurityGroups": null    "sourcePortRange": "*"    "sourcePortRanges": []    "type": "Microsoft.Network/networkSecurityGroups/securityRules"  }]				If the "sourceAddressPrefix" configuration attribute value is set to "*" "internet" or "any" as shown in the output example above the selected network security group allows unrestricted traffic on TCP port 20/21 hence the Secure Shell (FTP) access to any associated Microsoft Azure virtual machine(s) is not currently secured.			05				Repeat step no. 3 and 4 for each Azure network security group created in the selected subscription.			06				Repeat steps no. 1 â 5 for each subscription available within your Microsoft Azure cloud account.			,01				Sign in to Azure Management Console.			02				Navigate to All resources blade at https://portal.azure.com/#blade/HubsExtension/BrowseAll to access all your Microsoft Azure resources.			03				From the Subscription filter box select the Azure account subscription that you want to access.			04				From the Type filter box select Network security group to list only the security groups available in the selected Azure subscription.			05				Click on the name of the network security group that you want to reconfigure.			06				In the navigation panel under Settings select Inbound security rules to access the list with the inbound rules defined for the selected security group.			07				On the Inbound security rules page click on the noncompliant FTP security group rule that you want to reconfigure (see Audit section part I to identify the right NSG rule).			08				On the selected security group rule configuration panel perform the following:										Select IP Addresses from the Source dropdown list to allow inbound traffic on TCP port 20/21 from specified IP addresses only.											For Source IP addresses/CIDR ranges provide the source IP address IP addresses or IP address ranges that will be allowed to access the virtual machines associated with the selected network security group (NSG). You can specify a single value or comma-separated list of multiple values. An example of multiple values is 10.0.1.5/32 10.0.1.6/32.					            Make sure that Action is set to Allow and leave the rest of the NSG configuration settings unchanged.          						Click Save to apply the configuration changes.					09				Repeat steps no. 5 â 8 for each network security group that allows unrestricted inbound access on TCP port 20 or 21 (FTP) available in the current Azure subscription.			10				Repeat steps no. 3 â 9 for each subscription created in your Microsoft Azure cloud account.			,01				Run network nsg rule update command (Windows/macOS/Linux) using the name of the network security group rule that you want to reconfigure as identifier parameter (see Audit section part II to identify the right rule) to restrict FTP access on TCP port 22 to specific IP address(es) by setting the --source-address-prefixes parameter to the IP address IP addresses or IP address ranges that can be allowed to access the virtual machines associated with the selected network security group. You can specify a single value (e.g. 10.0.1.6/32) or a space-separated list of multiple values (e.g. 10.0.1.5/32 10.0.1.6/32):az network nsg rule update	--name FTP	--nsg-name cc-production-vm-nsg	--resource-group cloud-shell-storage-westeurope	--source-address-prefixes 10.0.1.6/3202				The command output should return the metadata for the reconfigured Azure NSG rule:{  "access": "Allow"  "description": null  "destinationAddressPrefix": "*"  "destinationAddressPrefixes": []  "destinationApplicationSecurityGroups": null  "destinationPortRange": "21"  "destinationPortRanges": []  "direction": "Inbound"  ...  "name": "FTP"  "priority": 110  "protocol": "TCP"  "provisioningState": "Succeeded"  "resourceGroup": "cloud-shell-storage-westeurope"  "sourceAddressPrefix": "10.0.1.6/32"  "sourceAddressPrefixes": []  "sourceApplicationSecurityGroups": null  "sourcePortRange": "*"  "sourcePortRanges": []  "type": "Microsoft.Network/networkSecurityGroups/securityRules"}03				Repeat step no. 1 and 2 for each network security group that allows unrestricted inbound access on TCP port 20 or 21 (FTP) available in the current Azure subscription.			04				Repeat steps no. 1 â 3 for each subscription created within your Microsoft Azure cloud account.			,https://www.cloudconformity.com/knowledge-base/azure/Network/unrestricted-ftp-access.html
Check for Unrestricted MS SQL Server Access,Network,High (not acceptable risk),Network-008,Ensure that all your Microsoft Azure network security groups (NSGs) restrict inbound/ingress access on TCP port 1433 to trusted IP addresses only in order to implement the principle of least privilege and significantly reduce the attack surface. TCP port 1433 is used by Microsoft Azure SQL Server the relational database management system developed by Microsoft.,Allowing unrestricted access on TCP port 1433 (MS SQL) via Azure network security groups (NSGs) can increase opportunities for malicious activities such as hacking denial-of-service (DoS) attacks and SQL injection attacks.,To determine if your Microsoft Azure network security groups allow unrestricted access on TCP port 1433 perform the following actions:,01                Sign in to Azure Management Console.            02                Navigate to All resources blade at https://portal.azure.com/#blade/HubsExtension/BrowseAll to access all your Microsoft Azure resources.            03                From the Subscription filter box select the Azure account subscription that you want to examine.            04                From the Type filter box select Network security group to list only the security groups available in the selected Azure subscription.            05                Click on the name of the network security group (NSG) that you want to examine.            06                In the navigation panel under Settings select Inbound security rules to access the list with the inbound rules defined for the selected security group.            07                On the Inbound security rules page verify the value available in the SOURCE column for any inbound rule with the PORT set to 1433 and the PROTOCOL set to TCP. If one or more rules have the SOURCE set to Any (i.e. 0.0.0.0/0 or anywhere) the TCP port 1433 (Microsoft SQL Server) is exposed to the Internet.            08                Repeat steps no. 5 â 7 for each network security group created in the selected subscription.            09                Repeat steps no. 3 â 8 for each subscription available within your Microsoft Azure account.            ,01                Run network nsg list command (Windows/macOS/Linux) using custom query filters to list the names of all network security groups (and the name of their associated resource groups) available in the current Azure subscription:az network nsg list    --output table    --query '[*].{name:name resourceGroup:resourceGroup}'02                The command output should return a table with requested resource information:Name                    ResourceGroup----------------------  ------------------------------cc-main-sql-server-nsg  cloud-shell-storage-westeuropecc-project5-server-nsg  cloud-shell-storage-westeurope03                Run az network nsg rule list command (Windows/macOS/Linux) using the name of the Azure network security group (NSG) that you want to examine and its associated resource group as identifier parameters to describe the Microsoft SQL Server inbound rule defined for the selected network security group using custom query filters:az network nsg rule list    --nsg-name cc-main-sql-server-nsg    --resource-group cloud-shell-storage-westeurope    --query "[?direction=='Inbound' && access=='Allow' && protocol=='TCP' && destinationPortRange=='1433']"04                The command output should return the requested security group rule metadata or an empty array i.e. [] if there are no inbound rules created for TCP port 1433:[  {    "access": "Allow"    "description": null    "destinationAddressPrefix": "*"    "destinationAddressPrefixes": []    "destinationApplicationSecurityGroups": null    "destinationPortRange": "1433"    "destinationPortRanges": []    "direction": "Inbound"    "etag": "W/\"abcdabcd-abcd-abcd-abcd-abcdabcdabcd\""    "id": "/subscriptions/abcd1234-abcd-1234-abcd-1234abcd1234/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Network/networkSecurityGroups/cc-main-sql-server-nsg/securityRules/MS_SQL"    "name": "MS_SQL"    "priority": 200    "protocol": "TCP"    "provisioningState": "Succeeded"    "resourceGroup": "cloud-shell-storage-westeurope"    "sourceAddressPrefix": "*"    "sourceAddressPrefixes": []    "sourceApplicationSecurityGroups": null    "sourcePortRange": "*"    "sourcePortRanges": []    "type": "Microsoft.Network/networkSecurityGroups/securityRules"  }]            If the "sourceAddressPrefix" attribute value is set to "*" "internet" or "any" the TCP port 1433 (Microsoft SQL Server) is exposed to the Internet.            05                Repeat step no. 3 and 4 for each Azure network security group created in the selected subscription.            06                Repeat steps no. 1 â 5 for each subscription available in your Microsoft Azure cloud account.            ,01                Sign in to Azure Management Console.            02                Navigate to All resources blade at https://portal.azure.com/#blade/HubsExtension/BrowseAll to access all your Microsoft Azure resources.            03                From the Subscription filter box select the Azure account subscription that you want to access.            04                From the Type filter box select Network security group to list only the security groups available in the selected Azure subscription.            05                Click on the name of the network security group that you want to reconfigure.            06                In the navigation panel under Settings select Inbound security rules to access the list with the inbound rules defined for the selected security group.            07                On the Inbound security rules page click on the non-compliant security group rule that you want to reconfigure (see Audit section part I to identify the right inbound rule).            08                On the selected security group rule configuration panel perform the following:                                        Select IP Addresses from the Source dropdown list to allow inbound/ingress traffic on TCP port 1433 from trusted IP addresses only.                                            For Source IP addresses/CIDR ranges provide the source IP address IP addresses or IP address ranges that will be allowed to access the Azure resources associated with the selected network security group (NSG). You can specify a single value or comma-separated list of multiple values. An example of multiple values is 192.168.100.10/32 10.0.0.25/32.                                             Ensure that Action is set to Allow and leave the rest of the configuration settings unchanged.                                            Click Save to apply the changes.                    09                Repeat steps no. 5 â 8 for each network security group that allows unrestricted inbound access on TCP port 1433 (Microsoft SQL Server) available in the selected Azure subscription.            10                Repeat steps no. 3 â 9 for each subscription created in your Microsoft Azure cloud account.            ,01                Run network nsg rule update command (Windows/macOS/Linux) using the name of the network security group rule that you want to reconfigure as identifier parameter (see Audit section part II to identify the right NSG rule) to restrict inbound/ingress access on TCP port 1433 to trusted IP address(es) only by setting the --source-address-prefixes parameter to the IP address IP addresses or IP address ranges that are allowed to access the Azure resources associated with the selected network security group (NSG). You can specify a single value or a space-separated list of multiple values:az network nsg rule update    --name MSSQL    --nsg-name cc-main-sql-server-nsg    --resource-group cloud-shell-storage-westeurope    --source-address-prefixes 10.0.0.25/3202                The command output should return the metadata for the reconfigured Azure NSG rule:{  "access": "Allow"  "description": null  "destinationAddressPrefix": "*"  "destinationAddressPrefixes": []  "destinationApplicationSecurityGroups": null  "destinationPortRange": "1433"  "destinationPortRanges": []  "direction": "Inbound"   ...   "name": "MSSQL"  "priority": 200  "protocol": "TCP"  "provisioningState": "Succeeded"  "resourceGroup": "cloud-shell-storage-westeurope"  "sourceAddressPrefix": ""  "sourceAddressPrefixes": "10.0.0.25/32"  "sourcePortRange": "*"  "sourcePortRanges": []  "type": "Microsoft.Network/networkSecurityGroups/securityRules"}03                Repeat step no. 1 and 2 for each network security group (NSG) that allows unrestricted inbound/ingress access on TCP port 1433 available in the current subscription.            04                Repeat steps no. 1 â 3 for each subscription created in your Microsoft Azure cloud account.            ,https://www.cloudconformity.com/knowledge-base/azure/Network/unrestricted-ms-sql-database-access.html
Check for Unrestricted MySQL Database Access,Network,High (not acceptable risk),Network-006,Ensure that Microsoft Azure network security groups (NSGs) do not allow unrestricted access (i.e. 0.0.0.0/0) on TCP port 3306 in order to protect against malicious actors and significantly reduce the attack surface. TCP port 3306 is used by the MySQL Database Server a popular open-source Relational Database Management System (RDBMS) server.,To determine if your Azure network security groups allow unrestricted MySQL Database access perform the following actions:,To determine if your Azure network security groups allow unrestricted MySQL Database access perform the following actions:,01                Sign in to Azure Management Console.            02                Navigate to All resources blade at https://portal.azure.com/#blade/HubsExtension/BrowseAll to access all your Microsoft Azure resources.            03                From the Subscription filter box select the Azure account subscription that you want to examine.            04                From the Type filter box select Network security group to list only the security groups available in the selected Azure subscription.            05                Click on the name of the network security group that you want to examine.            06                In the navigation panel under Settings select Inbound security rules to access the list with the inbound rules defined for the selected security group.            07                On the Inbound security rules page verify the value available in the SOURCE column for any inbound rule with the PORT set to 3306 and the PROTOCOL set to TCP. If one or more rules have the SOURCE set to Any (i.e. 0.0.0.0/0) the selected network security group allows unrestricted traffic on TCP port 3306 therefore the MySQL Database inbound access to the associated Microsoft Azure resource(s) is not secured.            08                Repeat steps no. 5 â 7 for each network security group available in the selected subscription.            09                Repeat steps no. 3 â 8 for each subscription created in your Microsoft Azure cloud account.            ,01                Run network nsg list command (Windows/macOS/Linux) using custom query filters to list the names of all network security groups (and the name of their associated resource groups) available in the current Azure subscription:az network nsg list    --output table    --query '[*].{name:name resourceGroup:resourceGroup}'02                The command output should return a table with requested information:Name                         ResourceGroup--------------------------   ------------------------------cc-app-database-server-nsg   cloud-shell-storage-westeuropecc-development-server-nsg    cloud-shell-storage-westeurope03                Run az network nsg rule list command (Windows/macOS/Linux) using the name of the Azure network security group (NSG) that you want to examine and its associated resource group as identifier parameters to describe the MySQL Database inbound rule defined for the selected network security group using custom query filtering:az network nsg rule list    --nsg-name cc-app-database-server-nsg    --resource-group cloud-shell-storage-westeurope    --query "[?direction=='Inbound' && access=='Allow' && protocol=='TCP' && destinationPortRange=='3306']"04                The command output should return the requested security group rule metadata or an empty array i.e. [] if there are no MySQL Database ingress rules created for TCP port 3306:[  {    "access": "Allow"    "description": null    "destinationAddressPrefix": "*"    "destinationAddressPrefixes": []    "destinationApplicationSecurityGroups": null    "destinationPortRange": "3306"    "destinationPortRanges": []    "direction": "Inbound"    "etag": "W/\"abcdabcd-abcd-abcd-abcd-abcdabcdabcd\""    "id": "/subscriptions/abcd1234-abcd-1234-abcd-1234abcd1234/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Network/networkSecurityGroups/cc-app-database-server-nsg/securityRules/MYSQL"    "name": "MYSQL"    "priority": 300    "protocol": "TCP"    "provisioningState": "Succeeded"    "resourceGroup": "cloud-shell-storage-westeurope"    "sourceAddressPrefix": "*"    "sourceAddressPrefixes": []    "sourceApplicationSecurityGroups": null    "sourcePortRange": "*"    "sourcePortRanges": []    "type": "Microsoft.Network/networkSecurityGroups/securityRules"  }]            If the "sourceAddressPrefix" attribute value is set to "*" "internet" or "any" the selected network security group (NSG) allows unrestricted traffic on TCP port 3306 therefore the MySQL Database inbound access to the associated Microsoft Azure resource(s) is not secured.            05                Repeat step no. 3 and 4 for each Azure network security group created within the selected subscription.            06                Repeat steps no. 1 â 5 for each subscription available in your Microsoft Azure cloud account.            ,01                Sign in to Azure Management Console.            02                Navigate to All resources blade at https://portal.azure.com/#blade/HubsExtension/BrowseAll to access all your Microsoft Azure resources.            03                From the Subscription filter box select the Azure account subscription that you want to access.            04                From the Type filter box select Network security group to list only the security groups available in the selected Azure subscription.            05                Click on the name of the network security group that you want to reconfigure.            06                In the navigation panel under Settings select Inbound security rules to access the list with the inbound rules defined for the selected security group.            07                On the Inbound security rules page click on the non-compliant security group inbound rule that you want to reconfigure (see Audit section part I to identify the right rule).            08                On the selected security group rule configuration panel perform the following:                                        Select IP Addresses from the Source dropdown list to allow inbound traffic on TCP port 3306 from trusted IP addresses only.                                            For Source IP addresses/CIDR ranges provide the source IP address IP addresses or IP address ranges that will be allowed to access the Azure resources (e.g. virtual machines) associated with the selected network security group (NSG). You can specify a single value or comma-separated list of multiple values. An example of multiple values is 192.168.0.160/32 10.0.5.30/32.                                             Leave the rest of the NSG configuration settings unchanged then click Save to apply the changes.                    09                Repeat steps no. 5 â 8 for each network security group that allows unrestricted inbound access on TCP port 3306 (MySQL Database) available in the selected Azure subscription.            10                Repeat steps no. 3 â 9 for each subscription created in your Microsoft Azure cloud account.            ,01                Run network nsg rule update command (Windows/macOS/Linux) using the name of the network security group rule that you want to reconfigure as identifier parameter (see Audit section part II to identify the right NSG rule) to restrict MySQL Database access on TCP port 3306 to trusted IP address(es) only by setting the --source-address-prefixes parameter to the IP address IP addresses or IP address ranges that are allowed to access the Azure resource(s) associated with the selected network security group. You can specify a single value or a space-separated list of multiple values as shown in the example below:az network nsg rule update    --name MYSQL    --nsg-name cc-app-database-server-nsg    --resource-group cloud-shell-storage-westeurope    --source-address-prefixes 192.168.0.160/32 10.0.5.30/3202                The command output should return the metadata for the reconfigured Azure NSG rule:{  "access": "Allow"  "description": null  "destinationAddressPrefix": "*"  "destinationAddressPrefixes": []  "destinationApplicationSecurityGroups": null  "destinationPortRange": "3306"  "destinationPortRanges": []  "direction": "Inbound"   ...   "name": "MYSQL"  "priority": 300  "protocol": "TCP"  "provisioningState": "Succeeded"  "resourceGroup": "cloud-shell-storage-westeurope"  "sourceAddressPrefix": ""  "sourceAddressPrefixes": [    "192.168.0.160/32"    "10.0.5.30/32"  ]  "sourcePortRange": "*"  "sourcePortRanges": []  "type": "Microsoft.Network/networkSecurityGroups/securityRules"}03                Repeat step no. 1 and 2 for each network security group (NSG) that allows unrestricted inbound access on TCP port 3306 (MySQL Database) available in the current subscription.            04                Repeat steps no. 1 â 3 for each subscription created within your Microsoft Azure cloud account.            ,https://www.cloudconformity.com/knowledge-base/azure/Network/unrestricted-mysql-access.html
Check for Unrestricted Oracle Database Access,Network,High (not acceptable risk),Network-009,Ensure that your Microsoft Azure network security groups (NSGs) restrict inbound/ingress access on TCP port 1521 to trusted entities only (i.e. IP addresses) in order to implement the principle of least privilege and vastly reduce the attack surface. TCP port 1521 is used by Oracle Database Server which is an object-relational database management system (RDBMS) server developed by Oracle Corporation.,Allowing unrestricted access on TCP port 1521 (Oracle Database Server) via Azure network security groups (NSGs) can increase opportunities for malicious activities such as denial-of-service (DoS) and SQL injections attacks and ultimately lead to data leak and data loss.,To determine if your Microsoft Azure network security groups allow unrestricted access on TCP port 1521 perform the following actions:,01                Sign in to Azure Management Console.            02                Navigate to All resources blade at https://portal.azure.com/#blade/HubsExtension/BrowseAll to access all your Microsoft Azure resources.            03                From the Subscription filter box select the Azure account subscription that you want to examine.            04                From the Type filter box select Network security group to list only the security groups available in the selected Azure subscription.            05                Click on the name of the network security group (NSG) that you want to examine.            06                In the navigation panel under Settings select Inbound security rules to access the list with the inbound rules defined for the selected security group.            07                On the Inbound security rules page verify the value available in the SOURCE column for any inbound rule with the PORT set to 1521 and the PROTOCOL set to TCP. If one or more rules have the SOURCE set to Any (i.e. anywhere or 0.0.0.0/0) the TCP port 1521 (Oracle Database Server) is publicly exposed to the Internet.            08                Repeat steps no. 5 â 7 for each network security group created in the selected subscription.            09                Repeat steps no. 3 â 8 for each subscription available within your Microsoft Azure account.            ,01                Run network nsg list command (Windows/macOS/Linux) using custom query filters to list the names of all network security groups (and their associated resource groups) available in the current Azure subscription:az network nsg list    --output table    --query '[*].{name:name resourceGroup:resourceGroup}'02                The command output should return a table with requested Azure resource information:Name                    ResourceGroup----------------------  ------------------------------cc-oracle-database-nsg  cloud-shell-storage-westeuropecc-webapp-server-nsg    cloud-shell-storage-westeurope03                Run az network nsg rule list command (Windows/macOS/Linux) using the name of the Azure network security group (NSG) that you want to examine and its associated resource group as identifier parameters to describe the Oracle Database Server ingress rule defined for the selected network security group using custom query filters:az network nsg rule list    --nsg-name cc-oracle-database-nsg    --resource-group cloud-shell-storage-westeurope    --query "[?direction=='Inbound' && access=='Allow' && protocol=='TCP' && destinationPortRange=='1521']"04                The command output should return the requested security group rule metadata or an empty array i.e. [] if there are no ingress rules created for TCP port 1521:[  {    "access": "Allow"    "description": null    "destinationAddressPrefix": "*"    "destinationAddressPrefixes": []    "destinationApplicationSecurityGroups": null    "destinationPortRange": "1521"    "destinationPortRanges": []    "direction": "Inbound"    "etag": "W/\"abcdabcd-abcd-abcd-abcd-abcdabcdabcd\""    "id": "/subscriptions/abcd1234-abcd-1234-abcd-1234abcd1234/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Network/networkSecurityGroups/cc-oracle-database-nsg/securityRules/ORACLEDB"    "name": "ORACLEDB"    "priority": 210    "protocol": "TCP"    "provisioningState": "Succeeded"    "resourceGroup": "cloud-shell-storage-westeurope"    "sourceAddressPrefix": "*"    "sourceAddressPrefixes": []    "sourceApplicationSecurityGroups": null    "sourcePortRange": "*"    "sourcePortRanges": []    "type": "Microsoft.Network/networkSecurityGroups/securityRules"  }]            If the "sourceAddressPrefix" attribute value is set to "*" "internet" or "any" the TCP port 1521 (Oracle Database Server) is publicly exposed to the Internet.            05                Repeat step no. 3 and 4 for each Azure network security group created in the selected subscription.            06                Repeat steps no. 1 â 5 for each subscription available in your Microsoft Azure cloud account.            ,01                Sign in to Azure Management Console.            02                Navigate to All resources blade at https://portal.azure.com/#blade/HubsExtension/BrowseAll to access all your Microsoft Azure resources.            03                From the Subscription filter box select the Azure account subscription that you want to access.            04                From the Type filter box select Network security group to list only the security groups available in the selected Azure subscription.            05                Click on the name of the network security group that you want to reconfigure.            06                In the navigation panel under Settings select Inbound security rules to access the list with the inbound rules defined for the selected security group.            07                On the Inbound security rules page click on the non-compliant security group rule that you want to reconfigure (see Audit section part I to identify the right ingress rule).            08                On the selected security group rule configuration panel perform the following:                                        Select IP Addresses from the Source dropdown list to allow inbound/ingress traffic on TCP port 1521 from trusted IP addresses only.                                            For Source IP addresses/CIDR ranges provide the source IP address IP addresses or IP address ranges that will be allowed to access the Azure resources associated with the selected network security group (NSG). You can specify a single value or comma-separated list of multiple values. An example of multiple values is 192.168.205.50/32 10.0.10.108/32.                                              Ensure that Action is set to Allow and leave the rest of the configuration settings unchanged.                                            Click Save to apply the changes.                    09                Repeat steps no. 5 â 8 for each network security group that allows unrestricted inbound access on TCP port 1521 (Oracle Database Server) available in the selected Azure subscription.            10                Repeat steps no. 3 â 9 for each subscription created in your Microsoft Azure cloud account.            ,01                Run network nsg rule update command (Windows/macOS/Linux) using the name of the network security group rule that you want to reconfigure as identifier parameter (see Audit section part II to identify the right NSG rule) to restrict inbound/ingress access on TCP port 1521 (Oracle DB Server) to trusted IP address(es) only by setting the --source-address-prefixes parameter to the IP address IP addresses or IP address ranges that are allowed to access the Azure resources associated with the selected network security group (NSG). You can specify a single value or a space-separated list of multiple values:az network nsg rule update    --name ORACLEDB    --nsg-name cc-oracle-database-nsg    --resource-group cloud-shell-storage-westeurope    --source-address-prefixes 192.168.205.50/3202                The command output should return the metadata for the reconfigured Azure NSG rule:{  "access": "Allow"  "description": null  "destinationAddressPrefix": "*"  "destinationAddressPrefixes": []  "destinationApplicationSecurityGroups": null  "destinationPortRange": "1521"  "destinationPortRanges": []  "direction": "Inbound"   ...   "name": "ORACLEDB"  "priority": 210  "protocol": "TCP"  "provisioningState": "Succeeded"  "resourceGroup": "cloud-shell-storage-westeurope"  "sourceAddressPrefix": ""  "sourceAddressPrefixes": "192.168.205.50/32"  "sourcePortRange": "*"  "sourcePortRanges": []  "type": "Microsoft.Network/networkSecurityGroups/securityRules"}03                Repeat step no. 1 and 2 for each network security group (NSG) that allows unrestricted inbound/ingress access on TCP port 1521 available in the current subscription.            04                Repeat steps no. 1 â 3 for each subscription created in your Microsoft Azure cloud account.            ,https://www.cloudconformity.com/knowledge-base/azure/Network/unrestricted-oracle-access.html
Check for Unrestricted PostgreSQL Database Access,Network,High (not acceptable risk),Network-007,Ensure that your Microsoft Azure network security groups (NSGs) allow inbound/ingress access on TCP port 5432 to trusted IP addresses only in order to implement the principle of least privilege and greatly reduce the attack surface. TCP port 5432 is used by the PostgreSQL Database Server an object-relational database management system (RDBMS) server developed by PostgreSQL Global Development Group.,Allowing unrestricted access on TCP port 5432 (PostgreSQL Database) via Azure network security groups (NSGs) can increase opportunities for malicious activities such as brute force attacks DDoS and SQL injection attacks.,To determine if your Microsoft Azure network security groups allow unrestricted access on TCP port 5432 perform the following actions:,01                Sign in to Azure Management Console.            02                Navigate to All resources blade at https://portal.azure.com/#blade/HubsExtension/BrowseAll to access all your Microsoft Azure resources.            03                From the Subscription filter box select the Azure account subscription that you want to examine.            04                From the Type filter box select Network security group to list only the security groups available in the selected Azure subscription.            05                Click on the name of the network security group (NSG) that you want to examine.            06                In the navigation panel under Settings select Inbound security rules to access the list with the inbound rules defined for the selected security group.            07                On the Inbound security rules page verify the value available in the SOURCE column for any inbound rule with the PORT set to 5432 and the PROTOCOL set to TCP. If one or more rules have the SOURCE set to Any (i.e. 0.0.0.0/0) the TCP port 5432 (PostgreSQL Database Server) is exposed to the Internet.            08                Repeat steps no. 5 â 7 for each network security group created in the selected subscription.            09                Repeat steps no. 3 â 8 for each subscription available within your Microsoft Azure account.            ,01                Run network nsg list command (Windows/macOS/Linux) using custom query filters to list the names of all network security groups (and the name of their associated resource groups) available in the current Azure subscription:az network nsg list    --output table    --query '[*].{name:name resourceGroup:resourceGroup}'02                The command output should return a table with requested Azure resource information:Name                    ResourceGroup----------------------  ------------------------------cc-postgres-server-nsg  cloud-shell-storage-westeuropecc-main-app-server-nsg  cloud-shell-storage-westeurope03                Run az network nsg rule list command (Windows/macOS/Linux) using the name of the Azure network security group (NSG) that you want to examine and its associated resource group as identifier parameters to describe the PostgreSQL Database Server inbound rule defined for the selected network security group using custom query filters:az network nsg rule list    --nsg-name cc-postgres-server-nsg    --resource-group cloud-shell-storage-westeurope    --query "[?direction=='Inbound' && access=='Allow' && protocol=='TCP' && destinationPortRange=='5432']"04                The command output should return the requested security group rule metadata or an empty array i.e. [] if there are no inbound rules created for TCP port 5432:[  {    "access": "Allow"    "description": null    "destinationAddressPrefix": "*"    "destinationAddressPrefixes": []    "destinationApplicationSecurityGroups": null    "destinationPortRange": "5432"    "destinationPortRanges": []    "direction": "Inbound"    "etag": "W/\"abcdabcd-abcd-abcd-abcd-abcdabcdabcd\""    "id": "/subscriptions/abcd1234-abcd-1234-abcd-1234abcd1234/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Network/networkSecurityGroups/cc-postgres-server-nsg/securityRules/POSTGRESQL"    "name": "POSTGRESQL"    "priority": 400    "protocol": "TCP"    "provisioningState": "Succeeded"    "resourceGroup": "cloud-shell-storage-westeurope"    "sourceAddressPrefix": "*"    "sourceAddressPrefixes": []    "sourceApplicationSecurityGroups": null    "sourcePortRange": "*"    "sourcePortRanges": []    "type": "Microsoft.Network/networkSecurityGroups/securityRules"  }]            If the "sourceAddressPrefix" attribute value is set to "*" "internet" or "any" the TCP port 5432 (PostgreSQL Database Server) is exposed to the Internet.            05                Repeat step no. 3 and 4 for each Azure network security group created in the selected subscription.            06                Repeat steps no. 1 â 5 for each subscription available in your Microsoft Azure cloud account.            ,01                Sign in to Azure Management Console.            02                Navigate to All resources blade at https://portal.azure.com/#blade/HubsExtension/BrowseAll to access all your Microsoft Azure resources.            03                From the Subscription filter box select the Azure account subscription that you want to access.            04                From the Type filter box select Network security group to list only the security groups available in the selected Azure subscription.            05                Click on the name of the network security group that you want to reconfigure.            06                In the navigation panel under Settings select Inbound security rules to access the list with the inbound rules defined for the selected security group.            07                On the Inbound security rules page click on the non-compliant security group rule that you want to reconfigure (see Audit section part I to identify the right NSG rule).            08                On the selected security group rule configuration panel perform the following:                                        Select IP Addresses from the Source dropdown list to allow inbound/ingress traffic on TCP port 5432 from trusted IP addresses only.                                            For Source IP addresses/CIDR ranges provide the source IP address IP addresses or IP address ranges that will be allowed to access the Azure resources associated with the selected network security group (NSG). You can specify a single value or comma-separated list of multiple values. An example of multiple values is 192.168.0.3/32 10.0.0.8/32.                                             Leave the rest of the configuration settings unchanged then click Save to apply the changes.                    09                Repeat steps no. 5 â 8 for each network security group that allows unrestricted inbound access on TCP port 5432 (PostgreSQL Database Server) available in the selected Azure subscription.            10                Repeat steps no. 3 â 9 for each subscription created in your Microsoft Azure cloud account.            ,01                Run network nsg rule update command (Windows/macOS/Linux) using the name of the network security group rule that you want to reconfigure as identifier parameter (see Audit section part II to identify the right NSG rule) to restrict inbound/ingress access on TCP port 5432 to trusted IP address(es) only by setting the --source-address-prefixes parameter to the IP address IP addresses or IP address ranges that are allowed to access the Azure resources associated with the selected network security group (NSG). You can specify a single value or a space-separated list of multiple values:az network nsg rule update    --name POSTGRESQL    --nsg-name cc-postgres-server-nsg    --resource-group cloud-shell-storage-westeurope    --source-address-prefixes 10.0.0.8/3202                The command output should return the metadata for the reconfigured Azure NSG rule:{  "access": "Allow"  "description": null  "destinationAddressPrefix": "*"  "destinationAddressPrefixes": []  "destinationApplicationSecurityGroups": null  "destinationPortRange": "5432"  "destinationPortRanges": []  "direction": "Inbound"   ...   "name": "POSTGRESQL"  "priority": 400  "protocol": "TCP"  "provisioningState": "Succeeded"  "resourceGroup": "cloud-shell-storage-westeurope"  "sourceAddressPrefix": ""  "sourceAddressPrefixes": "10.0.0.8/32"  "sourcePortRange": "*"  "sourcePortRanges": []  "type": "Microsoft.Network/networkSecurityGroups/securityRules"}03                Repeat step no. 1 and 2 for each network security group (NSG) that allows unrestricted inbound/ingress access on TCP port 5432 (PostgreSQL Database) available in the current subscription.            04                Repeat steps no. 1 â 3 for each subscription created in your Microsoft Azure cloud account.            ,https://www.cloudconformity.com/knowledge-base/azure/Network/unrestricted-postgre-sql-access.html
Check for Unrestricted RDP Access,Network,Very High (act immediately),Network-001,Ensure that Microsoft Azure network security groups (NSGs) do not allow unrestricted access (i.e. 0.0.0.0/0) on TCP port 3389 in order to protect against attackers that use brute force techniques to gain access to the Azure virtual machines associated with the NSGs. TCP port 3389 is used for secure remote GUI login to Microsoft VMs by connecting a Remote Desktop Protocol (RDP) client application with an RDP server.,Allowing unrestricted Remote Desktop Protocol (RDP) access can increase opportunities for malicious activities such as hacking man-in-the-middle attacks (MITM) and Pass-the-Hash (PtH) attacks.,To determine if your Azure network security groups (NSGs) allow unrestricted access on TCP port 3389 (RDP) perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to All resources blade at https://portal.azure.com/#blade/HubsExtension/BrowseAll to access all your Microsoft Azure resources.			03				From the Subscription filter box select the Azure account subscription that you want to examine.			04				From the Type filter box select Network security group to list only the security groups available in the selected Azure subscription.			05				Click on the name of the network security group that you want to examine.			06				In the navigation panel under Settings select Inbound security rules to access the list with the inbound rules defined for the selected security group.			07				On the Inbound security rules page verify the value available in the SOURCE column for any inbound/ingress rule with the PORT set to 3389 (RDP) and the PROTOCOL set to TCP. If one or more rules have the SOURCE set to Any (i.e. 0.0.0.0/0) the selected network security group allows unrestricted traffic on port 3389 thus the RDP access to the associated Microsoft Azure virtual machine(s) is not secured.			08				Repeat steps no. 5 â 7 for each network security group available in the current Azure subscription.			09				Repeat steps no. 3 â 8 for each subscription created in your Microsoft Azure cloud account.			,01				Run network nsg list command (Windows/macOS/Linux) using custom query filters to list the names of all network security groups (and the name of their associated resource groups) available in the current Azure subscription:az network nsg list	--output table	--query '[*].{name:name resourceGroup:resourceGroup}'02				The command output should return a table with requested information:Name                       ResourceGroup------------------------   ------------------------------cc-project5-server-nsg     cloud-shell-storage-westeuropecc-production-server-nsg   cloud-shell-storage-westeurope03				Run az network nsg rule list command (Windows/macOS/Linux) using the name of the Azure network security group that you want to examine and its associated resource group as identifier parameters to describe the RDP inbound rule defined for the selected network security group using custom query filtering:az network nsg rule list	--nsg-name cc-project5-server-nsg	--resource-group cloud-shell-storage-westeurope	--query "[?direction=='Inbound' && access=='Allow' && protocol=='TCP' && destinationPortRange=='3389']"04				The command output should return the requested security group rule metadata or an empty array i.e. [] if there is no RDP rule for TCP port 3389 defined:[  {    "access": "Allow"    "description": null    "destinationAddressPrefix": "*"    "destinationAddressPrefixes": []    "destinationApplicationSecurityGroups": null    "destinationPortRange": "3389"    "destinationPortRanges": []    "direction": "Inbound"    "etag": "W/\"abcdabcd-abcd-abcd-abcd-abcdabcdabcd\""    "id": "/subscriptions/abcd1234-abcd-1234-abcd-1234abcd1234/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Network/networkSecurityGroups/cc-project5-server-nsg/securityRules/RDP"    "name": "RDP"    "priority": 300    "protocol": "TCP"    "provisioningState": "Succeeded"    "resourceGroup": "cloud-shell-storage-westeurope"    "sourceAddressPrefix": "*"    "sourceAddressPrefixes": []    "sourceApplicationSecurityGroups": null    "sourcePortRange": "*"    "sourcePortRanges": []    "type": "Microsoft.Network/networkSecurityGroups/securityRules"  }]				If the "sourceAddressPrefix" attribute value is set to "*" "internet" or "any" as shown in the output example above the selected network security group allows unrestricted traffic on TCP port 3389 therefore the Remote Desktop Protocol (RDP) access to any associated Microsoft Azure virtual machine(s) is not secured.			05				Repeat step no. 3 and 4 for each Azure network security group created in the selected subscription.			06				Repeat steps no. 1 â 5 for each subscription available within your Microsoft Azure cloud account.			,01				Sign in to Azure Management Console.			02				Navigate to All resources blade at https://portal.azure.com/#blade/HubsExtension/BrowseAll to access all your Microsoft Azure resources.			03				From the Subscription filter box select the Azure account subscription that you want to access.			04				From the Type filter box select Network security group to list only the security groups available in the selected Azure subscription.			05				Click on the name of the network security group that you want to reconfigure.			06				In the navigation panel under Settings select Inbound security rules to access the list with the inbound rules defined for the selected security group.			07				On the Inbound security rules page click on the noncompliant RDP security group rule that you want to reconfigure (see Audit section part I to identify the right rule).			08				On the selected security group rule configuration panel perform the following:										Select IP Addresses from the Source dropdown list to allow inbound traffic on TCP port 3389 from specified IP addresses only.											For Source IP addresses/CIDR ranges provide the source IP address IP addresses or IP address ranges that will be allowed to access the virtual machines associated with the selected network security group. You can specify a single value or comma-separated list of multiple values. An example of multiple values is 192.168.1.10/32 10.0.0.5/32.											Click Save to apply the changes.					09				Repeat steps no. 5 â 8 for each network security group that allows unrestricted inbound access on TCP port 3389 (RDP) available in the current Azure subscription.			10				Repeat steps no. 3 â 9 for each subscription created in your Microsoft Azure cloud account.			,01				Run network nsg rule update command (Windows/macOS/Linux) using the name of the network security group rule that you want to reconfigure as identifier parameter (see Audit section part II to identify the right NSG rule) to restrict RDP access to specific IP address(es) only by setting the --source-address-prefixes parameter to the IP address IP addresses or IP address ranges that can be allowed to access the virtual machines associated with the selected network security group. You can specify a single value or a space-separated list of multiple values as shown in the example below:az network nsg rule update	--name RDP	--nsg-name cc-project5-server-nsg	--resource-group cloud-shell-storage-westeurope	--source-address-prefixes 192.168.99.1/32 192.168.1.10/3202				The command output should return the metadata for the reconfigured Azure NSG rule:{  "access": "Allow"  "description": null  "destinationAddressPrefix": "*"  "destinationAddressPrefixes": []  "destinationApplicationSecurityGroups": null  "destinationPortRange": "3389"  "destinationPortRanges": []  "direction": "Inbound"  ...  "name": "RDP"  "priority": 300  "protocol": "TCP"  "provisioningState": "Succeeded"  "resourceGroup": "cloud-shell-storage-westeurope"  "sourceAddressPrefix": ""  "sourceAddressPrefixes": [    "192.168.99.1/32"    "192.168.1.10/32"  ]  "sourcePortRange": "*"  "sourcePortRanges": []  "type": "Microsoft.Network/networkSecurityGroups/securityRules"}03				Repeat step no. 1 and 2 for each network security group that allows unrestricted inbound access on TCP port 3389 (RDP) available in the current Azure subscription.			04				Repeat steps no. 1 â 3 for each subscription created within your Microsoft Azure cloud account.			,https://www.cloudconformity.com/knowledge-base/azure/Network/unrestricted-rdp-access.html
Check for Unrestricted RPC Access,Network,High (not acceptable risk),NA,Ensure that Microsoft Azure network security groups (NSGs) do not allow unrestricted access (i.e. 0.0.0.0/0) on TCP port 135 in order to implement the principle of least privilege and effectively reduce the attack surface. Remote Procedure Call (RPC) TCP port 135 is used for client-server communications by Microsoft Message Queuing (MSMQ) as well as other Microsoft Windows/Windows Server software.,Allowing unrestricted RPC access on TCP port 135 can increase opportunities for malicious activities such as hacking (backdoor command shell) ransomware attacks and denial-of-service (DoS) attacks.,To determine if your Azure network security groups allow unrestricted access on TCP port 135 (RPC) perform the following actions:,01                Sign in to Azure Management Console.            02                Navigate to All resources blade at https://portal.azure.com/#blade/HubsExtension/BrowseAll to access all your Microsoft Azure resources.            03                From the Subscription filter box select the Azure account subscription that you want to examine.            04                From the Type filter box select Network security group to list only the security groups available in the selected Azure subscription.            05                Click on the name of the network security group that you want to examine.            06                In the navigation panel under Settings select Inbound security rules to access the list with the inbound rules defined for the selected security group.            07                On the Inbound security rules page verify the value available in the SOURCE column for any inbound rule with the PORT set to 135 and the PROTOCOL set to TCP. If one or more rules have the SOURCE set to Any (i.e. 0.0.0.0/0) the selected network security group allows unrestricted traffic on TCP port 135 therefore the RPC inbound access to the associated Microsoft Azure virtual machine(s) is not secured.            08                Repeat steps no. 5 â 7 for each network security group available in the selected subscription.            09                Repeat steps no. 3 â 8 for each subscription created in your Microsoft Azure cloud account.            ,01                Run network nsg list command (Windows/macOS/Linux) using custom query filters to list the names of all network security groups (and the name of their associated resource groups) available in the current Azure subscription:az network nsg list    --output table    --query '[*].{name:name resourceGroup:resourceGroup}'02                The command output should return a table with requested information:Name                     ResourceGroup----------------------   ------------------------------cc-windows-server-nsg    cloud-shell-storage-westeuropecc-project5-server-nsg   cloud-shell-storage-westeurope03                Run az network nsg rule list command (Windows/macOS/Linux) using the name of the Azure network security group (NSG) that you want to examine and its associated resource group as identifier parameters to describe the RPC inbound rule defined for the selected network security group using custom query filtering:az network nsg rule list    --nsg-name cc-windows-server-nsg    --resource-group cloud-shell-storage-westeurope    --query "[?direction=='Inbound' && access=='Allow' && protocol=='TCP' && destinationPortRange=='135']"04                The command output should return the requested security group rule metadata or an empty array i.e. [] if there are no RPC inbound rules created for TCP port 135:[  {    "access": "Allow"    "description": null    "destinationAddressPrefix": "*"    "destinationAddressPrefixes": []    "destinationApplicationSecurityGroups": null    "destinationPortRange": "135"    "destinationPortRanges": []    "direction": "Inbound"    "etag": "W/\"abcdabcd-abcd-abcd-abcd-abcdabcdabcd\""    "id": "/subscriptions/abcd1234-abcd-1234-abcd-1234abcd1234/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Network/networkSecurityGroups/cc-windows-server-nsg/securityRules/RPC"    "name": "RPC"    "priority": 420    "protocol": "TCP"    "provisioningState": "Succeeded"    "resourceGroup": "cloud-shell-storage-westeurope"    "sourceAddressPrefix": "*"    "sourceAddressPrefixes": []    "sourceApplicationSecurityGroups": null    "sourcePortRange": "*"    "sourcePortRanges": []    "type": "Microsoft.Network/networkSecurityGroups/securityRules"  }]            If the "sourceAddressPrefix" attribute value is set to "*" "internet" or "any" the selected network security group (NSG) allows unrestricted traffic on TCP port 135 therefore the RPC inbound/ingress access to the associated Microsoft Azure virtual machine(s) is not secured.            05                Repeat step no. 3 and 4 for each Azure network security group created within the selected subscription.            06                Repeat steps no. 1 â 5 for each subscription available in your Microsoft Azure cloud account.            ,01                Sign in to Azure Management Console.            02                Navigate to All resources blade at https://portal.azure.com/#blade/HubsExtension/BrowseAll to access all your Microsoft Azure resources.            03                From the Subscription filter box select the Azure account subscription that you want to access.            04                From the Type filter box select Network security group to list only the security groups available in the selected Azure subscription.            05                Click on the name of the network security group that you want to reconfigure.            06                In the navigation panel under Settings select Inbound security rules to access the list with the inbound rules defined for the selected security group.            07                On the Inbound security rules page click on the non-compliant RPC security group rule that you want to reconfigure (see Audit section part I to identify the right rule).            08                On the selected security group rule configuration panel perform the following:                                        Select IP Addresses from the Source dropdown list to allow inbound traffic on TCP port 135 from trusted IP addresses only.                                            For Source IP addresses/CIDR ranges provide the source IP address IP addresses or IP address ranges that will be allowed to access the virtual machines associated with the selected network security group (NSG). You can specify a single value or comma-separated list of multiple values. An example of multiple values is 192.168.10.70/32 10.0.10.18/32.                                             Ensure that Action is set to Allow and leave the rest of the NSG configuration settings unchanged.                                            Click Save to apply the changes.                    09                Repeat steps no. 5 â 8 for each network security group that allows unrestricted inbound access on TCP port 135 (RPC) available in the selected Azure subscription.            10                Repeat steps no. 3 â 9 for each subscription created in your Microsoft Azure cloud account.            ,01                Run network nsg rule update command (Windows/macOS/Linux) using the name of the network security group rule that you want to reconfigure as identifier parameter (see Audit section part II to identify the right NSG rule) to restrict Remote Procedure Call (RPC) access on TCP port 135 to trusted IP address(es) only by setting the --source-address-prefixes parameter to the IP address IP addresses or IP address ranges that are allowed to access the virtual machine(s) associated with the selected network security group. You can specify a single value (e.g. 192.168.10.70/32) or a space-separated list of multiple values (e.g. 192.168.10.70/32 10.0.10.18/32):az network nsg rule update    --name RPC    --nsg-name cc-windows-server-nsg    --resource-group cloud-shell-storage-westeurope    --source-address-prefixes 192.168.10.70/3202                The command output should return the metadata for the reconfigured Azure NSG rule:{  "access": "Allow"  "description": null  "destinationAddressPrefix": "*"  "destinationAddressPrefixes": []  "destinationApplicationSecurityGroups": null  "destinationPortRange": "135"  "destinationPortRanges": []  "direction": "Inbound"   ...   "name": "RPC"  "priority": 420  "protocol": "TCP"  "provisioningState": "Succeeded"  "resourceGroup": "cloud-shell-storage-westeurope"  "sourceAddressPrefix": ""  "sourceAddressPrefixes": "192.168.10.70/32"  "sourcePortRange": "*"  "sourcePortRanges": []  "type": "Microsoft.Network/networkSecurityGroups/securityRules"}03                Repeat step no. 1 and 2 for each network security group (NSG) that allows unrestricted inbound access on TCP port 135 (RPC) available in the current subscription.            04                Repeat steps no. 1 â 3 for each subscription created within your Microsoft Azure cloud account.            ,https://www.cloudconformity.com/knowledge-base/azure/Network/unrestricted-rpc-access.html
Check for Unrestricted SSH Access,Network,Very High (act immediately),Network-002,Check your Microsoft Azure network security groups (NSGs) for inbound rules that allow unrestricted access (i.e. 0.0.0.0/0) on TCP port 22 and restrain access to only those IP addresses that require it in order to implement the principle of least privilege and reduce the possibility of a breach. TCP port 22 is used for secure remote login by connecting an SSH client application with an SSH server.,Exposing Secure Shell (SSH) port 22 to the Internet can increase opportunities for malicious activities such as hacking man-in-the-middle attacks (MITM) and brute-force attacks. Cloud Conformity strongly recommends that you configure your Microsoft Azure NSGs to limit inbound traffic on TCP port 22 to known IP addresses only.,To determine if your Azure network security groups (NSGs) allow unrestricted access on TCP port 22 (SSH) perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to All resources blade at https://portal.azure.com/#blade/HubsExtension/BrowseAll to access all your Microsoft Azure resources.			03				From the Subscription filter box select the Azure account subscription that you want to examine.			04				From the Type filter box select Network security group to list only the security groups available in the selected Azure subscription.			05				Click on the name of the network security group that you want to examine.			06				In the navigation panel under Settings select Inbound security rules to access the list with the inbound rules defined for the selected security group.			07				On the Inbound security rules page verify the value available in the SOURCE column for any inbound rules with the PORT set to 22 (SSH) and the PROTOCOL set to TCP. If one or more rules have the SOURCE set to Any (i.e. 0.0.0.0/0) the selected network security group allows unrestricted traffic on TCP port 22 therefore the SSH access to the associated Microsoft Azure virtual machine(s) is not secured.			08				Repeat steps no. 5 â 7 for each network security group available in the current Azure subscription.			09				Repeat steps no. 3 â 8 for each subscription created in your Microsoft Azure cloud account.			,01				Run network nsg list command (Windows/macOS/Linux) using custom query filters to list the names of all network security groups (and the name of their associated resource groups) available in the current Azure subscription:az network nsg list	--output table	--query '[*].{name:name resourceGroup:resourceGroup}'02				The command output should return a table with requested resource information:Name                       ResourceGroup------------------------   ------------------------------cc-production-vm-nsg       cloud-shell-storage-westeuropecc-project5-server-nsg     cloud-shell-storage-westeurope03				Run az network nsg rule list command (Windows/macOS/Linux) using the name of the Azure network security group that you want to examine and its associated resource group as identifier parameters to describe the SSH inbound rule defined for the selected network security group using custom query filters:az network nsg rule list	--nsg-name cc-production-vm-nsg	--resource-group cloud-shell-storage-westeurope	--query "[?direction=='Inbound' && access=='Allow' && protocol=='TCP' && destinationPortRange=='22']"04				The command output should return the requested security group rule metadata or an empty array such as [] if there is no SSH rule for TCP port 22 defined:[  {    "access": "Allow"    "description": null    "destinationAddressPrefix": "*"    "destinationAddressPrefixes": []    "destinationApplicationSecurityGroups": null    "destinationPortRange": "22"    "destinationPortRanges": []    "direction": "Inbound"    "etag": "W/\"abcdabcd-1234-abcd-1234-abcdabcdabcd\""    "id": "/subscriptions/abcd1234-abcd-1234-abcd-1234abcd1234/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Network/networkSecurityGroups/cc-production-nsg/securityRules/SSH"    "name": "SSH"    "priority": 300    "protocol": "TCP"    "provisioningState": "Succeeded"    "resourceGroup": "cloud-shell-storage-westeurope"    "sourceAddressPrefix": "*"    "sourceAddressPrefixes": []    "sourceApplicationSecurityGroups": null    "sourcePortRange": "*"    "sourcePortRanges": []    "type": "Microsoft.Network/networkSecurityGroups/securityRules"  }]				If the "sourceAddressPrefix" configuration attribute value is set to "*" "internet" or "any" as shown in the output example above the selected network security group allows unrestricted traffic on TCP port 22 hence the Secure Shell (SSH) access to any associated Microsoft Azure virtual machine(s) is not currently secured.			05				Repeat step no. 3 and 4 for each Azure network security group created in the selected subscription.			06				Repeat steps no. 1 â 5 for each subscription available within your Microsoft Azure cloud account.			,01				Sign in to Azure Management Console.			02				Navigate to All resources blade at https://portal.azure.com/#blade/HubsExtension/BrowseAll to access all your Microsoft Azure resources.			03				From the Subscription filter box select the Azure account subscription that you want to access.			04				From the Type filter box select Network security group to list only the security groups available in the selected Azure subscription.			05				Click on the name of the network security group that you want to reconfigure.			06				In the navigation panel under Settings select Inbound security rules to access the list with the inbound rules defined for the selected security group.			07				On the Inbound security rules page click on the noncompliant SSH security group rule that you want to reconfigure (see Audit section part I to identify the right NSG rule).			08				On the selected security group rule configuration panel perform the following:										Select IP Addresses from the Source dropdown list to allow inbound traffic on TCP port 22 from specified IP addresses only.											For Source IP addresses/CIDR ranges provide the source IP address IP addresses or IP address ranges that will be allowed to access the virtual machines associated with the selected network security group (NSG). You can specify a single value or comma-separated list of multiple values. An example of multiple values is 10.0.1.5/32 10.0.1.6/32.											Click Save to apply the configuration changes.					09				Repeat steps no. 5 â 8 for each network security group that allows unrestricted inbound access on TCP port 22 (SSH) available in the current Azure subscription.			10				Repeat steps no. 3 â 9 for each subscription created in your Microsoft Azure cloud account.			,01				Run network nsg rule update command (Windows/macOS/Linux) using the name of the network security group rule that you want to reconfigure as identifier parameter (see Audit section part II to identify the right rule) to restrict SSH access on TCP port 22 to specific IP address(es) by setting the --source-address-prefixes parameter to the IP address IP addresses or IP address ranges that can be allowed to access the virtual machines associated with the selected network security group. You can specify a single value (e.g. 10.0.1.6/32) or a space-separated list of multiple values (e.g. 10.0.1.5/32 10.0.1.6/32):az network nsg rule update	--name SSH	--nsg-name cc-production-vm-nsg	--resource-group cloud-shell-storage-westeurope	--source-address-prefixes 10.0.1.6/3202				The command output should return the metadata for the reconfigured Azure NSG rule:{  "access": "Allow"  "description": null  "destinationAddressPrefix": "*"  "destinationAddressPrefixes": []  "destinationApplicationSecurityGroups": null  "destinationPortRange": "22"  "destinationPortRanges": []  "direction": "Inbound"  ...  "name": "SSH"  "priority": 300  "protocol": "TCP"  "provisioningState": "Succeeded"  "resourceGroup": "cloud-shell-storage-westeurope"  "sourceAddressPrefix": "10.0.1.6/32"  "sourceAddressPrefixes": []  "sourceApplicationSecurityGroups": null  "sourcePortRange": "*"  "sourcePortRanges": []  "type": "Microsoft.Network/networkSecurityGroups/securityRules"}03				Repeat step no. 1 and 2 for each network security group that allows unrestricted inbound access on TCP port 22 (SSH) available in the current Azure subscription.			04				Repeat steps no. 1 â 3 for each subscription created within your Microsoft Azure cloud account.			,https://www.cloudconformity.com/knowledge-base/azure/Network/unrestricted-ssh-access.html
Enable Azure Network Watcher,Network,Medium (should be achieved),Network-003,Ensure that Network Watcher service is enabled within your Azure account subscriptions to help you monitor and diagnose various conditions at the network level. Microsoft Azure Network Watcher provides tools to monitor diagnose view metrics and enable or disable logs for resources within a virtual network.,The network diagnostic and visualization tools provided by Azure Network Watcher help users understand diagnose and gain insight into the Azure cloud network infrastructure.,To determine if the Network Watcher service is enabled within your Microsoft Azure subscription perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to Network Watcher blade at https://portal.azure.com/#blade/Microsoft_Azure_Network/NetworkWatcherMenuBlade/overview.			03				In the navigation panel select Overview to access the main configuration details for the Azure Network Watcher.			04				On the  page choose the Azure subscription that you want to examine and check the Network Watcher status available in the STATUS column. If the status is set to Disabled the Network Watcher service is not enabled for the selected Microsoft Azure subscription. If the status is set to Partially enabled determine if the Network Watcher is enabled for the right Azure region(s).			05				Repeat steps no. 4 for each subscription created in your Microsoft Azure cloud account.			,01				Run network watcher list command (Windows/macOS/Linux) using custom query filters to list the region name service status and the associated resource group for each Network Watcher enabled within the current Azure subscription:az network watcher list	--query '[*].{"location":location"provisioningState":provisioningState"resourceGroup":resourceGroup}'02				Based on the Network Watcher configuration the network watcher list command request should produce one of the following outputs:		If the command output returns an empty array i.e. [] as shown in the example below the Network Watcher service is not enabled for the current Microsoft Azure subscription:[]		If the network watcher list command output returns metadata for one or more Azure locations as shown in the example below verify if the Network Watcher service is enabled for the right Azure region(s):[  {    "location": "northeurope"    "provisioningState": "Succeeded"    "resourceGroup": "cloud-shell-storage-westeurope"  }  {    "location": "westeurope"    "provisioningState": "Succeeded"    "resourceGroup": "cloud-shell-storage-westeurope"  }]03				Repeat step no. 1 and 2 for each subscription available within your Microsoft Azure cloud account.			,01				Sign in to Azure Management Console.			02				Navigate to Network Watcher blade at https://portal.azure.com/#blade/Microsoft_Azure_Network/NetworkWatcherMenuBlade/overview.			03				In the navigation panel select Overview to access the main configuration details for the Azure Network Watcher.			04				On the Overview page choose the Azure subscription for which you want to enable Network Watcher then perform one the following actions:										To enable Network Watcher for all Azure cloud regions/locations right click on the selected subscription and choose Enable network watcher in all regions option.											To enable Network Watcher for individual Azure cloud regions click on the selected subscription to expand the panel with all the available Azure locations then right click on the required region and select Enable network watcher to enable the service for the specified region.					05				Repeat steps no. 4 for each subscription created in your Microsoft Azure cloud account.			,01				Run network watcher configure command (Windows/macOS/Linux) to enable the Network Watcher service for the Microsoft Azure regions/locations specified as values for the --locations parameter. For example the following network watcher configure command request enables Azure Network Watcher for the West and North Europe regions:az network watcher configure	--locations westeurope northeurope	--enabled true	--resource-group "cloud-shell-storage-westeurope"02				The command output should return the Network Watcher service configuration metadata available for the specified Azure regions:[  {    "id": "/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Network/networkWatchers/northeurope-watcher"    "location": "northeurope"    "name": "northeurope-watcher"    "provisioningState": "Succeeded"    "resourceGroup": "cloud-shell-storage-westeurope"    "tags": null    "type": "Microsoft.Network/networkWatchers"  }  {    "id": "/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Network/networkWatchers/westeurope-watcher"    "location": "westeurope"    "name": "westeurope-watcher"    "provisioningState": "Succeeded"    "resourceGroup": "cloud-shell-storage-westeurope"    "tags": null    "type": "Microsoft.Network/networkWatchers"  }]03				Repeat step no. 1 and 2 for each subscription created within your Microsoft Azure cloud account.			,https://www.cloudconformity.com/knowledge-base/azure/Network/enable-network-watcher.html
Check for PostgreSQL Log Retention Period,PostgreSQL,Medium (should be achieved),NA,Ensure that all your Microsoft Azure PostgreSQL servers have a sufficient log retention period i.e. greater than 3 days configured for reliability and compliance purposes. The retention period represented by the "log_retention_days" parameter is the number of days to retain log data for the databases hosted on Azure PostgreSQL servers. The compliant value for the retention period is 4 to 7 days (inclusive).,A retention period of 4 days or more should allow you to collect the necessary amount of logging data required to identify and mitigate any PostgreSQL security and performance issues. The logging data can contain query logs â useful to check for sub-optimal performance and error logs â used to identify anomalies and potential security breaches misuse of information and unauthorized access to PostgreSQL databases.,To determine if the log retention period ("log_retention_days" parameter) configured for your PostgreSQL database servers is greater than 3 days perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to All resources blade at https://portal.azure.com/#blade/HubsExtension/BrowseAll to access all your Microsoft Azure resources.			03				From the Type filter box select Azure Database for PostgreSQL server to list only the PostgreSQL servers provisioned in your Azure account.			04				Click on the name of the PostgreSQL database server that you want to examine.			05				In the navigation panel under Settings select Server parameters to access the configuration parameters available for the selected PostgreSQL server.			06				On Server parameters page find the log_retention_days parameter using the Search to filter items search box. Once the parameter is found check its configuration value available within the VALUE column. If the parameter value is set to 3 (days) or less the "log_retention_days" parameter value is not compliant therefore the selected Azure PostgreSQL database server does not have a sufficient log retention period configured.			07				Repeat steps no. 4 â 6 for each PostgreSQL database server available within the current Azure subscription.			08				Repeat steps no. 3 â 7 for each subscription created in your Microsoft Azure cloud account.			,01				Run postgres server list command (Windows/macOS/Linux) using custom query filters to list the names of all PostgreSQL database servers (and the name of their associated resource groups) available in the current Azure subscription:az postgres server list	--output table	--query '[*].{name:name resourceGroup:resourceGroup}'02				The command output should return a table with requested PostgreSQL server information:Name                ResourceGroup------------------  ------------------------------cc-staging-server   cloud-shell-storage-westeuropecc-postgres-server  cloud-shell-storage-westeurope03				Run postgres server configuration show command (Windows/macOS/Linux) using the name of the Azure PostgreSQL server that you want to examine and its associated resource group as identifier parameters with custom query filters to get the "log_retention_days" parameter value for the selected database server:az postgres server configuration show	--server-name "cc-staging-server"	--resource-group "cloud-shell-storage-westeurope"	--name log_retention_days	--query 'value'04				The command output should return the requested configuration value (i.e. number of days):"3"				If postgres server configuration show command output returns 3 (days) or less as shown in the output example above the "log_retention_days" parameter value is not compliant thus the selected Azure PostgreSQL database server does not have a sufficient log retention period currently configured.			05				Repeat step no. 3 and 4 for each Microsoft Azure PostgreSQL server available in the selected subscription.			06				Repeat steps no. 1 â 5 for each subscription available within your Microsoft Azure cloud account.			,01				Sign in to Azure Management Console.			02				Navigate to All resources blade at  to access all your Microsoft Azure resources.			03				From the Type filter box select Azure Database for PostgreSQL server to list only the PostgreSQL servers available in your Azure account.			04				Click on the name of the PostgreSQL server that you want to reconfigure (see Audit section part I to identify the right Azure PostgreSQL resource).			05				In the navigation panel under Settings select Server parameters to access the configuration parameters for the selected database server.			06				On Server parameters page find the log_retention_days parameter using the Search to filter items search box. 			07				Once the log_retention_days server parameter is found enter a value between 4 and 7 (inclusive) within the VALUE box. This value represents the number of days to retain log data for the databases available on the selected Azure PostgreSQL server.			08				Click Save to apply the configuration changes.			09				Repeat steps no. 4 â 8 for each PostgreSQL database server provisioned in the selected subscription.			10				Repeat steps no. 3 â 8 for each subscription created in your Microsoft Azure cloud account.			,01				Run postgres server configuration set command (Windows/macOS/Linux) using the name of the PostgreSQL server that you want to reconfigure as identifier parameter (see Audit section part II to identify the right Azure resource) to reconfigure the "log_retention_days" parameter in order extend the log retention period set for the selected Azure PostgreSQL database server to 7 days:az postgres server configuration set	--server-name "cc-staging-server"	--resource-group "cloud-shell-storage-westeurope"	--name log_retention_days	--value 702				The command output should return the metadata for the reconfigured server parameter:{  "allowedValues": "1-7"  "dataType": "Integer"  "defaultValue": "3"  "description": "Sets how many days a log file is saved for."  "id": "/subscriptions/abcdabcd-abcd-abcd-abcd-abcdabcdabcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.DBforPostgreSQL/servers/cc-staging-server/configurations/log_retention_days"  "name": "log_retention_days"  "resourceGroup": "cloud-shell-storage-westeurope"  "source": "user-override"  "type": "Microsoft.DBforPostgreSQL/servers/configurations"  "value": "7"}03				Repeat step no. 1 and 2 for each PostgreSQL database server available in the selected subscription.			04				Repeat steps no. 1 â 3 for each subscription created within your Microsoft Azure cloud account.			,https://www.cloudconformity.com/knowledge-base/azure/PostgreSQL/log-retention-days.html
Enable "CONNECTION_THROTTLING" Parameter for PostgreSQL Servers,PostgreSQL,Medium (should be achieved),NA,Ensure that "connection_throttling" server parameter is enabled for all PostgreSQL database servers provisioned within your Microsoft Azure cloud account. The "connection_throttling" parameter enables temporary connection throttling per IP address for too many invalid login failures.,Enabling "connection_throttling" parameter helps generate logging data with respect to concurrent connections. This logging data can be used to discover PostgreSQL database servers that get degraded by an overload of legitimate users or identify Distributed Denial of Service (DDoS) attacks that work by exhausting the network resources.,To determine if "connection_throttling" parameter is enabled for your Azure PostgreSQL database servers perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to All resources blade at https://portal.azure.com/#blade/HubsExtension/BrowseAll to access all your Microsoft Azure resources.			03				From the Type filter box select Azure Database for PostgreSQL server to list only the PostgreSQL servers created in your Azure account.			04				Click on the name of the PostgreSQL database server that you want to examine.			05				In the navigation panel under Settings select Server parameters to access the configuration parameters available for the selected PostgreSQL server.			06				On Server parameters page find the connection_throttling parameter using the Search to filter items search box. Once the parameter is found check its configuration value available within the VALUE column. If the parameter value is set to OFF the "connection_throttling" server parameter is not enabled for the selected Azure PostgreSQL database server.			07				Repeat steps no. 4 â 6 for each PostgreSQL database server provisioned in the current Azure subscription.			08				Repeat steps no. 3 â 7 for each subscription created in your Microsoft Azure cloud account.			,01				Run postgres server list command (Windows/macOS/Linux) using custom query filters to list the names of all PostgreSQL database servers (and the name of their associated resource groups) available in the current Azure cloud subscription:az postgres server list	--output table	--query '[*].{name:name resourceGroup:resourceGroup}'02				The command output should return a table with requested PostgreSQL server information:Name                ResourceGroup------------------  ------------------------------cc-psql-db-server   cloud-shell-storage-westeurope03				Run postgres server configuration show command (Windows/macOS/Linux) using the name of the Azure PostgreSQL server that you want to examine and its associated resource group as identifier parameters and custom query filters to obtain the "connection_throttling" parameter value for the selected database server:az postgres server configuration show	--server-name "cc-psql-db-server"	--resource-group "cloud-shell-storage-westeurope"	--name connection_throttling	--query 'value'04				The command output should return the requested configuration value ("ON" for enabled "OFF" for disabled):"OFF"				If postgres server configuration show command output returns "OFF" the "connection_throttling" server parameter is not enabled for the selected Azure PostgreSQL database server.			05				Repeat step no. 3 and 4 for each Microsoft Azure PostgreSQL server available in the selected subscription.			06				Repeat steps no. 1 â 5 for each subscription available within your Microsoft Azure cloud account.			,01				Sign in to Azure Management Console.			02				Navigate to All resources blade at https://portal.azure.com/#blade/HubsExtension/BrowseAll to access all your Microsoft Azure resources.			03				From the Type filter box select Azure Database for PostgreSQL server to list only the PostgreSQL servers provisioned in your Azure account.			04				Click on the name of the PostgreSQL server that you want to reconfigure (see Audit section part I to identify the right database server).			05				In the navigation panel under Settings select Server parameters to access the configuration parameters for the selected PostgreSQL database server.			06				On Server parameters page find the connection_throttling parameter using the Search to filter items search box. 			07				Once the connection_throttling server parameter is found enable it by selecting ON from the toggle configuration button available in the VALUE column.			08				Click Save to apply the configuration changes.			09				Repeat steps no. 4 â 8 for each PostgreSQL database server available within the selected subscription.			10				Repeat steps no. 3 â 8 for each subscription created in your Microsoft Azure cloud account.			,01				Run postgres server configuration set command (Windows/macOS/Linux) using the name of the PostgreSQL server that you want to reconfigure as identifier parameter (see Audit section part II to identify the right database resource) to enable "connection_throttling" parameter for the selected Microsoft Azure PostgreSQL database server:az postgres server configuration set	--server-name "cc-psql-db-server"	--resource-group "cloud-shell-storage-westeurope"	--name connection_throttling	--value on02				The command output should return the metadata for the reconfigured server parameter:{  "allowedValues": "onoff"  "dataType": "Boolean"  "defaultValue": "on"  "description": "Enables temporary connection throttling per IP for too many invalid password login failures."  "id": "/subscriptions/abcd1234-abcd-1234-abcd-abcd1234abcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.DBforPostgreSQL/servers/cc-psql-db-server/configurations/connection_throttling"  "name": "connection_throttling"  "resourceGroup": "cloud-shell-storage-westeurope"  "source": "user-override"  "type": "Microsoft.DBforPostgreSQL/servers/configurations"  "value": "on"}03				Repeat step no. 1 and 2 for each PostgreSQL database server currently available in the selected subscription.			04				Repeat steps no. 1 â 3 for each subscription created within your Microsoft Azure cloud account.			,https://www.cloudconformity.com/knowledge-base/azure/PostgreSQL/connection-throttling.html
Enable "LOG_CHECKPOINTS" Parameter for PostgreSQL Servers,PostgreSQL,Medium (should be achieved),NA,Ensure that "log_checkpoints" server parameter is enabled for all PostgreSQL database servers available within your Microsoft Azure cloud account. The "log_checkpoints" parameter allows checkpoints and restart points to be logged in the Azure PostgreSQL server log.,Checkpoints are usually disrupting to your Azure PostgreSQL database performance and can cause connections to stall for up to a few seconds while they occur. By enabling the "log_checkpoints" parameter you can get verbose logging of the checkpoint process for your Azure PostgreSQL database servers. This logging data can be used to identify and troubleshoot sub-optimal PostgreSQL database performance.,To determine if "log_checkpoints" parameter is enabled for your Azure PostgreSQL servers perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to All resources blade at https://portal.azure.com/#blade/HubsExtension/BrowseAll to access all your Microsoft Azure resources.			03				From the Type filter box select Azure Database for PostgreSQL server to list the PostgreSQL servers available within your Azure account.			04				Click on the name of the PostgreSQL database server that you want to examine.			05				In the navigation panel under Settings select Server parameters to access the configuration parameters for the selected PostgreSQL server.			06				On Server parameters page find the log_checkpoints parameter entry using the Search to filter items search box. Once the parameter entry is found check its configuration value available within the VALUE column. If the parameter value is set to OFF the "log_checkpoints" server parameter is not enabled for the selected PostgreSQL database server.			07				Repeat steps no. 4 â 6 for each PostgreSQL database server provisioned in the current Azure subscription.			08				Repeat steps no. 3 â 7 for each subscription created in your Microsoft Azure cloud account.			,01				Run postgres server list command (Windows/macOS/Linux) using custom query filters to list the names of all PostgreSQL database servers (and the name of their associated resource groups) available in the current Azure subscription:az postgres server list	--output table	--query '[*].{name:name resourceGroup:resourceGroup}'02				The command output should return a table with requested PostgreSQL server information:Name                ResourceGroup------------------  ------------------------------cc-project5-server  cloud-shell-storage-westeurope03				Run postgres server configuration show command (Windows/macOS/Linux) using the name of the Azure PostgreSQL server that you want to examine and its associated resource group as identifier parameters with custom query filters to get the "log_checkpoints" parameter value for the selected database server:az postgres server configuration show	--server-name "cc-project5-server"	--resource-group "cloud-shell-storage-westeurope"	--name log_checkpoints	--query 'value'04				The command output should return the requested configuration value:"OFF"				If postgres server configuration show command output returns "OFF" as shown in the example above the "log_checkpoints" server parameter is not enabled for the selected Azure PostgreSQL database server.			05				Repeat step no. 3 and 4 for each Azure PostgreSQL server available in the selected subscription.			06				Repeat steps no. 1 â 5 for each subscription available within your Microsoft Azure cloud account.			,01				Sign in to Azure Management Console.			02				Navigate to All resources blade at https://portal.azure.com/#blade/HubsExtension/BrowseAll to access all your Microsoft Azure resources.			03				From the Type filter box select Azure Database for PostgreSQL server to list the PostgreSQL servers available in your Azure account.			04				Click on the name of the PostgreSQL server that you want to reconfigure (see Audit section part I to identify the right Azure resource).			05				In the navigation panel under Settings select Server parameters to access the configuration parameters for the selected PostgreSQL server.			06				On Server parameters page find the log_checkpoints parameter entry using the Search to filter items search box. 			07				Once log_checkpoints server parameter entry is found enable the parameter by selecting the ON configurable value available within the VALUE column.			08				Click Save to apply the configuration changes.			09				Repeat steps no. 4 â 8 for each PostgreSQL database server provisioned in the selected subscription.			10				Repeat steps no. 3 â 8 for each subscription created in your Microsoft Azure cloud account.			,01				Run postgres server configuration set command (Windows/macOS/Linux) using the name of the PostgreSQL server that you want to reconfigure as identifier parameter (see Audit section part II to identify the right Azure resource) to enable "log_checkpoints" parameter for the selected Azure PostgreSQL database server:az postgres server configuration set	--server-name "cc-project5-server"	--resource-group "cloud-shell-storage-westeurope"	--name log_checkpoints	--value on02				The command output should return the metadata for the reconfigured server parameter:{  "allowedValues": "onoff"  "dataType": "Boolean"  "defaultValue": "on"  "description": "Logs each checkpoint."  "id": "/subscriptions/abcdabcd-abcd-1234-abcd-abcdabcdabcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.DBforPostgreSQL/servers/cc-project5-server/configurations/log_checkpoints"  "name": "log_checkpoints"  "resourceGroup": "cloud-shell-storage-westeurope"  "source": "user-override"  "type": "Microsoft.DBforPostgreSQL/servers/configurations"  "value": "on"}03				Repeat step no. 1 and 2 for each PostgreSQL database server available in the selected subscription.			04				Repeat steps no. 1 â 3 for each subscription created within your Microsoft Azure cloud account.			,https://www.cloudconformity.com/knowledge-base/azure/PostgreSQL/log-checkpoints.html
Enable "LOG_CONNECTIONS" Parameter for PostgreSQL Servers,PostgreSQL,Medium (should be achieved),NA,Ensure that "log_connections" server parameter is enabled for all PostgreSQL database servers available in your Microsoft Azure cloud account. The "log_connections" parameter allows each attempted connection to the database server to be logged including successful client authentication requests. Only Azure users with administrative privileges can change this parameter at session start and it cannot be changed during an access session.,The logging data generated by "log_connections" parameter can be used to identify troubleshoot and repair configuration errors and sub-optimal performance for your Microsoft Azure PostgreSQL database servers.,To determine if "log_connections" parameter is enabled for your Azure PostgreSQL servers perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to All resources blade at https://portal.azure.com/#blade/HubsExtension/BrowseAll to access all your Microsoft Azure resources.			03				From the Type filter box select Azure Database for PostgreSQL server to list all the PostgreSQL servers available in your Azure account.			04				Click on the name of the PostgreSQL database server that you want to examine.			05				In the navigation panel under Settings select Server parameters to access the configuration parameters available for the selected PostgreSQL server.			06				On Server parameters page find the log_connections parameter using the Search to filter items search box. Once the parameter is found check its configuration value available within the VALUE column. If the parameter value is set to OFF the "log_connections" server parameter is not enabled for the selected Azure PostgreSQL database server.			07				Repeat steps no. 4 â 6 for each PostgreSQL database server provisioned in the current Azure subscription.			08				Repeat steps no. 3 â 7 for each subscription created in your Microsoft Azure cloud account.			,01				Run postgres server list command (Windows/macOS/Linux) using custom query filters to list the names of all PostgreSQL database servers (and the name of their associated resource groups) available in the current Azure subscription:az postgres server list	--output table	--query '[*].{name:name resourceGroup:resourceGroup}'02				The command output should return a table with requested PostgreSQL server information:Name                ResourceGroup------------------  ------------------------------cc-postgres-server  cloud-shell-storage-westeuropecc-project5-server  cloud-shell-storage-westeurope03				Run postgres server configuration show command (Windows/macOS/Linux) using the name of the Azure PostgreSQL server that you want to examine and its associated resource group as identifier parameters with custom query filters to get the "log_connections" parameter value for the selected database server:az postgres server configuration show	--server-name "cc-postgres-server"	--resource-group "cloud-shell-storage-westeurope"	--name log_connections	--query 'value'04				The command output should return the requested configuration value ("ON" for enabled "OFF" for disabled):"OFF"				If postgres server configuration show command output returns "OFF" as shown in the example above the "log_connections" server parameter is not enabled for the selected Azure PostgreSQL database server.			05				Repeat step no. 3 and 4 for each Microsoft Azure PostgreSQL server available in the selected subscription.			06				Repeat steps no. 1 â 5 for each subscription available within your Microsoft Azure cloud account.			,01				Sign in to Azure Management Console.			02				Navigate to All resources blade at https://portal.azure.com/#blade/HubsExtension/BrowseAll to access all your Microsoft Azure resources.			03				From the Type filter box select Azure Database for PostgreSQL server to list the PostgreSQL servers available in your Azure account.			04				Click on the name of the PostgreSQL server that you want to reconfigure (see Audit section part I to identify the right Azure resource).			05				In the navigation panel under Settings select Server parameters to access the configuration parameters for the selected database server.			06				On Server parameters page find the log_connections parameter using the Search to filter items search box. 			07				Once the log_connections server parameter is found enable it by selecting ON from the toggle button available within the VALUE column.			08				Click Save to apply the configuration changes.			09				Repeat steps no. 4 â 8 for each PostgreSQL database server provisioned in the selected subscription.			10				Repeat steps no. 3 â 8 for each subscription created in your Microsoft Azure cloud account.			,01				Run postgres server configuration set command (Windows/macOS/Linux) using the name of the PostgreSQL server that you want to reconfigure as identifier parameter (see Audit section part II to identify the right Azure resource) to enable "log_connections" parameter for the selected Azure PostgreSQL database server:az postgres server configuration set	--server-name "cc-postgres-server"	--resource-group "cloud-shell-storage-westeurope"	--name log_connections	--value on02				The command output should return the metadata for the reconfigured server parameter:{  "allowedValues": "onoff"  "dataType": "Boolean"  "defaultValue": "on"  "description": "Logs each successful connection."  "id": "/subscriptions/abcdabcd-abcd-1234-abcd-abcdabcdabcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.DBforPostgreSQL/servers/cc-postgres-server/configurations/log_connections"  "name": "log_connections"  "resourceGroup": "cloud-shell-storage-westeurope"  "source": "user-override"  "type": "Microsoft.DBforPostgreSQL/servers/configurations"  "value": "on"}03				Repeat step no. 1 and 2 for each PostgreSQL database server available in the selected subscription.			04				Repeat steps no. 1 â 3 for each subscription created within your Microsoft Azure cloud account.			,https://www.cloudconformity.com/knowledge-base/azure/PostgreSQL/log-connections.html
Enable "LOG_DISCONNECTIONS" Parameter for PostgreSQL Servers,PostgreSQL,Medium (should be achieved),NA,Ensure that the "log_disconnections" server parameter is enabled for all PostgreSQL database servers provisioned in your Microsoft Azure cloud account. The "log_disconnections" parameter enables the logging of session termination. The log output provides information similar to the one generated by the "log_connections" parameter plus the duration of the session. Only Azure account admins can change this parameter at the session start and it cannot be changed at all during a session.,Enabling the "log_disconnections" parameter starts recording PostgreSQL activity data that can be useful to identify troubleshoot and repair configuration errors and sub-optimal performance for your Microsoft Azure PostgreSQL database servers.,To determine if "log_disconnections" parameter is enabled for your Azure PostgreSQL servers perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to All resources blade at https://portal.azure.com/#blade/HubsExtension/BrowseAll to access all your Microsoft Azure resources.			03				From the Type filter box select Azure Database for PostgreSQL server to list all the PostgreSQL servers available in your Azure account.			04				Click on the name of the PostgreSQL database server that you want to examine.			05				In the navigation panel under Settings select Server parameters to access the configuration parameters available for the selected PostgreSQL server.			06				On Server parameters page find the log_disconnections parameter using the Search to filter items search box. Once the parameter is found check its configuration value listed within the VALUE column. If the parameter value is set to OFF the "log_disconnections" server parameter is not enabled for the selected Azure PostgreSQL database server.			07				Repeat steps no. 4 â 6 for each PostgreSQL database server provisioned in the current Azure subscription.			08				Repeat steps no. 3 â 7 for each subscription created in your Microsoft Azure cloud account.			,01				Run postgres server list command (Windows/macOS/Linux) using custom query filters to list the names of all PostgreSQL database servers (and the name of their associated resource groups) available in the current Microsoft Azure subscription:az postgres server list	--output table	--query '[*].{name:name resourceGroup:resourceGroup}'02				The command output should return a table with requested PostgreSQL server information:Name                ResourceGroup------------------  ------------------------------cc-development-db   cloud-shell-storage-westeurope03				Run postgres server configuration show command (Windows/macOS/Linux) using the name of the Azure PostgreSQL server that you want to examine and its associated resource group as identifier parameters with custom query filters to get the "log_disconnections" parameter value for the selected database server:az postgres server configuration show	--server-name "cc-development-db"	--resource-group "cloud-shell-storage-westeurope"	--name log_disconnections	--query 'value'04				The command output should return the requested configuration value ("ON" for enabled "OFF" for disabled):"OFF"				If postgres server configuration show command output returns "OFF" the "log_disconnections" server parameter is not enabled for the selected Azure PostgreSQL database server.			05				Repeat step no. 3 and 4 for each Microsoft Azure PostgreSQL server provisioned in the selected subscription.			06				Repeat steps no. 1 â 5 for each subscription available within your Microsoft Azure cloud account.			,01				Sign in to Azure Management Console.			02				Navigate to All resources blade at https://portal.azure.com/#blade/HubsExtension/BrowseAll to access all your Microsoft Azure resources.			03				From the Type filter box select Azure Database for PostgreSQL server to list the PostgreSQL servers available in your Azure account.			04				Click on the name of the PostgreSQL server that you want to reconfigure (see Audit section part I to identify the right database server).			05				In the navigation panel under Settings select Server parameters to access the configuration parameters for the selected PostgreSQL database server.			06				On Server parameters page find the log_disconnections parameter using the Search to filter items search box. 			07				Once the log_disconnections server parameter is found enable it by selecting ON from the toggle configuration button available in the VALUE column.			08				Click Save to apply the configuration changes.			09				Repeat steps no. 4 â 8 for each PostgreSQL database server available within the selected subscription.			10				Repeat steps no. 3 â 8 for each subscription created in your Microsoft Azure cloud account.			,01				Run postgres server configuration set command (Windows/macOS/Linux) using the name of the PostgreSQL server that you want to reconfigure as identifier parameter (see Audit section part II to identify the right database resource) to enable "log_disconnections" parameter for the selected Azure PostgreSQL database server:az postgres server configuration set	--server-name "cc-development-db"	--resource-group "cloud-shell-storage-westeurope"	--name log_disconnections	--value on02				The command output should return the metadata for the reconfigured server parameter:{  "allowedValues": "onoff"  "dataType": "Boolean"  "defaultValue": "off"  "description": "Logs end of a session including duration."  "id": "/subscriptions/abcdabcd-abcd-1234-abcd-abcdabcdabcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.DBforPostgreSQL/servers/cc-development-db/configurations/log_disconnections"  "name": "log_disconnections"  "resourceGroup": "cloud-shell-storage-westeurope"  "source": "user-override"  "type": "Microsoft.DBforPostgreSQL/servers/configurations"  "value": "on"}03				Repeat step no. 1 and 2 for each PostgreSQL database server provisioned in the selected subscription.			04				Repeat steps no. 1 â 3 for each subscription created within your Microsoft Azure cloud account.			,https://www.cloudconformity.com/knowledge-base/azure/PostgreSQL/log-disconnections.html
Enable "LOG_DURATION" Parameter for PostgreSQL Servers,PostgreSQL,Medium (should be achieved),NA,Ensure that "log_duration" server parameter is enabled for all PostgreSQL database servers created in your Microsoft Azure cloud account. Once enabled the "log_duration" parameter allows recording the duration of each completed PostgreSQL statement. Only users with administrative privileges can change this setting within Azure PostgreSQL server configuration. For database clients using extended query protocol the duration of the "Parse" "Bind" and "Execute" steps is logged independently.,Once "log_duration" parameter is enabled your PostgreSQL servers can log the duration of each completed SQL statement which in turn generates query and error logs if any issues are detected. Database query and error logs can be used to identify troubleshoot and repair configuration errors and sub-optimal performance for your Azure PostgreSQL database servers.,To determine if "log_duration" parameter is enabled for your Azure PostgreSQL servers perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to All resources blade at https://portal.azure.com/#blade/HubsExtension/BrowseAll to access all your Microsoft Azure resources.			03				From the Type filter box select Azure Database for PostgreSQL server to list only the PostgreSQL servers available in your Azure account.			04				Click on the name of the PostgreSQL database server that you want to examine.			05				In the navigation panel under Settings select Server parameters to access the configuration parameters available for the selected PostgreSQL server.			06				On Server parameters page find the log_duration parameter using the Search to filter items search box. Once this parameter is found check its configuration value available in the VALUE column. If the parameter value is set to OFF the "log_duration" server parameter is not enabled for the selected Azure PostgreSQL database server.			07				Repeat steps no. 4 â 6 for each PostgreSQL database server available within the current Azure subscription.			08				Repeat steps no. 3 â 7 for each subscription created in your Microsoft Azure cloud account.			,01				Run postgres server list command (Windows/macOS/Linux) using custom query filters to list the names of all PostgreSQL database servers (and the name of their associated resource groups) available in the current Azure account subscription:az postgres server list	--output table	--query '[*].{name:name resourceGroup:resourceGroup}'02				The command output should return a table with requested PostgreSQL server information:Name                ResourceGroup------------------  ------------------------------cc-prod-db-server  cloud-shell-storage-westeuropecc-psql-db-server  cloud-shell-storage-westeurope03				Run postgres server configuration show command (Windows/macOS/Linux) using the name of the Azure PostgreSQL server that you want to examine and its associated resource group as identifier parameters with custom query filters to expose the "log_duration" parameter value for the selected database server:az postgres server configuration show	--server-name "cc-prod-db-server"	--resource-group "cloud-shell-storage-westeurope"	--name log_duration	--query 'value'04				The command output should return the requested configuration value ("ON" for enabled "OFF" for disabled):"OFF"				If postgres server configuration show command output returns "OFF" as shown in the output example above the "log_duration" server parameter is not enabled for the selected Azure PostgreSQL database server.			05				Repeat step no. 3 and 4 for each Microsoft Azure PostgreSQL server provisioned in the selected subscription.			06				Repeat steps no. 1 â 5 for each subscription available within your Microsoft Azure cloud account.			,01				Sign in to Azure Management Console.			02				Navigate to All resources blade at https://portal.azure.com/#blade/HubsExtension/BrowseAll to access all your Microsoft Azure resources.			03				From the Type filter box select Azure Database for PostgreSQL server to list the PostgreSQL servers currently available in your Azure account.			04				Click on the name of the PostgreSQL server that you want to reconfigure (see Audit section part I to identify the right Azure resource).			05				In the navigation panel under Settings select Server parameters to access the configuration parameters for the selected database server.			06				On Server parameters page find the log_duration parameter using the Search to filter items search box. 			07				Once log_duration server parameter is found enable this parameter by selecting ON from the toggle button available in the VALUE column.			08				Click Save to apply the configuration changes.			09				Repeat steps no. 4 â 8 for each PostgreSQL database server provisioned in the selected subscription.			10				Repeat steps no. 3 â 8 for each subscription created in your Microsoft Azure cloud account.			,01				Run postgres server configuration set command (Windows/macOS/Linux) using the name of the PostgreSQL server that you want to reconfigure as identifier parameter (see Audit section part II to identify the right Azure resource) to enable "log_duration" parameter for the selected Microsoft Azure PostgreSQL database server:az postgres server configuration set	--server-name "cc-prod-db-server"	--resource-group "cloud-shell-storage-westeurope"	--name log_duration	--value on02				The command output should return the metadata for the reconfigured server parameter:{  "allowedValues": "onoff"  "dataType": "Boolean"  "defaultValue": "off"  "description": "Logs the duration of each completed SQL statement."  "id": "/subscriptions/abcdabcd-abcd-abcd-abcd-abcdabcdabcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.DBforPostgreSQL/servers/cc-prod-db-server/configurations/log_duration"  "name": "log_duration"  "resourceGroup": "cloud-shell-storage-westeurope"  "source": "user-override"  "type": "Microsoft.DBforPostgreSQL/servers/configurations"  "value": "on"}03				Repeat step no. 1 and 2 for each PostgreSQL database server available in the selected subscription.			04				Repeat steps no. 1 â 3 for each subscription created within your Microsoft Azure cloud account.			,https://www.cloudconformity.com/knowledge-base/azure/PostgreSQL/log-duration.html
Enable In-Transit Encryption for PostgreSQL Database Servers,PostgreSQL,High (not acceptable risk),NA,Ensure that Microsoft Azure PostgreSQL server data is encrypted in transit in order to meet security and compliance requirements. In-transit encryption helps prevent unauthorized users from getting access to critical data available in your Azure PostgreSQL databases.,When working with production data it is strongly recommended to encrypt all sensitive information in transit by enforcing Secure Sockets Layer (SSL) connections between PostgreSQL database servers and client applications. Once enabled this additional layer of security will protect your data against Man-In-the-Middle (MITM) attacks and fulfill compliance requirements for in-transit encryption within your company.,To determine in-transit encryption configuration for your Azure PostgreSQL database servers perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to All resources blade at https://portal.azure.com/#blade/HubsExtension/BrowseAll to access all your Microsoft Azure resources.			03				From the Type filter box select Azure Database for PostgreSQL server to list the PostgreSQL servers available within your Azure account.			04				Click on the name of the PostgreSQL database server that you want to examine.			05				In the navigation panel under Settings select Connection security to access the connection security settings for the selected PostgreSQL server.			06				On the Connection security configuration page in the SSL settings section check the Enforce SSL connection status. If the setting status is set to DISABLED in-transit encryption is not enabled for the selected Microsoft Azure PostgreSQL server.			07				Repeat steps no. 4 â 6 for each PostgreSQL database server available in the current Azure subscription.			08				Repeat steps no. 3 â 7 for each subscription created in your Microsoft Azure cloud account.			,01				Run postgres server list command (Windows/macOS/Linux) using custom query filters to list the names of all PostgreSQL database servers (and the name of their associated resource groups) available in the current Azure subscription:az postgres server list	--output table	--query '[*].{name:name resourceGroup:resourceGroup}'02				The command output should return a table with requested PostgreSQL server information:Name                  ResourceGroup--------------------  ------------------------------cc-production-server  cloud-shell-storage-westeuropecc-postgresql-server  cloud-shell-storage-westeurope03				Run postgres server show command (Windows/macOS/Linux) using the name of the Azure PostgreSQL server that you want to examine as identifier parameter and custom query filters to obtain the "Enforce SSL connection" setting status for the selected database server:az postgres server show	--name "cc-production-server"	--resource-group "cloud-shell-storage-westeurope"	--query sslEnforcement04				The command output should return the requested configuration setting status:"Disabled"				If postgres server show command output returns "Disabled" as shown in the example above the encryption in transit using SSL is not enabled for the selected Microsoft Azure PostgreSQL database server.			05				Repeat step no. 3 and 4 for each Azure PostgreSQL server provisioned in the selected subscription.			06				Repeat steps no. 1 â 5 for each subscription available within your Microsoft Azure cloud account.			,01				Sign in to Azure Management Console.			02				Navigate to All resources blade at https://portal.azure.com/#blade/HubsExtension/BrowseAll to access all your Microsoft Azure resources.			03				From the Type filter box select Azure Database for PostgreSQL server to list the PostgreSQL servers available in your Azure account.			04				Click on the name of the PostgreSQL server that you want to reconfigure (see Audit section part I to identify the right PostgreSQL resource).			05				In the navigation panel under Settings select Connection security to access the connection security settings for the selected PostgreSQL database server.			06				On the Connection security configuration page in the SSL settings section select ENABLED next to Enforce SSL connection setting to enable in-transit encryption for the selected Azure PostgreSQL database server. 			07				Click Save to apply the configuration changes.			08				Repeat steps no. 4 â 7 for each PostgreSQL database server available within the selected subscription.			09				Repeat steps no. 3 â 8 for each subscription created in your Microsoft Azure cloud account.			,01				Run postgres server update command (Windows/macOS/Linux) using the name of the Azure PostgreSQL server that you want to reconfigure as identifier parameter (see Audit section part II to identify the right Azure resource) to enable in-transit encryption for the selected database server by setting the --ssl-enforcement parameter to Enabled:az postgres server update	--name "cc-production-server"	--resource-group "cloud-shell-storage-westeurope"	--ssl-enforcement Enabled02				The command output should return the metadata for the reconfigured Azure PostgreSQL server:{  "earliestRestoreDate": "2019-07-24T11:28:45.067000+00:00"  "fullyQualifiedDomainName": "cc-production-server.postgres.database.azure.com"  "location": "westeurope"  "name": "cc-production-server"  "replicaCapacity": 5  "replicationRole": "None"  "resourceGroup": "cloud-shell-storage-westeurope"   ...   "sslEnforcement": "Enabled"  "storageProfile": {    "backupRetentionDays": 30    "geoRedundantBackup": "Disabled"    "storageAutoGrow": "Disabled"    "storageAutogrow": null    "storageMb": 5120  }  "tags": {}  "type": "Microsoft.DBforPostgreSQL/servers"  "userVisibleState": "Ready"  "version": "10"}03				Repeat step no. 1 and 2 for each PostgreSQL database server available in the selected subscription.			04				Repeat steps no. 1 â 3 for each subscription created within your Microsoft Azure cloud account.			,https://www.cloudconformity.com/knowledge-base/azure/PostgreSQL/in-transit-encryption.html
Use Azure Active Directory Admin for PostgreSQL Authentication,PostgreSQL,Medium (should be achieved),PostgreSQL-008,Ensure that Azure Active Directory authentication is configured to allow you to centrally manage identity and access to your Microsoft Azure PostgreSQL database servers by using an Active Directory administrator.,Azure Active Directory (AAD) authentication represents a secure instrument that can be used to connect to your Azure PostgreSQL database servers using identities available within the Active Directory. With Azure AAD authentication the identities of the PostgreSQL database users can be managed in one central location simplifying access permission management. Other benefits provided by the AAD authentication feature include:Providing authentication across Microsoft Azure services in a uniform way;Supporting multiple forms of authentication in order to eliminate the need to store access passwords;Using PostgreSQL database roles to authenticate identities at the database level;Allowing customers to manage PostgreSQL database permissions using external (AAD) groups;Providing tools for management of password policies and password rotation in one single place;Supporting token-based authentication for applications connecting to your PostgreSQL database servers.,To determine if an Active Directory administrator is configured for PostgreSQL authentication within your Azure PostgreSQL database server settings perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to All resources blade at https://portal.azure.com/#blade/HubsExtension/BrowseAll to access all your Microsoft Azure resources.			03				From the Type filter box select Azure Database for PostgreSQL server to list only the PostgreSQL database servers provisioned in your Azure account.			04				Click on the name of the PostgreSQL server that you want to examine.			05				In the navigation panel under Settings select Active Directory admin to access the Azure Active Directory (AAD) authentication settings for the selected PostgreSQL database server.			06				On the Active Directory admin configuration page check the Active Directory admin feature status. If the status is currently set to No Active Directory admin there is no Active Directory administrator configured to handle authentication for the selected Azure PostgreSQL database server.			07				Repeat steps no. 4 â 6 for each PostgreSQL database server available in the selected subscription.			08				Repeat steps no. 3 â 7 for each subscription created in your Microsoft Azure cloud account.			,01				Sign in to Azure Management Console.			02				Navigate to All resources blade at https://portal.azure.com/#blade/HubsExtension/BrowseAll to access all your Microsoft Azure resources.			03				From the Type filter box select Azure Database for PostgreSQL server to list only the PostgreSQL database servers available in your Azure account.			04				Click on the name of the PostgreSQL database server that you want to reconfigure.			05				In the navigation panel under Settings select Active Directory admin to access the Azure Active Directory (AAD) authentication settings for the selected database server.			06				On the Active Directory admin configuration page click Set admin to initiate the setup process.			07				On the Active Directory admin panel choose the Azure Active Directory (AAD) administrator (or search it by the name and/or email address) that you want to configure for authentication to your Microsoft Azure PostgreSQL database server then click Select to select the chosen AD admin user and return to the configuration page.			08				Click Save to apply the configuration changes.			09				Repeat steps no. 4 â 8 for each PostgreSQL database server available within the selected subscription.			10				Repeat steps no. 3 â 9 for each subscription created within your Microsoft Azure cloud account.			,,,https://www.cloudconformity.com/knowledge-base/azure/PostgreSQL/active-directory-admin.html
Enable Adaptive Application Whitelisting Monitoring,Security Center,Medium (should be achieved),SecurityCenter-013,Ensure that the monitoring of the adaptive application controls is enabled within your Microsoft Azure cloud account so that Azure Security Center can determine if Adaptive Application Control feature is enabled for eligible virtual machines (VMs). Adaptive Application Control is an automated application whitelisting solution provided by Azure Security Center that helps you deal with malicious and/or unauthorized software by allowing only specific applications to run on your Azure and non-Azure VMs (using both Windows and Linux).,When "Monitor Adaptive Application Controls" feature is enabled within your Microsoft Azure account it delegates Azure Security Center to scan for adaptive application controls that enables you to control which applications can run on your eligible virtual machines and helps you harden your VMs against malware.,To determine if adaptive application whitelisting monitoring is enabled within Azure Security Center perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to Azure Security Center blade at https://portal.azure.com/#blade/Microsoft_Azure_Security/SecurityMenuBlade/.			03				In the navigation panel choose Security policy to access Policy Management portal.			04				On the Policy Management page click on the name of the subscription that you want to examine to access the selected subscription configuration settings.			05				On the Security Policy page in the Compute and Apps category check the Adaptive Application Controls should be enabled on virtual machines configuration setting status. If the setting is set to Disabled the adaptive application whitelisting monitoring is not enabled for the Microsoft Azure virtual machines (VMs) provisioned in the current subscription.			06				Repeat step no. 4 and 5 for each Microsoft Azure subscription available in your account.			,01				Run account get-access-token command (Windows/macOS/Linux) using custom query filters to get the "Monitor Adaptive Application Controls" feature status for the current Azure account subscription:az account get-access-token	--query "{subscription:subscriptionaccessToken:accessToken}"	--out tsv | xargs -L1 bash -c 'curl -X GET -H "Authorization: Bearer $1" -H "Content-Type: application/json" https://management.azure.com/subscriptions/$0/providers/Microsoft.Authorization/policyAssignments/SecurityCenterBuiltIn?api-version=2018-05-01' | jq 'select(.name=="SecurityCenterBuiltIn")'|jq '.properties.parameters.adaptiveApplicationControlsMonitoringEffect.value'02				The command output should return the adaptive application whitelisting monitoring configuration status:"Disabled"				If the command output returns "Disabled" as shown in the example above the monitoring of the adaptive application controls is not enabled for the Microsoft Azure virtual machines (Windows and Linux) available in the selected subscription.			03				Repeat step no. 1 and 2 for each Microsoft Azure subscription available in your account.			,01				Sign in to Azure Management Console.			02				Navigate to Azure Security Center blade at https://portal.azure.com/#blade/Microsoft_Azure_Security/SecurityMenuBlade/.			03				In the navigation panel choose Security policy to access Policy Management portal.			04				On the Policy Management page click on the name of the subscription that you want to examine to access the selected subscription configuration settings.			05				On the Security Policy page click on the ASC Default (subscription: <azure-subscription-id>) policy assignment to edit the policy configuration.			06				On the selected policy assignment page in the PARAMETERS section select AuditIfNotExists from Monitor application whitelisting dropdown list to enable the monitoring of application whitelisting in Azure Security Center for the selected Microsoft Azure subscription.			07				Click Save to apply the changes. If successful the following message should be displayed: "Updating policy assignment succeeded". Once the configuration changes are saved the "Monitor Adaptive Application Controls" feature becomes active for the selected Azure subscription.			08				If required repeat steps no. 4 â 7 for other Microsoft Azure cloud subscription available.			,01				Define the necessary parameters for the account get-access-token command where the adaptiveApplicationControlsMonitoringEffect configuration parameter is enabled. Save the following content to a JSON file named enable-adaptive-application-whitelisting-monitoring.json and replace the highlighted details i.e. <azure-subscription-id> and <policy-definition-id> with your own Azure account details:{   "properties":{      "displayName":"ASC Default (subscription: <azure-subscription-id>)"      "policyDefinitionId":"/providers/Microsoft.Authorization/policySetDefinitions/<policy-definition-id>"      "scope":"/subscriptions/<azure-subscription-id>"      "parameters":{         "adaptiveApplicationControlsMonitoringEffect":{            "value":"AuditIfNotExists"         }      }   }   "id":"/subscriptions/<azure-subscription-id>/providers/Microsoft.Authorization/policyAssignments/SecurityCenterBuiltIn"   "type":"Microsoft.Authorization/policyAssignments"   "name":"SecurityCenterBuiltIn"   "location":"eastus"}02				Run account get-access-token command (Windows/macOS/Linux) using the configuration parameters defined within the JSON document at the previous step to enable the monitoring of application whitelisting in Azure Security Center for the selected Microsoft Azure subscription:az account get-access-token	--query "{subscription:subscriptionaccessToken:accessToken}"	--out tsv | xargs -L1 bash -c 'curl -X PUT -H "Authorization: Bearer $1" -H "Content-Type: application/json" https://management.azure.com/subscriptions/$0/providers/Microsoft.Authorization/policyAssignments/SecurityCenterBuiltIn?api-version=2018-05-01 -d@"enable-adaptive-application-whitelisting-monitoring.json"'03				If successful the command output should return the updated Azure Security Center policy e.g.:{   "sku":{  	"name":"A0"  	"tier":"Free"   }   "properties":{  	"displayName":"ASC Default (subscription: abcdabcd-1234-1234-1234-abcdabcdabcd)"  	"parameters":{     	"adaptiveApplicationControlsMonitoringEffect":{        	"value":"AuditIfNotExists"     	}  	}  	...   }   "id":"/subscriptions/abcdabcd-1234-1234-1234-abcdabcdabcd/providers/Microsoft.Authorization/policyAssignments/SecurityCenterBuiltIn"   "type":"Microsoft.Authorization/policyAssignments"   "name":"SecurityCenterBuiltIn"   "location":"eastus"}04				If required repeat steps no. 1 â 3 for other Microsoft Azure cloud subscription available.			,https://www.cloudconformity.com/knowledge-base/azure/SecurityCenter/monitor-adaptive-application-whitelisting.html
Enable Alert Notifications for Subscription Owners,Security Center,Medium (should be achieved),SecurityCenter-019,Ensure that appropriate contact information is set for the administrator who should be notified when Azure Security Center detects compromised resources within your Microsoft Azure cloud account. The contact information in this case one or more email addresses is used by the Azure security team to contact your account administrator if the Microsoft Security Response Center (MSRC) discovers that your cloud resources and/or data has been accessed by an unauthorized actor or system.,Enabling security alert emails to subscription owners ensures that they receive important alert notifications from Microsoft Security Response Center in order to become aware of the security issues identified and take actions to mitigate the risks in a timely fashion.,To determine if Azure Security Center is configured to send alert email notifications to Azure subscription owners perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to Azure Security Center blade at https://portal.azure.com/#blade/Microsoft_Azure_Security/SecurityMenuBlade/.			03				In the navigation panel choose Pricing & settings to access your Azure account subscriptions.			04				On Pricing & Settings page click on the name of the Azure subscription that you want to examine.			05				In the blade navigation panel choose Email notifications to access the page with the contact information required to receive email notifications from Microsoft Azure Security Center.			06				In the Email notification settings section check the Also send email notification to subscription owners setting configuration. If the setting is not active (i.e. is currently grayed out and cannot be configured) follow this conformity rule to set at least one security contact email address for Azure Security Center notifications. If Also send email notification to subscription owners is set to Off the "Send email also to subscription owners" feature is not enabled in the current Azure cloud subscription.			07				Repeat step no. 4 â 6 for each Microsoft Azure subscription available in your account.			,01				Run account get-access-token command (Windows/macOS/Linux) using custom query filters to get the "Send email also to subscription owners" feature configuration status for the selected Azure subscription:az account get-access-token	--query "{subscription:subscriptionaccessToken:accessToken}"	--out tsv | xargs -L1 bash -c 'curl -X GET -H "Authorization: Bearer $1" -H "Content-Type: application/json" https://management.azure.com/subscriptions/$0/providers/Microsoft.Security/securityContacts?api-version=2017-08-01-preview' | jq '.|.value[] | select(.name=="default1")'|jq '.properties.alertsToAdmins'02				The command output should return the requested feature configuration status:"Off"				If the command output returns "Off" as shown in the example above sending alert email notifications to Azure subscription owners is not enabled within the Azure Security Center settings.			03				Repeat step no. 1 and 2 for each Microsoft Azure subscription available in your account.			,01				Sign in to Azure Management Console.			02				Navigate to Azure Security Center blade at https://portal.azure.com/#blade/Microsoft_Azure_Security/SecurityMenuBlade/.			03				In the navigation panel choose Pricing & settings to access your Azure account subscriptions.			04				On Pricing & Settings page click on the name of the Azure subscription that you want to examine.			05				In the blade navigation panel choose Email notifications to access the page with the contact information required to receive alert notifications from Microsoft Azure Security Center.			06				In the Email notification settings section select On next to Also send email notification to subscription owners to send security alert email notifications to the owner of the selected Microsoft Azure subscription.			07				Click Save to apply the changes and enable the security feature.			08				If required repeat steps no. 4 â 7 for other Microsoft Azure cloud subscription available.			,01				Define the necessary parameters for the account get-access-token command where alertsToAdmins configuration attribute is set to On in order to enable the "Send email also to subscription owners" feature. Save the following content to a JSON file named enable-subscription-owner-alerts.json and replace the highlighted details i.e. <azure-subscription-id> <security-email-address> and <security-phone-number> with your own configuration and contact information:{"id":"/subscriptions/<azure-subscription-id>/providers/Microsoft.Security/securityContacts/default1"   "name":"default1"   "type":"Microsoft.Security/securityContacts"   "properties":{  	"email":"<security-email-address>"  	"phone":"<security-phone-number>"  	"alertNotifications": "On"  	"alertsToAdmins":"On"   }}02				Run account get-access-token command (Windows/macOS/Linux) using the parameters defined at the previous step to enable sending security alert email notifications to the owner of the selected Microsoft Azure subscription:az account get-access-token	--query "{subscription:subscriptionaccessToken:accessToken}"	--out tsv | xargs -L1 bash -c 'curl -X PUT -H "Authorization: Bearer $1" -H "Content-Type: application/json" https://management.azure.com/subscriptions/$0/providers/Microsoft.Security/securityContacts/default1?api-version=2017-08-01-preview -d@"enable-subscription-owner-alerts.json"'03				If successful the command output should return the updated Security Center configuration policy:{"id":"/subscriptions/<azure-subscription-id>/providers/Microsoft.Security/securityContacts/default1"   "name":"default1"   "type":"Microsoft.Security/securityContacts"   "properties":{  	"email":"<security-email-address>"  	"phone":"<security-phone-number>"  	"alertNotifications": "On"  	"alertsToAdmins":"On"   }}04				If required repeat steps no. 1 â 3 for other Microsoft Azure cloud subscription available.			,https://www.cloudconformity.com/knowledge-base/azure/SecurityCenter/email-to-subscription-owners.html
Enable Automatic Provisioning of the Monitoring Agent,Security Center,Medium (should be achieved),SecurityCenter-002,Ensure that automatic provisioning of the monitoring agent is enabled in your Microsoft Azure account to collect security data and events from your cloud compute resources in order to help you prevent detect and respond efficiently to security vulnerabilities and threats.,When the automatic provisioning of the monitoring agent is turned on the Azure Security Center installs the Microsoft Monitoring Agent (MMA) on all the existing supported Azure virtual machines (VMs) plus on any new ones created later. Once the MMA is installed Azure Security Center reads various security-related configurations and event logs from your virtual machines and sends the data collected (including crash dump files) to your workspace for analysis. The data sent for analysis is required to provide visibility into missing updates misconfigured operating system (OS) security settings endpoint protection settings and health and threat detections.,To determine if the automatic provisioning of the monitoring agent is enabled in your Azure account perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to Azure Security Center blade at https://portal.azure.com/#blade/Microsoft_Azure_Security/SecurityMenuBlade/.			03				In the navigation panel choose Pricing & settings to access your Azure account subscriptions.			04				On Pricing & Settings page click on the name of the Azure subscription that you want to examine.			05				In the blade navigation panel choose Data Collection and check the Auto Provisioning feature status. If the feature configuration status is set to Off the "Automatic provisioning of monitoring agent" feature is not enabled for the selected Microsoft Azure subscription.			06				Repeat step no. 4 and 5 for each Microsoft Azure subscription available in your account.			,01				Run account get-access-token command (Windows/macOS/Linux) using custom query filters to get the "Automatic provisioning of monitoring agent" feature status for the current Azure account subscription:az account get-access-token	--query "{subscription:subscriptionaccessToken:accessToken}"	--out tsv | xargs -L1 bash -c 'curl -X GET -H "Authorization: Bearer $1" -H "Content-Type: application/json" https://management.azure.com/subscriptions/$0/providers/Microsoft.Security/autoProvisioningSettings?api-version=2017-08-01-preview' | jq '.|.value[] | select(.name=="default")'|jq '.properties.autoProvision'02				The command output should return the requested feature configuration status:"Off"				If the command output returns "Off" as shown in the example above the "Automatic provisioning of monitoring agent" feature is not enabled for the selected Microsoft Azure subscription.			03				Repeat step no. 1 and 2 for each Microsoft Azure subscription available in your account.			,01				Sign in to Azure Management Console.			02				Navigate to Azure Security Center blade at https://portal.azure.com/#blade/Microsoft_Azure_Security/SecurityMenuBlade/.			03				In the navigation panel choose Pricing & settings to access your Azure account subscriptions.			04				On Pricing & Settings page click on the name of the Azure subscription that you want to examine.			05				In the blade navigation panel choose Data Collection and set Auto Provisioning setting to On to enable the "Automatic provisioning of monitoring agent" feature.			06				Within Workspace configuration section select whether to have data collected from Azure VMs stored in workspace(s) created by Security Center or in an existing workspace that you created.			07				In the Windows security events section select All Events to collect and store all Windows security events and AppLocker events.			08				Click Save to apply the changes and enable the automatic provisioning of the monitoring agent in the selected Azure account subscription.			09				If required repeat steps no. 4 â 8 for other Microsoft Azure cloud subscription available.			,01				Define the necessary parameters for the account get-access-token command where the autoProvision configuration attribute is set to On. Save the following content to a JSON file named enable-auto-provision.json and replace the highlighted details i.e. <azure-subscription-id> with your own Azure subscription ID:{   "id":"/subscriptions/<azure-subscription-id>/providers/Microsoft.Security/autoProvisioningSettings/default"   "name":"default"   "type":"Microsoft.Security/autoProvisioningSettings"   "properties":{      "autoProvision":"On"   }}02				Run account get-access-token command (Windows/macOS/Linux) using the parameters defined at the previous step (i.e. enable-auto-provision.json file) to enable the automatic provisioning of the monitoring agent for the current Microsoft Azure subscription (the command request does not produce an output):az account get-access-token	--query "{subscription:subscriptionaccessToken:accessToken}"	--out tsv | xargs -L1 bash -c 'curl -X PUT -H "Authorization: Bearer $1" -H "Content-Type: application/json" https://management.azure.com/subscriptions/$0/providers/Microsoft.Security/autoProvisioningSettings/default?api-version=2017-08-01-preview -d@"enable-auto-provision.json"'03				If successful the command output should return the enabled feature configuration metadata:{   "id":"/subscriptions/abcdabcd-1234-1234-1234-abcdabcdabcd/providers/Microsoft.Security/autoProvisioningSettings/default"   "name":"default"   "type":"Microsoft.Security/autoProvisioningSettings"   "properties":{  	"autoProvision":"On"   }}04				If required repeat steps no. 1 â 3 for other Microsoft Azure cloud subscription available.			,https://www.cloudconformity.com/knowledge-base/azure/SecurityCenter/automatic-provisioning-of-monitoring-agent.html
Enable Disk Encryption Monitoring,Security Center,Medium (should be achieved),SecurityCenter-006,Ensure that disk encryption monitoring is enabled within your Microsoft Azure cloud account so that Azure Security Center service can detect if your virtual machines (Windows and Linux) have disk encryption enabled.,When working with production data it is highly recommended to implement encryption in order to protect it from unauthorized access and fulfill compliance requirements for data-at-rest encryption in your organization. Azure Security Center disk encryption monitoring identifies non-compliant virtual machines (VMs) and recommends enabling disk encryption for these VMs in order to enhance data protection.,To determine if "Monitor Disk Encryption" feature is enabled within Azure Security Center perform the following actions,01				Sign in to Azure Management Console.			02				Navigate to Azure Security Center blade at https://portal.azure.com/#blade/Microsoft_Azure_Security/SecurityMenuBlade/.			03				In the navigation panel choose Security policy to access Policy Management portal.			04				On the Policy Management page click on the name of the subscription that you want to examine to access the selected subscription configuration settings.			05				On the Security Policy page in the Compute and Apps category check the Disk encryption should be applied on virtual machines setting status. If the configuration setting is set to Disabled the disk encryption monitoring is not enabled for the Microsoft Azure virtual machines (VMs) provisioned in the current subscription.			06				Repeat step no. 4 and 5 for each Microsoft Azure subscription available in your account.			,01				Run account get-access-token command (Windows/macOS/Linux) using custom query filters to get the "Monitor Disk Encryption" feature status for the current Azure account subscription:az account get-access-token	--query "{subscription:subscriptionaccessToken:accessToken}"	--out tsv | xargs -L1 bash -c 'curl -X GET -H "Authorization: Bearer $1" -H "Content-Type: application/json" https://management.azure.com/subscriptions/$0/providers/Microsoft.Authorization/policyAssignments/SecurityCenterBuiltIn?api-version=2018-05-01' | jq 'select(.name=="SecurityCenterBuiltIn")'|jq '.properties.parameters.diskEncryptionMonitoringEffect.value'02				The command output should return the disk encryption monitoring configuration status:"Disabled"				If the command output returns "Disabled" as shown in the example above the disk encryption monitoring is not enabled for the Microsoft Azure virtual machines (Windows and Linux) available in the selected subscription.			03				Repeat step no. 1 and 2 for each Microsoft Azure subscription available in your account.			,01				Sign in to Azure Management Console.			02				Navigate to Azure Security Center blade at https://portal.azure.com/#blade/Microsoft_Azure_Security/SecurityMenuBlade/.			03				In the navigation panel choose Security policy to access Policy Management portal.			04				On the Policy Management page click on the name of the subscription that you want to reconfigure to access the selected subscription configuration settings.			05				On the Security Policy page click on the ASC Default (subscription: abcdabcd-1234-1234-1234-abcdabcdabcd) policy assignment to edit the policy configuration.			06				On the selected policy assignment page in the PARAMETERS section select AuditIfNotExists from Monitor disk encryption dropdown list to enable disk encryption monitoring for all the Microsoft Azure virtual machines available in the selected Azure subscription.			07				Click Save to apply the changes. If successful the following message should be displayed: "Updating policy assignment succeeded". Once the configuration changes are saved the Security Center disk encryption monitoring feature becomes active for the selected Azure subscription.			08				If required repeat steps no. 4 â 7 for other Microsoft Azure cloud subscription available.			,01				Define the required parameters for the account get-access-token command where the diskEncryptionMonitoringEffect configuration parameter is enabled. Save the following content to a JSON file named enable-disk-encryption-monitoring.json and replace the highlighted details i.e. <azure-subscription-id> and <policy-definition-id> with your own Azure account details:{   "properties":{      "displayName":"ASC Default (subscription: <azure-subscription-id>)"      "policyDefinitionId":"/providers/Microsoft.Authorization/policySetDefinitions/<policy-definition-id>"      "scope":"/subscriptions/<azure-subscription-id>"      "parameters":{         "diskEncryptionMonitoringEffect":{            "value":"AuditIfNotExists"         }      }   }   "id":"/subscriptions/<azure-subscription-id>/providers/Microsoft.Authorization/policyAssignments/SecurityCenterBuiltIn"   "type":"Microsoft.Authorization/policyAssignments"   "name":"SecurityCenterBuiltIn"   "location":"eastus"}02				Run account get-access-token command (Windows/macOS/Linux) using the parameters defined at the previous step (i.e. enable-disk-encryption-monitoring.json file) to enable the disk encryption monitoring and recommendations for the selected Microsoft Azure cloud subscription (the command request does not produce an output):az account get-access-token	--query "{subscription:subscriptionaccessToken:accessToken}"	--out tsv | xargs -L1 bash -c 'curl -X PUT -H "Authorization: Bearer $1" -H "Content-Type: application/json" https://management.azure.com/subscriptions/$0/providers/Microsoft.Authorization/policyAssignments/SecurityCenterBuiltIn?api-version=2018-05-01 -d@"enable-disk-encryption-monitoring.json"'03				If successful the command output should return the updated Azure Security Center policy:{   "sku":{      "name":"A0"      "tier":"Free"   }   "properties":{      "displayName":"ASC Default (subscription: abcdabcd-1234-1234-1234-abcdabcdabcd)"      "scope":"/subscriptions/abcdabcd-1234-1234-1234-abcdabcdabcd"      ...      "description":"This is the default set of policies monitored by Azure Security Center. It was automatically assigned as part of on-boarding to Security Center. The default assignment contains only audit policies. For more information please visit https://aka.ms/ascpolicies"   }   "id":"/subscriptions/abcdabcd-1234-1234-1234-abcdabcdabcd/providers/Microsoft.Authorization/policyAssignments/SecurityCenterBuiltIn"   "type":"Microsoft.Authorization/policyAssignments"   "name":"SecurityCenterBuiltIn"   "location":"eastus"}04				If required repeat steps no. 1 â 3 for other Microsoft Azure cloud subscription available.			,https://www.cloudconformity.com/knowledge-base/azure/SecurityCenter/monitor-disk-encryption.html
Enable Endpoint Protection Monitoring,Security Center,Medium (should be achieved),SecurityCenter-005,Ensure that endpoint protection monitoring is enabled within Azure Security Center in order to identify and remove viruses spyware and other malicious software from your Azure virtual machines (VMs). Azure Security Center monitors security configurations using a large set of recommendations for auditing detecting threats hardening operating systems configuring firewalls setting password policies and more.,When "Monitor Endpoint Protection" feature is enabled Azure Security Center recommends endpoint protection for all Windows virtual machines to help identify and remove viruses spyware and other malicious software.,To determine if endpoint protection monitoring is enabled within Microsoft Azure Security Center perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to Azure Security Center blade at https://portal.azure.com/#blade/Microsoft_Azure_Security/SecurityMenuBlade/.			03				In the navigation panel choose Security policy to access Policy Management portal.			04				On the Policy Management page click on the name of the subscription that you want to examine to access the selected subscription configuration settings.			05				On the Security Policy page in the Compute and Apps category check the Monitor missing Endpoint Protection in Azure Security Center setting status. If the configuration setting is set to Disabled the endpoint protection monitoring is not enabled for the Microsoft Azure virtual machines available in the current subscription.			06				Repeat step no. 4 and 5 for each Microsoft Azure subscription available in your account.			,01				Run account get-access-token command (Windows/macOS/Linux) using custom query filters to get the "Monitor Endpoint Protection" feature status for the current Azure account subscription:az account get-access-token	--query "{subscription:subscriptionaccessToken:accessToken}"	--out tsv | xargs -L1 bash -c 'curl -X GET -H "Authorization: Bearer $1" -H "Content-Type: application/json" https://management.azure.com/subscriptions/$0/providers/Microsoft.Authorization/policyAssignments/SecurityCenterBuiltIn?api-version=2018-05-01' | jq 'select(.name=="SecurityCenterBuiltIn")'|jq '.properties.parameters.endpointProtectionMonitoringEffect.value'02				The command output should return the endpoint protection monitoring configuration status:"Disabled"				If the command output returns "Disabled" as shown in the example above the endpoint protection monitoring is not currently enabled for the Azure virtual machines (VMs) provisioned in the selected subscription.			03				Repeat step no. 1 and 2 for each Microsoft Azure subscription available in your account.			,01				Sign in to Azure Management Console.			02				Navigate to Azure Security Center blade at https://portal.azure.com/#blade/Microsoft_Azure_Security/SecurityMenuBlade/.			03				In the navigation panel choose Security policy to access Policy Management portal.			04				On the Policy Management page click on the name of the subscription that you want to reconfigure to access the subscription configuration settings.			05				On the Security Policy page click on the ASC Default (subscription: abcdabcd-1234-1234-1234-abcdabcdabcd) policy assignment to edit the policy configuration.			06				On the selected policy assignment page in the PARAMETERS section select AuditIfNotExists from Monitor endpoint protection dropdown list to enable endpoint protection monitoring for all the Microsoft Azure virtual machines (VMs) available in the selected Azure subscription.			07				Click Save to apply the changes. If the request is successful the following message should be displayed: "Updating policy assignment succeeded". Once the configuration changes are saved the endpoint protection monitoring feature becomes active for the selected Azure subscription.			08				If required repeat steps no. 4 â 7 for other Microsoft Azure cloud subscription available.			,01				Define the necessary parameters for the account get-access-token command where the endpointProtectionMonitoringEffect configuration parameter is enabled. Save the following content to a JSON file named enable-endpoint-protection-monitoring.json and replace the highlighted details i.e. <azure-subscription-id> and <policy-definition-id> with your own Azure account details:{   "properties":{      "displayName":"ASC Default (subscription: <azure-subscription-id>)"      "policyDefinitionId":"/providers/Microsoft.Authorization/policySetDefinitions/<policy-definition-id>"      "scope":"/subscriptions/<azure-subscription-id>"      "parameters":{         "endpointProtectionMonitoringEffect":{            "value":"AuditIfNotExists"         }      }   }   "id":"/subscriptions/<azure-subscription-id>/providers/Microsoft.Authorization/policyAssignments/SecurityCenterBuiltIn"   "type":"Microsoft.Authorization/policyAssignments"   "name":"SecurityCenterBuiltIn"   "location":"eastus"}02				Run account get-access-token command (Windows/macOS/Linux) using the parameters defined at the previous step (i.e. enable-endpoint-protection-monitoring.json file) to enable endpoint protection monitoring for the selected Microsoft Azure cloud subscription (the command request does not produce an output):az account get-access-token	--query "{subscription:subscriptionaccessToken:accessToken}"	--out tsv | xargs -L1 bash -c 'curl -X PUT -H "Authorization: Bearer $1" -H "Content-Type: application/json" https://management.azure.com/subscriptions/$0/providers/Microsoft.Authorization/policyAssignments/SecurityCenterBuiltIn?api-version=2018-05-01 -d@"enable-endpoint-protection-monitoring.json"'03				If successful the command output should return the updated Azure Security Center policy:{   "sku":{      "name":"A0"      "tier":"Free"   }   "properties":{      "displayName":"ASC Default (subscription: abcdabcd-1234-1234-1234-abcdabcdabcd)"      "scope":"/subscriptions/abcdabcd-1234-1234-1234-abcdabcdabcd"      ...      "description":"This is the default set of policies monitored by Azure Security Center. It was automatically assigned as part of on-boarding to Security Center. The default assignment contains only audit policies. For more information please visit https://aka.ms/ascpolicies"   }   "id":"/subscriptions/abcdabcd-1234-1234-1234-abcdabcdabcd/providers/Microsoft.Authorization/policyAssignments/SecurityCenterBuiltIn"   "type":"Microsoft.Authorization/policyAssignments"   "name":"SecurityCenterBuiltIn"   "location":"eastus"}04				If required repeat steps no. 1 â 3 for other Microsoft Azure cloud subscription available.			,https://www.cloudconformity.com/knowledge-base/azure/SecurityCenter/monitor-endpoint-protection.html
Enable High Severity Alert Email Notifications,Security Center,Medium (should be achieved),SecurityCenter-018,Enable sending high severity alert notifications to the security contact email address or addresses defined within the Azure Security Center settings. Before enabling "Send email notification for high severity alerts" feature make sure that at least one security contact email address is provided. The contact information provided will be used by Azure Security Center to contact you if the Microsoft Security Response Center (MSRC) detects security issues such as Remote Desktop Protocol (RDP) attacks or customer data accessed by an unauthorized party. MSRC performs in-depth security monitoring of the Azure network and infrastructure and receives threat intelligence and abuse complaints from third-party partners. If the feature is enabled an email notification is sent on the first daily occurrence of an alert and only for high severity alerts. For example if an email notification was already sent to alert you about an RDP attack you will not receive another notification about the attack on the same day even if another alert is triggered.,By enabling "Send email notification for high severity alerts" feature you make sure that the right people get notified when potential security risks are identified in your Azure account in order to able to mitigate the risks in a timely fashion.,To determine if sending high severity alert notifications is enabled within Azure Security Center settings perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to Azure Security Center blade at https://portal.azure.com/#blade/Microsoft_Azure_Security/SecurityMenuBlade/.			03				In the navigation panel choose Pricing & settings to access your Azure account subscriptions.			04				On Pricing & Settings page click on the name of the Azure subscription that you want to examine.			05				In the blade navigation panel choose Email notifications to access the page with the contact information required to receive alert notifications from Microsoft Azure Security Center.			06				In the Email notification settings section check the Send email notification for high severity alerts setting configuration. If the setting is not active (i.e. it cannot be configured) follow this conformity rule to set at least one security contact email address for Azure Security Center notifications. If Send email notification for high severity alerts is set to Off the "Send email notification for high severity alerts" security feature is not enabled within the current Azure cloud subscription.			07				Repeat step no. 4 â 6 for each Microsoft Azure subscription available in your account.			,01				Run account get-access-token command (Windows/macOS/Linux) using custom query filters to retrieve the "Send email notification for high severity alerts" security feature configuration status for the selected Azure subscription:az account get-access-token	--query "{subscription:subscriptionaccessToken:accessToken}"	--out tsv | xargs -L1 bash -c 'curl -X GET -H "Authorization: Bearer $1" -H "Content-Type: application/json" https://management.azure.com/subscriptions/$0/providers/Microsoft.Security/securityContacts?api-version=2017-08-01-preview' | jq '.|.value[] | select(.name=="default1")'|jq '.properties.alertNotifications'02				The command output should return the requested configuration status:"Off"				If the command output returns "Off" as shown in the example above sending high severity alert notifications is not enabled within the Azure Security Center settings in the selected Microsoft Azure subscription.			03				Repeat step no. 1 and 2 for each Microsoft Azure subscription available in your account.			,01				Sign in to Azure Management Console.			02				Navigate to Azure Security Center blade at https://portal.azure.com/#blade/Microsoft_Azure_Security/SecurityMenuBlade/.			03				In the navigation panel choose Pricing & settings to access your Azure account subscriptions.			04				On Pricing & Settings page click on the name of the Azure subscription that you want to examine.			05				In the blade navigation panel choose Email notifications to access the page with the contact information required to receive alert notifications from Microsoft Azure Security Center.			06				In the Email notification settings section select On next to Send email notification for high severity alerts to send high severity alerts to the email address(es) provided in the Email address configuration box.			07				Click Save to apply the changes. When Azure Security Center detects security breaches inside your Azure cloud account the subscription administrator(s) will receive alert notifications on the configured security contact email address(es).			08				If required repeat steps no. 4 â 7 for other Microsoft Azure cloud subscription available.			,01				Define the necessary parameters for the account get-access-token command where alertNotifications configuration attribute is set to On in order to enable the "Send email notification for high severity alerts" feature. Save the following content to a JSON file named enable-high-severity-alerts.json and replace the highlighted details i.e. <azure-subscription-id> <security-email-address> and <security-phone-number> with your own configuration and contact information:{"id":"/subscriptions/<azure-subscription-id>/providers/Microsoft.Security/securityContacts/default1"   "name":"default1"   "type":"Microsoft.Security/securityContacts"   "properties":{  	"email":"<security-email-address>"  	"phone":"<security-phone-number>"  	"alertNotifications": "On"  	"alertsToAdmins":"On"   }}02				Run account get-access-token command (Windows/macOS/Linux) using the parameters defined at the previous step (i.e. enable-high-severity-alerts.json file) to enable high severity alert email notifications for the selected Microsoft Azure cloud subscription:az account get-access-token	--query "{subscription:subscriptionaccessToken:accessToken}"	--out tsv | xargs -L1 bash -c 'curl -X PUT -H "Authorization: Bearer $1" -H "Content-Type: application/json" https://management.azure.com/subscriptions/$0/providers/Microsoft.Security/securityContacts/default1?api-version=2017-08-01-preview -d@"enable-high-severity-alerts.json"'03				If successful the command output should return the updated Security Center configuration policy e.g.:{"id":"/subscriptions/<azure-subscription-id>/providers/Microsoft.Security/securityContacts/default1"   "name":"default1"   "type":"Microsoft.Security/securityContacts"   "properties":{  	"email":"<security-email-address>"  	"phone":"<security-phone-number>"  	"alertNotifications": "On"  	"alertsToAdmins":"On"   }}04				If required repeat steps no. 1 â 3 for other Microsoft Azure cloud subscription available.			,https://www.cloudconformity.com/knowledge-base/azure/SecurityCenter/email-notification-for-high-severity-alerts.html
Enable JIT Network Access Monitoring,Security Center,High (should be achieved),SecurityCenter-012,Ensure that "Monitor JIT Network Access" feature is enabled within your Microsoft Azure cloud account settings so that Azure Security Center can assess if Just-In-Time network access is enabled for your eligible VMs. Just-In-Time (JIT) network access can be used to lock down inbound traffic to your Azure VMs reducing exposure to different types of attacks while providing easy access to your virtual machines when needed.,JIT network access can lock down inbound traffic to your Azure VMs by creating a Network Security Group (NSG) where you select the ports to which inbound traffic will be restricted. This method can be extremely useful for reducing exposure to external attacks. With JIT network access monitoring enabled Azure Security Center can determine if Just-In-Time network access is enabled for your Azure virtual machines and make the proper recommendations.,To determine if JIT network access monitoring is enabled within Azure Security Center settings perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to Azure Security Center blade at https://portal.azure.com/#blade/Microsoft_Azure_Security/SecurityMenuBlade/.			03				In the navigation panel choose Security policy to access Policy Management portal.			04				On the Policy Management page click on the name of the subscription that you want to examine to access the selected subscription configuration settings.			05				On the Security Policy page in the Network category check the Just-In-Time network access control should be applied on virtual machines setting status. If the configuration setting is Disabled the JIT network access monitoring feature is not enabled for the Microsoft Azure virtual machines (VMs) provisioned in the current subscription.			06				Repeat step no. 4 and 5 for each Microsoft Azure subscription available in your account.			,01				Run account get-access-token command (Windows/macOS/Linux) using custom query filters to describe the "Monitor JIT Network Access" feature status for the current Azure account subscription:az account get-access-token	--query "{subscription:subscriptionaccessToken:accessToken}"	--out tsv | xargs -L1 bash -c 'curl -X GET -H "Authorization: Bearer $1" -H "Content-Type: application/json" https://management.azure.com/subscriptions/$0/providers/Microsoft.Authorization/policyAssignments/SecurityCenterBuiltIn?api-version=2018-05-01' | jq 'select(.name=="SecurityCenterBuiltIn")'|jq '.properties.parameters.jitNetworkAccessMonitoringEffect.value'02				The command output should return the JIT network access monitoring configuration status:"Disabled"				If the command output returns "Disabled" as shown in the example above the Just-In-Time network access monitoring is not enabled for the Microsoft Azure virtual machines available in the selected subscription.			03				Repeat step no. 1 and 2 for each Microsoft Azure subscription available in your account.			,01				Sign in to Azure Management Console.			02				Navigate to Azure Security Center blade at https://portal.azure.com/#blade/Microsoft_Azure_Security/SecurityMenuBlade/.			03				In the navigation panel choose Security policy to access Policy Management portal.			04				On the Policy Management page click on the name of the subscription that you want to examine to access the selected subscription configuration settings.			05				On the Security Policy page click on the ASC Default (subscription: <azure-subscription-id>) policy assignment to edit the policy configuration.			06				On the selected policy assignment page in the PARAMETERS section select AuditIfNotExists from Monitor JIT network access dropdown list to enable Just-In-Time network access monitoring for all the Microsoft Azure virtual machines (VMs) available in the selected Azure subscription.			07				Click Save to apply the changes. If successful the following message should be displayed: "Updating policy assignment succeeded". Once the configuration changes are saved the JIT network access monitoring feature becomes active for the selected Azure subscription.			08				If required repeat steps no. 4 â 7 for other Microsoft Azure cloud subscription available.			,01				Define the necessary parameters for the account get-access-token command where the jitNetworkAccessMonitoringEffect configuration parameter is enabled. Save the following content to a JSON file named enable-jit-network-access-monitoring.json and replace the highlighted details i.e. <azure-subscription-id> and <policy-definition-id> with your own Azure account details:{   "properties":{      "displayName":"ASC Default (subscription: <azure-subscription-id>)"      "policyDefinitionId":"/providers/Microsoft.Authorization/policySetDefinitions/<policy-definition-id>"      "scope":"/subscriptions/<azure-subscription-id>"      "parameters":{         "jitNetworkAccessMonitoringEffect":{            "value":"AuditIfNotExists"         }      }   }   "id":"/subscriptions/<azure-subscription-id>/providers/Microsoft.Authorization/policyAssignments/SecurityCenterBuiltIn"   "type":"Microsoft.Authorization/policyAssignments"   "name":"SecurityCenterBuiltIn"   "location":"eastus"}02				Run account get-access-token command (Windows/macOS/Linux) using the parameters defined at the previous step (i.e. enable-jit-network-access-monitoring.json file) to enable Just-In-Time (JIT) network access monitoring for the VMs available within the selected Microsoft Azure cloud subscription:az account get-access-token	--query "{subscription:subscriptionaccessToken:accessToken}"	--out tsv | xargs -L1 bash -c 'curl -X PUT -H "Authorization: Bearer $1" -H "Content-Type: application/json" https://management.azure.com/subscriptions/$0/providers/Microsoft.Authorization/policyAssignments/SecurityCenterBuiltIn?api-version=2018-05-01 -d@"enable-jit-network-access-monitoring.json"'03				If successful the command output should return the updated Azure Security Center policy e.g.:{   "sku":{      "name":"A0"      "tier":"Free"   }   "properties":{      "displayName":"ASC Default (subscription: abcdabcd-1234-1234-1234-abcdabcdabcd)"      "scope":"/subscriptions/abcdabcd-1234-1234-1234-abcdabcdabcd"      ...      "description":"This is the default set of policies monitored by Azure Security Center. It was automatically assigned as part of on-boarding to Security Center. The default assignment contains only audit policies. For more information please visit https://aka.ms/ascpolicies"   }   "id":"/subscriptions/abcdabcd-1234-1234-1234-abcdabcdabcd/providers/Microsoft.Authorization/policyAssignments/SecurityCenterBuiltIn"   "type":"Microsoft.Authorization/policyAssignments"   "name":"SecurityCenterBuiltIn"   "location":"eastus"}04				If required repeat steps no. 1 â 3 for other Microsoft Azure cloud subscription available.			,https://www.cloudconformity.com/knowledge-base/azure/SecurityCenter/monitor-jit-network-access.html
Enable Monitoring for OS Vulnerabilities,Security Center,Medium (should be achieved),SecurityCenter-004,Ensure that monitoring for operating system (OS) vulnerabilities is enabled within Microsoft Azure Security Center in order to determine if your Azure virtual machines are vulnerable to attacks. Azure Security Center analyzes daily the operating system of your virtual machines for configurations that could make these VMs more vulnerable to cyber attacks. The Security Center service also recommends specific configuration changes that you can apply in order to address any found OS vulnerabilities.,When Monitor OS Vulnerabilities feature is enabled Azure Security Center analyzes operating system configurations on a daily basis to identify security issues that could make your organization's systems vulnerable to attacks.,To determine if "Monitor OS Vulnerabilities" feature is enabled perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to Azure Security Center blade at https://portal.azure.com/#blade/Microsoft_Azure_Security/SecurityMenuBlade/.			03				In the navigation panel choose Security policy to access Policy Management portal.			04				On the Policy Management page click on the name of the subscription that you want to examine to access the selected subscription configuration settings.			05				On the Security Policy page in the Compute and Apps category check the Vulnerabilities in security configuration on your machines should be remediated setting status. If the configuration setting is set to Disabled the OS vulnerability monitoring is not enabled for the Microsoft Azure virtual machines (VMs) available in the current subscription.			06				Repeat step no. 4 and 5 for each Microsoft Azure subscription available in your account.			,01				Run account get-access-token command (Windows/macOS/Linux) using custom query filters to get the "Monitor OS Vulnerabilities" feature status for the current Azure account subscription:az account get-access-token	--query "{subscription:subscriptionaccessToken:accessToken}"	--out tsv | xargs -L1 bash -c 'curl -X GET -H "Authorization: Bearer $1" -H "Content-Type: application/json" https://management.azure.com/subscriptions/$0/providers/Microsoft.Authorization/policyAssignments/SecurityCenterBuiltIn?api-version=2018-05-01' | jq 'select(.name=="SecurityCenterBuiltIn")'|jq '.properties.parameters.systemConfigurationsMonitoringEffect.value'02				The command output should return the requested feature configuration status:"Disabled"				If the command output returns "Disabled" as shown in the example above the operating system (OS) vulnerability monitoring is not enabled for the Azure virtual machines (VMs) provisioned for the selected subscription.			03				Repeat step no. 1 and 2 for each Microsoft Azure subscription available in your account.			,01				Sign in to Azure Management Console.			02				Navigate to Azure Security Center blade at https://portal.azure.com/#blade/Microsoft_Azure_Security/SecurityMenuBlade/.			03				In the navigation panel choose Security policy to access Policy Management portal.			04				On the Policy Management page click on the name of the subscription that you want to reconfigure to access the subscription configuration settings.			05				On the Security Policy page click on the ASC Default (subscription: abcdabcd-1234-1234-1234-abcdabcdabcd) policy assignment to edit the policy configuration.			06				On the selected policy assignment page in the PARAMETERS section select AuditIfNotExists from Monitor OS Vulnerabilities dropdown list to enable operating system (OS) vulnerability monitoring for all the Microsoft Azure virtual machines (VMs) available in the selected Azure subscription.			07				Click Save to apply the changes. If the request is successful the following message should be displayed: "Updating policy assignment succeeded". Once the configuration changes are saved the OS vulnerability monitoring feature becomes active for the selected Azure subscription.			08				If required repeat steps no. 4 â 7 for other Microsoft Azure cloud subscription available.			,01				Define the necessary parameters for the account get-access-token command where the systemUpdatesMonitoringEffect configuration parameter is enabled. Save the following content to a JSON file named enable-system-configurations-monitoring.json and replace the highlighted details i.e. <azure-subscription-id> and <policy-definition-id> with your own Azure account details:{   "properties":{      "displayName":"ASC Default (subscription: <azure-subscription-id>)"      "policyDefinitionId":"/providers/Microsoft.Authorization/policySetDefinitions/<policy-definition-id>"      "scope":"/subscriptions/<azure-subscription-id>"      "parameters":{         "systemConfigurationsMonitoringEffect":{            "value":"AuditIfNotExists"         }      }   }   "id":"/subscriptions/<azure-subscription-id>/providers/Microsoft.Authorization/policyAssignments/SecurityCenterBuiltIn"   "type":"Microsoft.Authorization/policyAssignments"   "name":"SecurityCenterBuiltIn"   "location":"eastus"}02				Run account get-access-token command (Windows/macOS/Linux) using the parameters defined at the previous step (i.e. enable-system-configurations-monitoring.json file) to enable the Security Center OS vulnerability monitoring for the selected Microsoft Azure cloud subscription (the command request does not produce an output):az account get-access-token	--query "{subscription:subscriptionaccessToken:accessToken}"	--out tsv | xargs -L1 bash -c 'curl -X PUT -H "Authorization: Bearer $1" -H "Content-Type: application/json" https://management.azure.com/subscriptions/$0/providers/Microsoft.Authorization/policyAssignments/SecurityCenterBuiltIn?api-version=2018-05-01 -d@"enable-system-configurations-monitoring.json"'03				If successful the command output should return the updated Azure Security Center policy (truncated):{   "sku":{      "name":"A0"      "tier":"Free"   }   "properties":{      "displayName":"ASC Default (subscription: abcdabcd-1234-1234-1234-abcdabcdabcd)"      "scope":"/subscriptions/abcdabcd-1234-1234-1234-abcdabcdabcd"      ...      "description":"This is the default set of policies monitored by Azure Security Center. It was automatically assigned as part of on-boarding to Security Center. The default assignment contains only audit policies. For more information please visit https://aka.ms/ascpolicies"   }   "id":"/subscriptions/abcdabcd-1234-1234-1234-abcdabcdabcd/providers/Microsoft.Authorization/policyAssignments/SecurityCenterBuiltIn"   "type":"Microsoft.Authorization/policyAssignments"   "name":"SecurityCenterBuiltIn"   "location":"eastus"}04				If required repeat steps no. 1 â 3 for other Microsoft Azure cloud subscription available.			,https://www.cloudconformity.com/knowledge-base/azure/SecurityCenter/monitor-os-vulnerabilities.html
Enable Network Security Group Monitoring,Security Center,Medium (should be achieved),SecurityCenter-007,Ensure that network security group monitoring is enabled within your Microsoft Azure cloud account so that Azure Security Center service can audit the network security groups associated with your VMs for overly permissive traffic rules.,When "Monitor Network Security Groups" feature is enabled it detects network security groups with too permissive rules and recommends that these be configured to control the inbound and outbound traffic to virtual machines that have public endpoints. Network security groups that are configured for a subnet are inherited by all VM network interfaces unless otherwise specified.,To determine if "Monitor Network Security Groups" feature is enabled in Azure Security Center perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to Azure Security Center blade at https://portal.azure.com/#blade/Microsoft_Azure_Security/SecurityMenuBlade/.			03				In the navigation panel choose Security policy to access Policy Management portal.			04				On the Policy Management page click on the name of the subscription that you want to examine to access the selected subscription configuration settings.			05				On the Security Policy page click on the ASC Default (subscription: abcdabcd-1234-1234-1234-abcdabcdabcd) policy assignment to access the policy configuration.			06				On the selected policy assignment page in the PARAMETERS section check the Monitor network security groups setting status. If the configuration setting is set to Disabled the network security group monitoring is not enabled within Microsoft Azure Security Center in the selected Azure subscription.			07				Repeat steps no. 4 - 6 for each Microsoft Azure subscription available in your account.			,01				Run account get-access-token command (Windows/macOS/Linux) using custom query filters to get the "Monitor Network Security Groups" feature status for the current Azure account subscription:az account get-access-token	--query "{subscription:subscriptionaccessToken:accessToken}"	--out tsv | xargs -L1 bash -c 'curl -X GET -H "Authorization: Bearer $1" -H "Content-Type: application/json" https://management.azure.com/subscriptions/$0/providers/Microsoft.Authorization/policyAssignments/SecurityCenterBuiltIn?api-version=2018-05-01' | jq 'select(.name=="SecurityCenterBuiltIn")'|jq '.properties.parameters.networkSecurityGroupsMonitoringEffect.value'02				The command output should return the requested Security Center feature configuration status:"Disabled"				If the command output returns "Disabled" as shown in the example above the network security group monitoring is not enabled within Security Center in the selected Azure cloud subscription.			03				Repeat step no. 1 and 2 for each Microsoft Azure subscription available in your account.			,01				Sign in to Azure Management Console.			02				Navigate to Azure Security Center blade at https://portal.azure.com/#blade/Microsoft_Azure_Security/SecurityMenuBlade/.			03				In the navigation panel choose Security policy to access Policy Management portal.			04				On the Policy Management page click on the name of the subscription that you want to reconfigure to access the selected subscription configuration settings.			05				On the Security Policy page click on the ASC Default (subscription: abcdabcd-1234-1234-1234-abcdabcdabcd) policy assignment to edit the policy configuration.			06				On the selected policy assignment page in the PARAMETERS section select AuditIfNotExists from Monitor network security groups dropdown list to enable network security group monitoring for all Microsoft Azure virtual machines (VMs) provisioned in the selected Azure subscription.			07				Click Save to apply the changes. If successful the following message should be displayed: "Updating policy assignment succeeded". Once the configuration changes are saved the Security Center network security group monitoring feature becomes active for the selected subscription.			08				If required repeat steps no. 4 â 7 for other Microsoft Azure cloud subscription available.			,01				Define the necessary parameters for the account get-access-token command where the networkSecurityGroupsMonitoringEffect configuration parameter is enabled. Save the following content to a JSON file named enable-network-security-groups-monitoring.json and replace the highlighted details i.e. <azure-subscription-id> and <policy-definition-id> with your own Azure account details:{   "properties":{      "displayName":"ASC Default (subscription: <azure-subscription-id>)"      "policyDefinitionId":"/providers/Microsoft.Authorization/policySetDefinitions/<policy-definition-id>"      "scope":"/subscriptions/<azure-subscription-id>"      "parameters":{         "networkSecurityGroupsMonitoringEffect":{            "value":"AuditIfNotExists"         }      }   }   "id":"/subscriptions/<azure-subscription-id>/providers/Microsoft.Authorization/policyAssignments/SecurityCenterBuiltIn"   "type":"Microsoft.Authorization/policyAssignments"   "name":"SecurityCenterBuiltIn"   "location":"eastus"}02				Run account get-access-token command (Windows/macOS/Linux) using the parameters defined at the previous step (i.e. enable-network-security-groups-monitoring.json file) to enable network security group monitoring for all Microsoft Azure virtual machines (VMs) provisioned in the selected Azure subscription (the command request does not produce an output):az account get-access-token	--query "{subscription:subscriptionaccessToken:accessToken}"	--out tsv | xargs -L1 bash -c 'curl -X PUT -H "Authorization: Bearer $1" -H "Content-Type: application/json" https://management.azure.com/subscriptions/$0/providers/Microsoft.Authorization/policyAssignments/SecurityCenterBuiltIn?api-version=2018-05-01 -d@"enable-network-security-groups-monitoring.json"'03				If successful the command output should return the updated Azure Security Center policy (truncated):{   "sku":{      "name":"A0"      "tier":"Free"   }   "properties":{      "displayName":"ASC Default (subscription: abcdabcd-1234-1234-1234-abcdabcdabcd)"      "scope":"/subscriptions/abcdabcd-1234-1234-1234-abcdabcdabcd"      ...      "description":"This is the default set of policies monitored by Azure Security Center. It was automatically assigned as part of on-boarding to Security Center. The default assignment contains only audit policies. For more information please visit https://aka.ms/ascpolicies"   }   "id":"/subscriptions/abcdabcd-1234-1234-1234-abcdabcdabcd/providers/Microsoft.Authorization/policyAssignments/SecurityCenterBuiltIn"   "type":"Microsoft.Authorization/policyAssignments"   "name":"SecurityCenterBuiltIn"   "location":"eastus"}04				If required repeat steps no. 1 â 3 for other Microsoft Azure cloud subscription available.			,https://www.cloudconformity.com/knowledge-base/azure/SecurityCenter/monitor-network-security-groups.html
Enable Next Generation Firewall (NGFW) Monitoring,Security Center,Medium (should be achieved),SecurityCenter-009,Ensure that Next Generation Firewall (NGFW) monitoring is enabled within your Microsoft Azure cloud account so that Azure Security Center can assess if the necessary network endpoints have a next generation firewall solution currently deployed. A Next Generation Firewall (NGFW) represents the third generation of firewall technology that combines a traditional firewall with other network device filtering functionalities such as application firewalls using in-line Deep Packet Inspection (DPI) Intrusion Prevention Systems (IPSs) TLS/SSL encrypted traffic inspectors website filtering QoS/bandwidth management antivirus and 3rd-party identity management integration (i.e. LDAP Active Directory RADIUS). The goal of NGFWs is to include more layers of the OSI model improving filtering of network traffic that is dependent on the packet contents.,A Next Generation Firewall (NGFW) extends Azure cloud network protection beyond network security groups. Once "Next Generation Firewall Monitoring" feature is enabled the Azure Security Center will search for deployments where a NGFW is recommended.,To determine if Next Generation Firewall (NGFW) monitoring is enabled in the Azure Security Center settings perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to Azure Security Center blade at https://portal.azure.com/#blade/Microsoft_Azure_Security/SecurityMenuBlade/.			03				In the navigation panel choose Security policy to access the Policy Management portal.			04				On the Policy Management page click on the Azure subscription that you want to examine to access the selected subscription settings.			05				On the Security Policy page in the Network category check Monitor unprotected network endpoints in Azure Security Center configuration setting status. If the setting status is Disabled the Next Generation Firewall (NGFW) monitoring is not enabled for the Microsoft Azure virtual machines (VMs) launched within the selected subscription.			06				Repeat step no. 4 and 5 for each subscription available in your Microsoft Azure cloud account.			,01				Run account get-access-token command (Windows/macOS/Linux) using custom query filters to describe the "Next Generation Firewall monitoring" feature status for the current Azure account subscription:az account get-access-token	--query "{subscription:subscriptionaccessToken:accessToken}"	--out tsv | xargs -L1 bash -c 'curl -X GET -H "Authorization: Bearer $1" -H "Content-Type: application/json" https://management.azure.com/subscriptions/$0/providers/Microsoft.Authorization/policyAssignments/SecurityCenterBuiltIn?api-version=2018-05-01' | jq 'select(.name=="SecurityCenterBuiltIn")'|jq '.properties.parameters.nextGenerationFirewallMonitoringEffect.value'02				The command output should return the requested feature configuration status:"Disabled"				If the command output returns "Disabled" as shown in the example above the Next Generation Firewall (NGFW) monitoring feature is not enabled for the Microsoft Azure virtual machines available in the current Azure subscription.			03				Repeat step no. 1 and 2 for each Microsoft Azure subscription available within your account.			,01				Sign in to Azure Management Console.			02				Navigate to Azure Security Center blade at https://portal.azure.com/#blade/Microsoft_Azure_Security/SecurityMenuBlade/.			03				In the navigation panel choose Security policy to access the Policy Management portal.			04				On the Policy Management page click on the name of the Azure subscription that you want to access.			05				On the Security Policy page click on the ASC Default (subscription: <azure-subscription-id>) link to edit the policy assignment.			06				On the selected policy assignment page in the PARAMETERS section select AuditIfNotExists from Access through internet facing endpoint should be restricted dropdown list to enable Next Generation Firewall (NGFW) monitoring for all the Microsoft Azure virtual machines (VMs) available in the current Azure subscription.			07				Click Save to apply the changes. If successful the following message should be displayed: "Updating policy assignment succeeded". Once the configuration changes are saved the "Next Generation Firewall monitoring" feature becomes active for the selected Azure subscription.			08				If required repeat steps no. 4 â 7 for other Microsoft Azure cloud subscription available.			,01				Define the necessary parameters for the account get-access-token command where the nextGenerationFirewallMonitoringEffect configuration parameter is enabled. Save the following content to a JSON file named "enable-next-generation-firewall.json" and replace the highlighted details i.e. <azure-subscription-id> and <policy-definition-id> with your own Azure account details:{   "properties":{      "displayName":"ASC Default (subscription: <azure-subscription-id>)"      "policyDefinitionId":"/providers/Microsoft.Authorization/policySetDefinitions/<policy-definition-id>"      "scope":"/subscriptions/<azure-subscription-id>"      "parameters":{         "nextGenerationFirewallMonitoringEffect":{            "value":"AuditIfNotExists"         }      }   }   "id":"/subscriptions/<azure-subscription-id>/providers/Microsoft.Authorization/policyAssignments/SecurityCenterBuiltIn"   "type":"Microsoft.Authorization/policyAssignments"   "name":"SecurityCenterBuiltIn"   "location":"eastus"}02				Run account get-access-token command (Windows/macOS/Linux) using the configuration parameters defined within the "enable-next-generation-firewall.json" file to enable the Next Generation Firewall (NGFW) monitoring for the current Microsoft Azure cloud subscription:az account get-access-token	--query "{subscription:subscriptionaccessToken:accessToken}"	--out tsv | xargs -L1 bash -c 'curl -X PUT -H "Authorization: Bearer $1" -H "Content-Type: application/json" https://management.azure.com/subscriptions/$0/providers/Microsoft.Authorization/policyAssignments/SecurityCenterBuiltIn?api-version=2018-05-01 -d@"enable-next-generation-firewall.json"'03				If successful the command output should return the updated Azure Security Center policy:{   "sku":{      "name":"A0"      "tier":"Free"   }   "properties":{      "displayName":"ASC Default (subscription: abcdabcd-1234-1234-1234-abcdabcdabcd)"      "scope":"/subscriptions/abcdabcd-1234-1234-1234-abcdabcdabcd"      ...      "description":"This is the default set of policies monitored by Azure Security Center. It was automatically assigned as part of on-boarding to Security Center. The default assignment contains only audit policies. For more information please visit https://aka.ms/ascpolicies"   }   "id":"/subscriptions/abcdabcd-1234-1234-1234-abcdabcdabcd/providers/Microsoft.Authorization/policyAssignments/SecurityCenterBuiltIn"   "type":"Microsoft.Authorization/policyAssignments"   "name":"SecurityCenterBuiltIn"   "location":"eastus"}04				If required repeat steps no. 1 â 3 for other subscriptions available in your Microsoft Azure cloud account.			,https://www.cloudconformity.com/knowledge-base/azure/SecurityCenter/next-generation-firewall-monitoring.html
Enable SQL Auditing Monitoring,Security Center,Medium (should be achieved),SecurityCenter-014,Ensure that "Monitor SQL Auditing" feature is enabled within your Microsoft Azure account configuration settings so that Azure Security Center can determine if your SQL database servers have security auditing and threat detection enabled.,Microsoft Azure advise you to enable auditing and threat detection for all databases on your Azure SQL servers. Security auditing and threat detection can help you maintain regulatory compliance understand database activity and find any anomalies that could indicate potential vulnerabilities or suspected security violations. When "Monitor SQL Auditing" feature is enabled the service can determine if security auditing is enabled for the SQL database servers available in your Azure cloud account. If SQL auditing is not enabled the Azure Security Center recommends turning it on for compliance advanced threat detection and investigation purposes.,To determine if SQL auditing monitoring is enabled within Azure Security Center perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to Azure Security Center blade at https://portal.azure.com/#blade/Microsoft_Azure_Security/SecurityMenuBlade/.			03				In the navigation panel choose Security policy to access Policy Management portal.			04				On the Policy Management page click on the name of the subscription that you want to examine to access the selected subscription configuration settings.			05				On the Security Policy page in the Data category check the Monitor unaudited SQL servers in Azure Security Center configuration setting status. If the setting is set to Disabled the SQL auditing monitoring for Microsoft Azure SQL servers is not enabled in the current Azure subscription.			06				Repeat step no. 4 and 5 for each Microsoft Azure subscription available in your account.			,01				Run account get-access-token command (Windows/macOS/Linux) using custom query filters to describe the "Monitor SQL Auditing" feature status for the current Azure account subscription:az account get-access-token	--query "{subscription:subscriptionaccessToken:accessToken}"	--out tsv | xargs -L1 bash -c 'curl -X GET -H "Authorization: Bearer $1" -H "Content-Type: application/json" https://management.azure.com/subscriptions/$0/providers/Microsoft.Authorization/policyAssignments/SecurityCenterBuiltIn?api-version=2018-05-01' | jq 'select(.name=="SecurityCenterBuiltIn")'|jq '.properties.parameters.sqlAuditingMonitoringEffect.value'02				The command output should return the SQL auditing monitoring configuration status:"Disabled"				If the command output returns "Disabled" as shown in the example above the SQL auditing and threat detection monitoring for Microsoft Azure SQL servers is not enabled in selected Azure subscription.			03				Repeat step no. 1 and 2 for each Microsoft Azure subscription available in your account.			,01				Sign in to Azure Management Console.			02				Navigate to Azure Security Center blade at https://portal.azure.com/#blade/Microsoft_Azure_Security/SecurityMenuBlade/.			03				In the navigation panel choose Security policy to access Policy Management portal.			04				On the Policy Management page click on the name of the subscription that you want to examine to access the selected subscription configuration settings.			05				On the Security Policy page click on the ASC Default (subscription: <azure-subscription-id>) policy assignment to edit the policy configuration.			06				On the selected policy assignment page in the PARAMETERS section select AuditIfNotExists from Monitor SQL auditing dropdown list to enable SQL auditing monitoring for all Microsoft Azure SQL servers available in the current Azure subscription.			07				Click Save to apply the changes. If successful the following message should be displayed: "Updating policy assignment succeeded". Once the configuration changes are saved the "Monitor SQL Auditing" feature becomes active for the selected Azure subscription.			08				If required repeat steps no. 4 â 7 for other Microsoft Azure cloud subscription available.			,01				Define the necessary parameters for the account get-access-token command where the sqlAuditingMonitoringEffect configuration parameter is enabled. Save the following content to a JSON file named enable-sql-auditing-monitoring.json and replace the highlighted details i.e. <azure-subscription-id> and <policy-definition-id> with your own Azure account details:{   "properties":{      "displayName":"ASC Default (subscription: <azure-subscription-id>)"      "policyDefinitionId":"/providers/Microsoft.Authorization/policySetDefinitions/<policy-definition-id>"      "scope":"/subscriptions/<azure-subscription-id>"      "parameters":{         "sqlAuditingMonitoringEffect":{            "value":"AuditIfNotExists"         }      }   }   "id":"/subscriptions/<azure-subscription-id>/providers/Microsoft.Authorization/policyAssignments/SecurityCenterBuiltIn"   "type":"Microsoft.Authorization/policyAssignments"   "name":"SecurityCenterBuiltIn"   "location":"eastus"}02				Run account get-access-token command (Windows/macOS/Linux) using the configuration parameters defined in the enable-sql-auditing-monitoring.json document at the previous step to enable SQL auditing and threat detection monitoring for the SQL servers available in the selected Microsoft Azure cloud subscription:az account get-access-token	--query "{subscription:subscriptionaccessToken:accessToken}"	--out tsv | xargs -L1 bash -c 'curl -X PUT -H "Authorization: Bearer $1" -H "Content-Type: application/json" https://management.azure.com/subscriptions/$0/providers/Microsoft.Authorization/policyAssignments/SecurityCenterBuiltIn?api-version=2018-05-01 -d@"enable-sql-auditing-monitoring.json"'03				If successful the command output should return the updated Azure Security Center policy:{   "sku":{  	"name":"A0"  	"tier":"Free"   }   "properties":{  	"displayName":"ASC Default (subscription: abcdabcd-1234-1234-1234-abcdabcdabcd)"  	"parameters":{     	"sqlAuditingMonitoringEffect":{        	"value":"AuditIfNotExists"     	}  	}  	...   }   "id":"/subscriptions/abcdabcd-1234-1234-1234-abcdabcdabcd/providers/Microsoft.Authorization/policyAssignments/SecurityCenterBuiltIn"   "type":"Microsoft.Authorization/policyAssignments"   "name":"SecurityCenterBuiltIn"   "location":"eastus"}04				If required repeat steps no. 1 â 3 for other Microsoft Azure cloud subscription available.			,https://www.cloudconformity.com/knowledge-base/azure/SecurityCenter/monitor-sql-auditing.html
Enable SQL Encryption Monitoring,Security Center,Medium (should be achieved),SecurityCenter-015,Ensure that "Monitor SQL Encryption" feature is enabled within your Microsoft Azure cloud account settings so that Azure Security Center can verify if your SQL database servers have encryption enabled.,Azure Security Center strongly recommends that you enable Transparent Data Encryption (TDE) on your Azure SQL servers in order to safeguard your data in the event of a data breach. TDE protects your data and helps you meet regulatory compliance by encrypting your SQL databases their associated backups and transaction log files at rest without having to change your application. With SQL encryption monitoring turned on Azure Security Center can determine if encryption at rest is enabled for your Azure SQL databases. In case Transparent Data Encryption is not already enabled the Security Center service will recommend you to do so.,To determine if SQL encryption monitoring is enabled within Azure Security Center perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to Azure Security Center blade at https://portal.azure.com/#blade/Microsoft_Azure_Security/SecurityMenuBlade/.			03				In the navigation panel choose Security policy to access Policy Management portal.			04				On the Policy Management page click on the name of the subscription that you want to examine to access the selected subscription configuration settings.			05				On the Security Policy page in the Data category check the Monitor unencrypted SQL databases in Azure Security Center configuration setting status. If the setting is set to Disabled the SQL encryption monitoring for Microsoft Azure SQL servers is not enabled in the current Azure subscription.			06				Repeat step no. 4 and 5 for each Microsoft Azure subscription available in your account.			,01				Run account get-access-token command (Windows/macOS/Linux) using custom query filters to describe the "Monitor SQL Encryption" feature status for the current Azure account subscription:az account get-access-token	--query "{subscription:subscriptionaccessToken:accessToken}"	--out tsv | xargs -L1 bash -c 'curl -X GET -H "Authorization: Bearer $1" -H "Content-Type: application/json" https://management.azure.com/subscriptions/$0/providers/Microsoft.Authorization/policyAssignments/SecurityCenterBuiltIn?api-version=2018-05-01' | jq 'select(.name=="SecurityCenterBuiltIn")'|jq '.properties.parameters.sqlEncryptionMonitoringEffect.value'02				The command output should return the SQL encryption monitoring configuration status:"Disabled"				If the command output returns "Disabled" as shown in the example above the SQL encryption monitoring for Microsoft Azure SQL database servers is not enabled in selected Azure subscription.			03				Repeat step no. 1 and 2 for each Microsoft Azure subscription available in your account.			,01				Sign in to Azure Management Console.			02				Navigate to Azure Security Center blade at https://portal.azure.com/#blade/Microsoft_Azure_Security/SecurityMenuBlade/.			03				In the navigation panel choose Security policy to access Policy Management portal.			04				On the Policy Management page click on the name of the subscription that you want to examine to access the selected subscription configuration settings.			05				On the Security Policy page click on the ASC Default (subscription: <azure-subscription-id>) policy assignment to edit the policy configuration.			06				On the selected policy assignment page in the PARAMETERS section select AuditIfNotExists from Monitor SQL encryption dropdown list to enable the monitoring of unencrypted Azure SQL database servers available in the current subscription.			07				Click Save to apply the changes. If successful the following message should be displayed: "Updating policy assignment succeeded". Once the configuration changes are saved the "Monitor SQL Encryption" feature becomes active for the selected Azure subscription.			08				If required repeat steps no. 4 â 7 for other Microsoft Azure cloud subscription available.			,01				Define the necessary parameters for the account get-access-token command where the sqlEncryptionMonitoringEffect configuration parameter is enabled. Save the following content to a JSON file named enable-sql-encryption-monitoring.json and replace the highlighted details i.e. <azure-subscription-id> and <policy-definition-id> with your own Azure account details:{   "properties":{      "displayName":"ASC Default (subscription: <azure-subscription-id>)"      "policyDefinitionId":"/providers/Microsoft.Authorization/policySetDefinitions/<policy-definition-id>"      "scope":"/subscriptions/<azure-subscription-id>"      "parameters":{         "sqlEncryptionMonitoringEffect":{            "value":"AuditIfNotExists"         }      }   }   "id":"/subscriptions/<azure-subscription-id>/providers/Microsoft.Authorization/policyAssignments/SecurityCenterBuiltIn"   "type":"Microsoft.Authorization/policyAssignments"   "name":"SecurityCenterBuiltIn"   "location":"eastus"}02				Run account get-access-token command (Windows/macOS/Linux) using the configuration parameters defined within the JSON document at the previous step to enable SQL encryption monitoring for the SQL database servers available in the selected Microsoft Azure cloud subscription:az account get-access-token	--query "{subscription:subscriptionaccessToken:accessToken}"	--out tsv | xargs -L1 bash -c 'curl -X PUT -H "Authorization: Bearer $1" -H "Content-Type: application/json" https://management.azure.com/subscriptions/$0/providers/Microsoft.Authorization/policyAssignments/SecurityCenterBuiltIn?api-version=2018-05-01 -d@"enable-sql-encryption-monitoring.json"'03				If successful the command output should return the updated Azure Security Center policy as shown in the following output example:{   "sku":{  	"name":"A0"  	"tier":"Free"   }   "properties":{  	"displayName":"ASC Default (subscription: abcdabcd-1234-1234-1234-abcdabcdabcd)"  	"parameters":{     	"sqlEncryptionMonitoringEffect":{        	"value":"AuditIfNotExists"     	}  	}  	...   }   "id":"/subscriptions/abcdabcd-1234-1234-1234-abcdabcdabcd/providers/Microsoft.Authorization/policyAssignments/SecurityCenterBuiltIn"   "type":"Microsoft.Authorization/policyAssignments"   "name":"SecurityCenterBuiltIn"   "location":"eastus"}04				If required repeat steps no. 1 â 3 for other Microsoft Azure cloud subscription available.			,https://www.cloudconformity.com/knowledge-base/azure/SecurityCenter/monitor-sql-encryption.html
Enable Standard Pricing Tier,Security Center,Medium (should be achieved),SecurityCenter-001,Ensure that Azure standard pricing tier is active in order to enable threat detection for networks and virtual machines provide threat intelligence anomaly detection and behavior analytics within the Azure Security Center.,Enabling Azure Security Center standard pricing tier allows for better security assessment with threat detection provided by the Microsoft Security Response Center (MSRC) advanced security policies adaptive application control network threat detection and regulatory compliance management.,To determine if standard pricing tier is enabled within your Microsoft Azure account perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to Azure Security Center blade at https://portal.azure.com/#blade/Microsoft_Azure_Security/SecurityMenuBlade/.			03				In the navigation panel choose Pricing & settings to access your Azure account subscriptions.			04				On Pricing & Settings page click on the name of the Azure subscription that you want to examine.			05				In the blade navigation panel choose Pricing tier and check the pricing tier enabled for the selected subscription. If the tier currently selected is not the standard one the Azure Security Center standard pricing tier is not enabled for the selected subscription.			06				Repeat step no. 4 and 5 for each Microsoft Azure cloud subscription available.			,01				Run account get-access-token command (Windows/macOS/Linux) using custom query filters to expose the Security Center pricing tier currently enabled for the current Azure account subscription:az account get-access-token	--query "{subscription:subscriptionaccessToken:accessToken}"	--out tsv | xargs -L1 bash -c 'curl -X GET -H "Authorization: Bearer $1" -H "Content-Type: application/json" GET https://management.azure.com/subscriptions/$0/providers/Microsoft.Security/pricings?api-version=2017-08-01-preview' | jq '.|.value[] | select(.name=="default")'|jq '.properties.pricingTier'02				The command output should return the name of the currently active Security Center pricing tier:"Free"				If the command output does not return "Standard" the pricing tier selected is not the standard one thus the Azure Security Center standard pricing tier is not enabled for the selected subscription.			03				Repeat step no. 1 and 2 for each Microsoft Azure cloud subscription available.			,01				Sign in to Azure Management Console.			02				Navigate to Azure Security Center blade at https://portal.azure.com/#blade/Microsoft_Azure_Security/SecurityMenuBlade/.			03				In the navigation panel choose Pricing & settings to access your Azure account subscriptions.			04				On Pricing & Settings page click on the name of the Azure subscription that you want to examine.			05				In the blade navigation panel select Pricing tier then click on the Standard tier box to choose the required tier.			06				Click Save to apply the changes and enable the standard pricing tier. If the request was successful the current Azure subscription has been upgraded to the Security Center standard tier for enhanced security.			07				If required repeat steps no. 4 â 6 for other Microsoft Azure cloud subscription available.			,01				Define the input parameters required for the account get-access-token command where the pricingTier configuration attribute is set to Standard. Save the following content to a JSON file named input-parameters.json and replace the highlighted placeholder i.e. <azure-subscription-id> with your own Azure subscription ID:{   "id":"/subscriptions/<azure-subscription-id>/providers/Microsoft.Security/pricings/default"   "name":"default"   "type":"Microsoft.Security/pricings"   "properties":{      "pricingTier":"Standard"   }}02				Run account get-access-token command (Windows/macOS/Linux) using the parameters defined at the previous step (i.e. input-parameters.json file) to enable the Security Center standard pricing tier for the current Microsoft Azure subscription in order to enhance your cloud account security (the command request does not produce an output):az account get-access-token	--query "{subscription:subscriptionaccessToken:accessToken}"	--out tsv | xargs -L1 bash -c 'curl -X PUT -H "Authorization: Bearer $1" -H "Content-Type: application/json" https://management.azure.com/subscriptions/$0/providers/Microsoft.Security/pricings/default?api-version=2017-08-01-preview -d@"input-parameters.json"'03				If successful the command output should return the following configuration metadata:{"id":"/subscriptions/abcdabcd-1234-1234-1234-abcdabcdabcd/providers/Microsoft.Security/autoProvisioningSettings/default""name":"default""type":"Microsoft.Security/pricings""properties":{"pricingTier":"Standard"}}04				If required repeat steps no. 1 â 3 for other Microsoft Azure cloud subscription available.			,https://www.cloudconformity.com/knowledge-base/azure/SecurityCenter/pricing-tier.html
Enable Storage Encryption Monitoring,Security Center,Medium (should be achieved),SecurityCenter-011,Ensure that "Monitor Storage Blob Encryption" feature is enabled within your Microsoft Azure cloud account so that Azure Security Center can assess storage accounts for encryption at rest. "Monitor Storage Blob Encryption" applies only to Microsoft Azure Storage resources.,In order to protect your data and to help you meet security and compliance requirements Azure Security Center recommends that all Azure Storage resources to be encrypted including blobs disks files queues tables and object metadata. Data in Azure Storage is encrypted and decrypted transparently using 256-bit AES encryption and is FIPS 140-2 compliant. With storage encryption monitoring feature turned on Azure Security Center can determine if encryption at rest is enabled for your Azure Storage resources.,To determine if storage encryption monitoring is enabled within Azure Security Center perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to Azure Security Center blade at https://portal.azure.com/#blade/Microsoft_Azure_Security/SecurityMenuBlade/.			03				In the navigation panel choose Security policy to access Policy Management portal.			04				On the Policy Management page click on the name of the subscription that you want to examine to access the selected subscription configuration settings.			05				On the Security Policy page click on the ASC Default (subscription: <azure-subscription-id>) policy assignment to access the policy configuration.			06				On the selected policy assignment page in the PARAMETERS section check the Monitor storage blob encryption configuration setting. If the setting is set to Disabled the storage encryption monitoring is not enabled for the Microsoft Azure Storage blob resources available in the current subscription.			07				Repeat steps no. 4 - 6 for each Microsoft Azure subscription available in your account.			,01				Run account get-access-token command (Windows/macOS/Linux) using custom query filters to retrieve the "Monitor Storage Blob Encryption" feature status for the current Azure account subscription:az account get-access-token	--query "{subscription:subscriptionaccessToken:accessToken}"	--out tsv | xargs -L1 bash -c 'curl -X GET -H "Authorization: Bearer $1" -H "Content-Type: application/json" https://management.azure.com/subscriptions/$0/providers/Microsoft.Authorization/policyAssignments/SecurityCenterBuiltIn?api-version=2018-05-01' | jq 'select(.name=="SecurityCenterBuiltIn")'|jq '.properties.parameters.storageEncryptionMonitoringEffect.value'02				The command output should return the storage encryption monitoring configuration status:"Disabled"				If the command output returns "Disabled" as shown in the example above the storage encryption monitoring is not enabled for the Azure Storage blob resources provisioned in the selected subscription.			03				Repeat step no. 1 and 2 for each Microsoft Azure subscription available in your account.			,01				Sign in to Azure Management Console.			02				Navigate to Azure Security Center blade at https://portal.azure.com/#blade/Microsoft_Azure_Security/SecurityMenuBlade/.			03				In the navigation panel choose Security policy to access Policy Management portal.			04				On the Policy Management page click on the name of the subscription that you want to examine to access the selected subscription configuration settings.			05				On the Security Policy page click on the ASC Default (subscription: <azure-subscription-id>) policy assignment to edit the policy configuration.			06				On the selected policy assignment page in the PARAMETERS section select Audit from Monitor storage blob encryption dropdown list to enable the monitoring of blob encryption for the storage account in the selected Azure subscription.			07				Click Save to apply the changes. If successful the following message should be displayed: "Updating policy assignment succeeded". Once the configuration changes are saved the "Monitor Storage Blob Encryption" feature becomes active for the selected Azure subscription.			08				If required repeat steps no. 4 â 7 for other Microsoft Azure cloud subscription available.			,01				Define the necessary parameters for the account get-access-token command where the storageEncryptionMonitoringEffect configuration parameter is enabled. Save the following content to a JSON file named enable-storage-encryption-monitoring.json and replace the highlighted details i.e. <azure-subscription-id> and <policy-definition-id> with your own Azure account details:{   "properties":{      "displayName":"ASC Default (subscription: <azure-subscription-id>)"      "policyDefinitionId":"/providers/Microsoft.Authorization/policySetDefinitions/<policy-definition-id>"      "scope":"/subscriptions/<azure-subscription-id>"      "parameters":{         "storageEncryptionMonitoringEffect":{            "value":"Audit"         }      }   }   "id":"/subscriptions/<azure-subscription-id>/providers/Microsoft.Authorization/policyAssignments/SecurityCenterBuiltIn"   "type":"Microsoft.Authorization/policyAssignments"   "name":"SecurityCenterBuiltIn"   "location":"eastus"}02				Run account get-access-token command (Windows/macOS/Linux) using the parameters defined at the previous step (i.e. enable-storage-encryption-monitoring.json file) to enable storage encryption monitoring and recommendations for the selected Microsoft Azure cloud subscription:az account get-access-token	--query "{subscription:subscriptionaccessToken:accessToken}"	--out tsv | xargs -L1 bash -c 'curl -X PUT -H "Authorization: Bearer $1" -H "Content-Type: application/json" https://management.azure.com/subscriptions/$0/providers/Microsoft.Authorization/policyAssignments/SecurityCenterBuiltIn?api-version=2018-05-01 -d@"enable-storage-encryption-monitoring.json"'03				If successful the command output should return the updated Azure Security Center policy:{   "sku":{  	"name":"A0"  	"tier":"Free"   }   "properties":{  	"displayName":"ASC Default (subscription: abcdabcd-1234-1234-1234-abcdabcdabcd)"  	"parameters":{     	"storageEncryptionMonitoringEffect":{        	"value":"Audit"     	}  	}  	...   }   "id":"/subscriptions/abcdabcd-1234-1234-1234-abcdabcdabcd/providers/Microsoft.Authorization/policyAssignments/SecurityCenterBuiltIn"   "type":"Microsoft.Authorization/policyAssignments"   "name":"SecurityCenterBuiltIn"   "location":"eastus"}04				If required repeat steps no. 1 â 3 for other Microsoft Azure cloud subscription available.			,https://www.cloudconformity.com/knowledge-base/azure/SecurityCenter/monitor-storage-blob-encryption.html
Enable System Updates Monitoring,Security Center,Medium (should be achieved),SecurityCenter-003,Ensure that system updates monitoring is enabled within your Azure cloud account in order to be notified about the security and critical updates released from Microsoft Windows Update or Microsoft Windows Server Update service.,When this setting is enabled it retrieves a daily list of available security and critical updates from Microsoft Windows Update/Microsoft Windows Server Update. The security updates on this list depend on the service configured for that specific Azure virtual machine (VM) and recommends via notifications that the missing updates be applied as soon as possible. This is to ensure that the virtual machine's operating system is running the most recent security updates provided by the software vendor. For Unix/Linux systems the feature uses the distro-provided package management system to determine packages that have available updates.,To determine if "Monitor System Updates" feature is enabled perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to Azure Security Center blade at https://portal.azure.com/#blade/Microsoft_Azure_Security/SecurityMenuBlade/.			03				In the navigation panel choose Security policy to access Policy Management portal.			04				On the Policy Management page click on the name of the subscription that you want to examine to access the selected subscription configuration settings.			05				On the Security Policy page in the Compute and Apps category check the System updates should be installed on your machines setting status. If the configuration setting status is set to Disabled the system updates recommendations are not enabled for the Microsoft Azure virtual machines (VMs) provisioned within the current subscription.			06				Repeat step no. 4 and 5 for each Microsoft Azure subscription available in your account.			,01				Run account get-access-token command (Windows/macOS/Linux) using custom query filters to get the "Monitor System Updates" feature status for the current Azure account subscription:az account get-access-token	--query "{subscription:subscriptionaccessToken:accessToken}"	--out tsv | xargs -L1 bash -c 'curl -X GET -H "Authorization: Bearer $1" -H "Content-Type: application/json" https://management.azure.com/subscriptions/$0/providers/Microsoft.Authorization/policyAssignments/SecurityCenterBuiltIn?api-version=2018-05-01' | jq 'select(.name=="SecurityCenterBuiltIn")'|jq '.properties.parameters.systemUpdatesMonitoringEffect.value'02				The command output should return the requested feature configuration status:"Disabled"				If the command output returns "Disabled" as shown in the example above the system updates monitoring and recommendations are not enabled for the Azure virtual machines (VMs) available in the selected subscription.			03				Repeat step no. 1 and 2 for each Microsoft Azure subscription available in your account.			,01				Sign in to Azure Management Console.			02				Navigate to Azure Security Center blade at https://portal.azure.com/#blade/Microsoft_Azure_Security/SecurityMenuBlade/.			03				In the navigation panel choose Security policy to access Policy Management portal.			04				On the Policy Management page click on the name of the subscription that you want to reconfigure to access the subscription configuration settings.			05				On the Security Policy page click on the ASC Default (subscription: abcdabcd-1234-1234-1234-abcdabcdabcd) policy assignment to edit the policy configuration.			06				On the selected policy assignment page in the PARAMETERS section select AuditIfNotExists from Monitor system updates dropdown list to enable the system updates monitoring for the Microsoft Azure virtual machines available in the selected Azure subscription.			07				Click Save to apply the changes. If successful the following message should be displayed: "Updating policy assignment succeeded". Once the configuration changes are saved your Azure subscription will receive system updates recommendations for all the provisioned VMs.			08				If required repeat steps no. 4 â 7 for other Microsoft Azure cloud subscription available.			,01				Define the necessary parameters for the account get-access-token command where the systemUpdatesMonitoringEffect configuration parameter is enabled. Save the following content to a JSON file named enable-system-updates-monitoring.json and replace the highlighted details i.e. <azure-subscription-id> and <policy-definition-id> with your own Azure account details:{   "properties":{      "displayName":"ASC Default (subscription: <azure-subscription-id>)"      "policyDefinitionId":"/providers/Microsoft.Authorization/policySetDefinitions/<policy-definition-id>"      "scope":"/subscriptions/<azure-subscription-id>"      "parameters":{         "systemUpdatesMonitoringEffect":{            "value":"AuditIfNotExists"         }      }   }   "id":"/subscriptions/<azure-subscription-id>/providers/Microsoft.Authorization/policyAssignments/SecurityCenterBuiltIn"   "type":"Microsoft.Authorization/policyAssignments"   "name":"SecurityCenterBuiltIn"   "location":"eastus"}02				Run account get-access-token command (Windows/macOS/Linux) using the parameters defined at the previous step (i.e. enable-system-updates-monitoring.json file) to enable the system updates monitoring for the Microsoft Azure virtual machines available in the selected Azure subscription (the command request does not produce an output):az account get-access-token	--query "{subscription:subscriptionaccessToken:accessToken}"	--out tsv | xargs -L1 bash -c 'curl -X PUT -H "Authorization: Bearer $1" -H "Content-Type: application/json" https://management.azure.com/subscriptions/$0/providers/Microsoft.Authorization/policyAssignments/SecurityCenterBuiltIn?api-version=2018-05-01 -d@"enable-system-updates-monitoring.json"'03				If successful the command output should return the updated Azure Security Center policy (truncated):{   "sku":{      "name":"A0"      "tier":"Free"   }   "properties":{      "displayName":"ASC Default (subscription: abcdabcd-1234-1234-1234-abcdabcdabcd)"      "scope":"/subscriptions/abcdabcd-1234-1234-1234-abcdabcdabcd"      ...      "description":"This is the default set of policies monitored by Azure Security Center. It was automatically assigned as part of on-boarding to Security Center. The default assignment contains only audit policies. For more information please visit https://aka.ms/ascpolicies"   }   "id":"/subscriptions/abcdabcd-1234-1234-1234-abcdabcdabcd/providers/Microsoft.Authorization/policyAssignments/SecurityCenterBuiltIn"   "type":"Microsoft.Authorization/policyAssignments"   "name":"SecurityCenterBuiltIn"   "location":"eastus"}04				If required repeat steps no. 1 â 3 for other Microsoft Azure cloud subscription available.			,https://www.cloudconformity.com/knowledge-base/azure/SecurityCenter/monitor-system-updates.html
Enable Vulnerability Assessment Monitoring,Security Center,Medium (should be achieved),SecurityCenter-010,Ensure that "Monitor Vulnerability Assessment" feature is enabled within your Microsoft Azure cloud account so that Azure Security Center can recommend a vulnerability assessment solution to be installed on your VMs. The vulnerability assessment is part of the Azure Security Center recommendations for virtual machine (VMs). Once the monitoring feature is enabled Security Center searches your VMs for deployed vulnerability assessment solutions and if doesn't find any it recommends that you install one. After such a solution is being deployed a partner agent starts reporting vulnerability data to the partnerâs management platform. In turn the partner's management platform provides vulnerability monitoring data back to Azure Security Center so you can rapidly identify any vulnerable VMs on your Security Center dashboard.,After vulnerability assessment monitoring is enabled Azure Security Center can determine if your virtual machines (VMs) have vulnerability assessment software installed and depending on the required software deployment the service will recommend a vulnerability assessment solution be installed on your Azure VMs.,To determine if vulnerability assessment monitoring is enabled in the Azure Security Center settings perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to Azure Security Center blade at https://portal.azure.com/#blade/Microsoft_Azure_Security/SecurityMenuBlade/.			03				In the navigation panel choose Security policy to access Policy Management portal.			04				On the Policy Management page click on the name of the subscription that you want to examine to access the selected subscription configuration settings.			05				On the Security Policy page in the Compute and Apps category check the Vulnerabilities should be remediated by a Vulnerability Assessment solution setting status. If the configuration setting is Disabled the "Monitor Vulnerability Assessment" feature is not enabled for the Microsoft Azure virtual machines (VMs) provisioned in the current subscription.			06				Repeat step no. 4 and 5 for each Microsoft Azure subscription available in your account.			,01				Run account get-access-token command (Windows/macOS/Linux) using custom query filters to describe the "Monitor Vulnerability Assessment" feature status for the current Azure account subscription:az account get-access-token	--query "{subscription:subscriptionaccessToken:accessToken}"	--out tsv | xargs -L1 bash -c 'curl -X GET -H "Authorization: Bearer $1" -H "Content-Type: application/json" https://management.azure.com/subscriptions/$0/providers/Microsoft.Authorization/policyAssignments/SecurityCenterBuiltIn?api-version=2018-05-01' | jq 'select(.name=="SecurityCenterBuiltIn")'|jq '.properties.parameters.vulnerabilityAssesmentMonitoringEffect.value'02				The command output should return the vulnerability assessment monitoring configuration status:"Disabled"				If the command output returns "Disabled" as shown in the example above the vulnerability assessment monitoring is not enabled for the Microsoft Azure virtual machines available in the selected subscription.			03				Repeat step no. 1 and 2 for each Microsoft Azure subscription available in your account.			,01				Sign in to Azure Management Console.			02				Navigate to Azure Security Center blade at https://portal.azure.com/#blade/Microsoft_Azure_Security/SecurityMenuBlade/.			03				In the navigation panel choose Security policy to access Policy Management portal.			04				On the Policy Management page click on the name of the subscription that you want to examine to access the selected subscription configuration settings.			05				On the Security Policy page click on the ASC Default (subscription: <azure-subscription-id>) policy assignment to edit the policy configuration.			06				On the selected policy assignment page in the PARAMETERS section select AuditIfNotExists from Monitor vulnerability assessment dropdown list to enable vulnerability assessment monitoring for all the Microsoft Azure virtual machines (VMs) available in the selected Azure subscription.			07				Click Save to apply the changes. If the request is successful the following message should be displayed: "Updating policy assignment succeeded". Once the configuration changes are saved the "Monitor Vulnerability Assessment" feature becomes active for the selected Azure subscription.			08				If required repeat steps no. 4 â 7 for other Microsoft Azure cloud subscription available.			,01				Define the necessary parameters for the account get-access-token command where the vulnerabilityAssesmentMonitoringEffect configuration parameter is enabled. Save the following content to a JSON file named enable-vulnerability-assessment-detection.json and replace the highlighted details i.e. <azure-subscription-id> and <policy-definition-id> with your own Azure account details:{   "properties":{      "displayName":"ASC Default (subscription: <azure-subscription-id>)"      "policyDefinitionId":"/providers/Microsoft.Authorization/policySetDefinitions/<policy-definition-id>"      "scope":"/subscriptions/<azure-subscription-id>"      "parameters":{         "vulnerabilityAssesmentMonitoringEffect":{            "value":"AuditIfNotExists"         }      }   }   "id":"/subscriptions/<azure-subscription-id>/providers/Microsoft.Authorization/policyAssignments/SecurityCenterBuiltIn"   "type":"Microsoft.Authorization/policyAssignments"   "name":"SecurityCenterBuiltIn"   "location":"eastus"}02				Run account get-access-token command (Windows/macOS/Linux) using the parameters defined at the previous step (i.e. enable-vulnerability-assessment-detection.json file) to enable vulnerability assessment monitoring for the virtual machines (VMs) within the selected Microsoft Azure cloud subscription:az account get-access-token	--query "{subscription:subscriptionaccessToken:accessToken}"	--out tsv | xargs -L1 bash -c 'curl -X PUT -H "Authorization: Bearer $1" -H "Content-Type: application/json" https://management.azure.com/subscriptions/$0/providers/Microsoft.Authorization/policyAssignments/SecurityCenterBuiltIn?api-version=2018-05-01 -d@"enable-vulnerability-assessment-detection.json"'03				If successful the command output should return the updated Azure Security Center policy:{   "sku":{      "name":"A0"      "tier":"Free"   }   "properties":{      "displayName":"ASC Default (subscription: abcdabcd-1234-1234-1234-abcdabcdabcd)"      "scope":"/subscriptions/abcdabcd-1234-1234-1234-abcdabcdabcd"      ...      "description":"This is the default set of policies monitored by Azure Security Center. It was automatically assigned as part of on-boarding to Security Center. The default assignment contains only audit policies. For more information please visit https://aka.ms/ascpolicies"   }   "id":"/subscriptions/abcdabcd-1234-1234-1234-abcdabcdabcd/providers/Microsoft.Authorization/policyAssignments/SecurityCenterBuiltIn"   "type":"Microsoft.Authorization/policyAssignments"   "name":"SecurityCenterBuiltIn"   "location":"eastus"}04				If required repeat steps no. 1 â 3 for other Microsoft Azure cloud subscription available.			,https://www.cloudconformity.com/knowledge-base/azure/SecurityCenter/monitor-vulnerability-assessment.html
Enable Web Application Firewall Monitoring,Security Center,Medium (should be achieved),SecurityCenter-008,Ensure that Web Application Firewall (WAF) monitoring is enabled within your Microsoft Azure cloud account so that Azure Security Center can determine if your virtual machines (Windows and Linux) are associated with application firewalls for controlling traffic in and out of VMs.,Azure Security Center strongly recommends that you provision an application firewall to help protect against attacks targeting web applications running on your virtual machines. When "Monitor Web Application Firewall" feature is enabled the service recommends provisioning a web application firewall on your virtual machines when either of the following is true:Instance-level public IP (ILPIP) is used and the inbound security rules for the associated network security group are configured to allow access to port 80 (HTTP) and/or 443 (HTTPS).Load-balanced IP is used and the associated load balancing and inbound network address translation (NAT) rules are configured to allow access to port 80 (HTTP) and/or 443 (HTTPS).,To determine if Web Application Firewall (WAF) monitoring is enabled in the Azure Security Center perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to Azure Security Center blade at https://portal.azure.com/#blade/Microsoft_Azure_Security/SecurityMenuBlade/.			03				In the navigation panel choose Security policy to access the Policy Management portal.			04				On the Policy Management page click on the Azure subscription that you want to examine to access the selected subscription settings.			05				On the Security Policy page in the Network category check The NSGs rules for web applications on IaaS should be hardened configuration setting status. If the setting status is Disabled the Web Application Firewall (WAF) monitoring is not enabled for the Microsoft Azure virtual machines (VMs) provisioned in the selected subscription.			06				Repeat step no. 4 and 5 for each Microsoft Azure subscription available within your account.			,01				Run account get-access-token command (Windows/macOS/Linux) using custom query filters to get the "Monitor Web Application Firewall" feature status for the current Azure account subscription:az account get-access-token	--query "{subscription:subscriptionaccessToken:accessToken}"	--out tsv | xargs -L1 bash -c 'curl -X GET -H "Authorization: Bearer $1" -H "Content-Type: application/json" https://management.azure.com/subscriptions/$0/providers/Microsoft.Authorization/policyAssignments/SecurityCenterBuiltIn?api-version=2018-05-01' | jq 'select(.name=="SecurityCenterBuiltIn")'|jq '.properties.parameters.webApplicationFirewallMonitoringEffect.value'02				The command output should return the web application firewall monitoring configuration status:"Disabled"			If the command output returns "Disabled" as shown in the example above the Web Application Firewall (WAF) monitoring feature is not enabled for the Microsoft Azure virtual machines (Windows and Linux) available in the selected subscription.			03				Repeat step no. 1 and 2 for each subscription created in your Microsoft Azure cloud account.			,01				Sign in to Azure Management Console.			02				Navigate to Azure Security Center blade at https://portal.azure.com/#blade/Microsoft_Azure_Security/SecurityMenuBlade/.			03				In the navigation panel choose Security policy to access the Policy Management portal.			04				On the Policy Management page click on the name of the Azure subscription that you want to access.			05				On the Security Policy page click on the ASC Default (subscription: <azure-subscription-id>) link to edit the policy assignment.			06				On the selected policy assignment page in the PARAMETERS section select AuditIfNotExists from The NSGs rules for web applications on IaaS should be hardened dropdown list to enable web application firewall monitoring for all the Microsoft Azure virtual machines (VMs) provisioned in the selected Azure subscription.			07				Click Save to apply the changes. If successful the following message should be displayed: "Updating policy assignment succeeded". Once the configuration changes are saved the Security Center Web Application Firewall (WAF) monitoring feature becomes active for the selected Azure subscription.			08				If required repeat steps no. 4 â 7 for other Microsoft Azure cloud subscription available.			,01				Define the necessary parameters for the account get-access-token command where the webApplicationFirewallMonitoringEffect configuration parameter is enabled. Save the following content to a JSON file named "enable-web-application-firewall.json" and replace the highlighted details i.e. <azure-subscription-id> and <policy-definition-id> with your own Azure account details:{   "properties":{      "displayName":"ASC Default (subscription: <azure-subscription-id>)"      "policyDefinitionId":"/providers/Microsoft.Authorization/policySetDefinitions/<policy-definition-id>,https://www.cloudconformity.com/knowledge-base/azure/SecurityCenter/monitor-web-application-firewall.html
Security Contact Emails In Use,Security Center,Medium (should be achieved),SecurityCenter-016,Ensure that appropriate contact information in this case one or more email addresses is set for the administrator who should be notified when Azure Security Center detects compromised resources within your Microsoft Azure cloud account. The contact information is used by Microsoft to contact your account administrator if the Microsoft Security Response Center (MSRC) discovers that your cloud resources and/or data has been accessed by an unauthorized actor or system.,Azure Security Center strongly recommends that you provide at least one valid security contact email address for each Microsoft Azure subscription that you own. Security Center reaches out to the designated administrator using the defined security contact in case the Microsoft security team finds that your Azure cloud resources are compromised. This ensures that the right people become aware of the potential security risks found in order to mitigate these risk in a timely manner.,To determine if security contact email addresses are defined within Azure Security Center settings perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to Azure Security Center blade at https://portal.azure.com/#blade/Microsoft_Azure_Security/SecurityMenuBlade/.			03				In the navigation panel choose Pricing & settings to access your Azure account subscriptions.			04				On Pricing & Settings page click on the name of the Azure subscription that you want to examine.			05				In the blade navigation panel choose Email notifications and check the Email address configuration field. If Email address field is empty there are no security contact email addresses defined in the Azure Security Center configuration settings available for the selected Microsoft Azure subscription.			06				Repeat step no. 4 and 5 for each Microsoft Azure subscription available in your account.			,01				Run account get-access-token command (Windows/macOS/Linux) using custom query filters to describe the security contact email address or addresses set for Azure Security Center within the current Microsoft Azure subscription:az account get-access-token	--query "{subscription:subscriptionaccessToken:accessToken}"	--out tsv | xargs -L1 bash -c 'curl -X GET -H "Authorization: Bearer $1" -H "Content-Type: application/json" https://management.azure.com/subscriptions/$0/providers/Microsoft.Security/securityContacts?api-version=2017-08-01-preview' | jq '.|.value[] | select(.name=="default1")'|jq '.properties.email'02				The command output should return the requested contact information (if any).""				If the command output returns an empty string i.e. "" or don't return anything at all there are no security contact email addresses defined within Azure Security Center settings available for the selected Microsoft Azure subscription.			03				Repeat step no. 1 and 2 for each Microsoft Azure subscription available in your account.			,01				Sign in to Azure Management Console.			02				Navigate to Azure Security Center blade at https://portal.azure.com/#blade/Microsoft_Azure_Security/SecurityMenuBlade/.			03				In the navigation panel choose Pricing & settings to access your Azure account subscriptions.			04				On Pricing & Settings page click on the name of the Azure subscription that you want to examine.			05				In the blade navigation panel choose Email notifications and enter one or more valid email addresses separated by comma in the Email address field.			06				Click Save to apply the changes. When Azure Security Center detects compromised resources inside your Azure cloud account the subscription administrator(s) will receive alert notifications on the email address(es) configured at the previous step.			07				If required repeat steps no. 4 â 6 for other Microsoft Azure cloud subscription available.			,01				Define the necessary parameters for the account get-access-token command where <security-email-address> represents the security contact email address where you want to be notified when Azure Security Center detects compromised resources within your Azure account. Save the following content to a JSON file named security-contact-information.json and replace the highlighted details i.e. <azure-subscription-id> <security-phone-number> and <security-email-address> with your own configuration and contact details:{   "id":"/subscriptions/<azure-subscription-id>/providers/Microsoft.Security/securityContacts/default1"   "name":"default1"   "type":"Microsoft.Security/securityContacts"   "properties":{  	"phone":"<security-phone-number>"  	"email":"<security-email-address>"   }}02				Run account get-access-token command (Windows/macOS/Linux) using the parameters defined at the previous step (i.e. security-contact-information.json file) to set the email address where you want to receive notifications alerts from Azure Security Center within the selected Microsoft Azure cloud subscription:az account get-access-token	--query "{subscription:subscriptionaccessToken:accessToken}"	--out tsv | xargs -L1 bash -c 'curl -X PUT -H "Authorization: Bearer $1" -H "Content-Type: application/json" https://management.azure.com/subscriptions/$0/providers/Microsoft.Security/securityContacts/default1?api-version=2017-08-01-preview -d@"security-contact-information.json"'03				If successful the command output should return the updated Security Center configuration policy:{   "id":"/subscriptions/abcdabcd-1234-1234-1234-abcdabcdabcd/providers/Microsoft.Security/securityContacts/default1"   "name":"default1"   "type":"Microsoft.Security/securityContacts"   "properties":{    	"email":"secops@cloudconformity.com"  	"phone":"+1-425-1234567"  	"alertNotifications":"Off"  	"alertsToAdmins":"Off"   }}04				If required repeat steps no. 1 â 3 for other Microsoft Azure cloud subscription available.			,https://www.cloudconformity.com/knowledge-base/azure/SecurityCenter/security-contact-emails.html
Security Contact Phone Numbers In Use,Security Center,Medium (should be achieved),SecurityCenter-017,Ensure that a security contact international phone number (including the country code e.g. +1-425-1234567) is set for the administrator who should be notified when Azure Security Center detects compromised resources.,As best practice Azure Security Center recommends that you provide valid security contact details for each Microsoft Azure subscription. If appropriate contact information is provided the Azure Security Center calls the designated security contact in case its security team finds that your cloud resources are compromised in some way. The main purpose of this feature is to ensure that the right people get notified for potential security risks in order to mitigate those risks in a timely fashion.,To determine if a valid security contact phone number is defined within Azure Security Center settings perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to Azure Security Center blade at https://portal.azure.com/#blade/Microsoft_Azure_Security/SecurityMenuBlade/.			03				In the navigation panel choose Pricing & settings to access your Azure account subscriptions.			04				On Pricing & Settings page click on the name of the Azure subscription that you want to examine.			05				In the blade navigation panel choose Email notifications and check the Phone number configuration box. If Phone number box is empty there are no security contact phone numbers configured for notifications in the Azure Security Center configuration settings within the selected Microsoft Azure subscription.			06				Repeat step no. 4 and 5 for each Microsoft Azure subscription available in your account.			,01				Run account get-access-token command (Windows/macOS/Linux) using custom query filters to describe the security contact phone number set for alert notifications within the subscription's Azure Security Center settings:az account get-access-token	--query "{subscription:subscriptionaccessToken:accessToken}"	--out tsv | xargs -L1 bash -c 'curl -X GET -H "Authorization: Bearer $1" -H "Content-Type: application/json" https://management.azure.com/subscriptions/$0/providers/Microsoft.Security/securityContacts?api-version=2017-08-01-preview' | jq '.|.value[] | select(.name=="default1")'|jq '.properties.phone'02				The command output should return the requested contact information (if any available).""				If the command output returns an empty string i.e. "" there are no security contact phone numbers configured for alert notifications in the Azure Security Center configuration settings within the selected Microsoft Azure subscription.			03				Repeat step no. 1 and 2 for each Microsoft Azure subscription available in your account.			,01				Sign in to Azure Management Console.			02				Navigate to Azure Security Center blade at https://portal.azure.com/#blade/Microsoft_Azure_Security/SecurityMenuBlade/.			03				In the navigation panel choose Pricing & settings to access your Azure cloud subscriptions.			04				On Pricing & Settings page click on the name of the Azure subscription that you want to examine.			05				In the blade navigation panel choose Email notifications and enter a valid security contact international phone number in the Phone number box.			06				Click Save to apply the changes. When Azure Security Center detects compromised resources inside your Azure cloud account the subscription administrator(s) will receive alert notifications on the phone number configured at the previous step.			07				If required repeat steps no. 4 â 6 for other Microsoft Azure cloud subscription available.			,01				Define the necessary parameters for the account get-access-token command where <security-phone-number> represents the security contact phone number where you want to be notified when Azure Security Center service detects compromised resources within your Azure cloud account. Save the following content to a JSON file named security-contact-information.json and replace the highlighted details i.e. <azure-subscription-id> <security-email-address> and <security-phone-number> with your own contact information:{   "id":"/subscriptions/<azure-subscription-id>/providers/Microsoft.Security/securityContacts/default1"   "name":"default1"   "type":"Microsoft.Security/securityContacts"   "properties":{  	"email":"<security-email-address>"  	"phone":"<security-phone-number>"   }}02				Run account get-access-token command (Windows/macOS/Linux) using the parameters defined at the previous step (i.e. security-contact-information.json file) to set the valid international phone number where you want to receive notifications alerts from Azure Security Center within the selected Microsoft Azure cloud subscription:az account get-access-token	--query "{subscription:subscriptionaccessToken:accessToken}"	--out tsv | xargs -L1 bash -c 'curl -X PUT -H "Authorization: Bearer $1" -H "Content-Type: application/json" https://management.azure.com/subscriptions/$0/providers/Microsoft.Security/securityContacts/default1?api-version=2017-08-01-preview -d@"security-contact-information.json"'03				If successful the command output should return the updated Security Center configuration policy for example:{   "id":"/subscriptions/abcdabcd-1234-1234-1234-abcdabcdabcd/providers/Microsoft.Security/securityContacts/default1"   "name":"default1"   "type":"Microsoft.Security/securityContacts"   "properties":{  	"email":"notifyme@cloudconformity.com"  	"phone":"+1-425-1234567"  	"alertNotifications":"Off"  	"alertsToAdmins":"Off"   }}04				If required repeat steps no. 1 â 3 for other Microsoft Azure cloud subscription available.			,https://www.cloudconformity.com/knowledge-base/azure/SecurityCenter/security-contact-phone-number.html
Advanced Data Security for SQL Servers,Sql,Medium (should be achieved),NA,Ensure that Advanced Data Security feature is enabled within your Microsoft Azure SQL server configuration settings to provide a set of advanced SQL security capabilities for your SQL database servers such Data Discovery and Classification â used for discovering and classifying sensitive data Vulnerability Assessment â useful for finding and mitigating potential database vulnerabilities and Advanced Threat Protection â a service used for detecting abnormal activities that could indicate a threat to your SQL databases.,The Advanced Data Security (ADS) suite of security services represents an advanced layer of database security which enables you to recognize and respond to potential threats as they occur by providing security alerts on abnormal activity within your SQL servers. Once ADS is enabled and configured you can receive notification alerts upon suspicious database activities potential vulnerabilities SQL injection attacks and anomalous database access patterns. These threat detection alerts provide details of suspicious activity and generate recommendations on how to investigate and mitigate the threats found. Additionally Azure SQL Advanced Data Security includes functionality for discovering and classifying sensitive and protected data.,To determine if Advanced Data Security (ADS) is enabled for your Microsoft Azure SQL servers perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to All resources blade at https://portal.azure.com/#blade/HubsExtension/BrowseAll to access all your Microsoft Azure resources.			03				From the Type filter box select SQL server to list only the SQL database servers provisioned in your Azure account.			04				Click on the name of the SQL server that you want to examine.			05				In the navigation panel under Security select Advanced Data Security to access the ADS configuration settings for the selected database server.			06				On the ADS configuration page check the ADVANCED DATA SECURITY setting. If the ADS configuration setting is set to OFF the Advanced Data Security feature is not enabled for the selected Microsoft Azure SQL database server.			07				Repeat steps no. 4 â 6 for each SQL database server provisioned in the selected subscription.			08				Repeat steps no. 3 â 7 for each subscription created in your Microsoft Azure cloud account.			,01				Run Get-AzSqlServer PowerShell cmdlet using custom query filters to list the names of all SQL database servers and the names of their associated resource groups available in the current Azure subscription:Get-AzSqlServer | Select-Object ServerNameResourceGroupName02				The command output should return the requested SQL database server information:ServerName             ResourceGroupName----------             -----------------cc-production-server   cloud-shell-storage-westeuropecc-project5-server     cloud-shell-storage-westeurope03				Run Get-AzSqlServerAdvancedDataSecurityPolicy PowerShell command using the name of the SQL server that you want to examine as identifier parameter and custom query filters to get the Advanced Data Security (ADS) configuration status for the selected database server:Get-AzSqlServerAdvancedDataSecurityPolicy -ServerName "cc-production-server" -ResourceGroupName "cloud-shell-storage-westeurope" | Select-Object IsEnabled04				The command output should return the requested feature status:IsEnabled---------False				If Get-AzSqlServerAdvancedDataSecurityPolicy cmdlet output returns False for the IsEnabled configuration attribute as shown in the example above the Advanced Data Security feature is not enabled for the selected Microsoft Azure SQL database server.			05				Repeat step no. 3 and 4 for each SQL database server provisioned in the selected subscription.			06				Repeat steps no. 1 â 5 for each subscription available in your Microsoft Azure cloud account.			,01				Sign in to Azure Management Console.			02				Navigate to All resources blade at https://portal.azure.com/#blade/HubsExtension/BrowseAll to access all your Microsoft Azure resources.			03				From the Type filter box select SQL server to list only the SQL database servers available in your Azure account.			04				Click on the name of the SQL database server that you want to reconfigure.			05				In the navigation panel under Security select Advanced Data Security to access the ADS configuration settings for the selected database server.			06				On the ADS configuration page select ON for the ADVANCED DATA SECURITY setting to enable Advanced Data Security (ADS) for the selected SQL server.			07				The ADS security package includes Vulnerability Assessment and Advanced Threat Protection services. To configure these security services perform the following:										Under VULNERABILITY ASSESSMENT SETTINGS select the right Azure subscription and click Storage account to configure an Azure Storage account where the scan results for all the databases created on the server will be stored. On the Choose storage account panel click Create new to set up a new storage account or just select one of the storage accounts already available in the selected subscription to return to the ADS configuration page. (Optional) You can also enable Periodic recurring scans to scan your database(s) for vulnerabilities every 7 days and use the Send scan reports to box to define a separated list of emails to which your scan reports will be sent.											Under ADVANCED THREAT PROTECTION SETTINGS in the Send alerts to box specify a semicolon-separated list of emails to which alerts will be sent upon detection of abnormal activities then click Advanced Threat Protection types and select All to send email alerts for all types of vulnerabilities detected by the Advanced Threat Protection service.					08				Click Save to apply the Advanced Data Security configuration changes.			09				Repeat steps no. 4 â 8 for each SQL database server available within the selected subscription.			10				Repeat steps no. 3 â 9 for each subscription created in your Microsoft Azure cloud account.			,01				Run Enable-AzSqlServerAdvancedDataSecurity PowerShell cmdlet using the name of the SQL server that you want to reconfigure and the name of the associated resource group as identifier parameters (see Audit section part I to identify the right Azure cloud resource) to enable Advanced Data Security (ADS) feature for the selected Microsoft Azure SQL database server. Once the Enable-AzSqlServerAdvancedDataSecurity command request is sent a new Azure Storage account will automatically be created for saving vulnerability assessments. If a storage account was previously created for this purpose it will be used instead of creating a new one:Enable-AzSqlServerAdvancedDataSecurity -ServerName "cc-production-server" -ResourceGroupName "cloud-shell-storage-westeurope"02				The command output should return the metadata for the reconfigured SQL database server:ServerName           ResourceGroupName              IsEnabled----------           -----------------              ---------cc-production-server cloud-shell-storage-westeurope True03				(Optional) To configure the Advanced Threat Protection service once the Advanced Data Security (ADS) feature is enabled run Update-AzSqlDatabaseAdvancedThreatProtectionSettings PowerShell cmdlet for each database created on the selected Azure SQL server using the -NotificationRecipientsEmails parameter to provide the email address(es) to which the service sends notification alerts (the command does not produce an output):Update-AzSqlDatabaseAdvancedThreatProtectionSettings -ServerName "cc-production-server" -ResourceGroupName "cloud-shell-storage-westeurope" -DatabaseName "cc-sql-database" -StorageAccountName "abcdabcdabcdabcdabcd" -NotificationRecipientsEmails "secops@cloudconformity.com"04				Repeat steps no. 1 â 3 for each SQL database server available in the selected subscription.			05				Repeat steps no. 1 â 4 for each subscription created in your Microsoft Azure cloud account.			,https://www.cloudconformity.com/knowledge-base/azure/Sql/advanced-data-security-policy.html
Check for Publicly Accessible SQL Servers,Sql,High (not acceptable risk),Sql-013,Ensure that your Microsoft Azure SQL database servers are accessible through private endpoints instead of public IP addresses or service endpoints in order to eliminate the exposure from the public Internet.,You can connect to your Azure SQL database servers either publicly via public IP addresses or service endpoints or privately using a private endpoint. A private endpoint connection is associated with a private IP address available within an Azure virtual network. This virtual network usually contains the virtual machines (VMs) that can access your targeted private resource â in this case the SQL database server.,To determine if your Azure SQL database servers are accessible via private endpoints only perform the following actions:,01                Sign in to Azure Management Console.            02                Navigate to All resources blade at https://portal.azure.com/#blade/HubsExtension/BrowseAll to access all your Microsoft Azure resources.            03                From the Type filter box select SQL server to list only the SQL database servers provisioned in your Azure account.            04                Click on the name of the SQL server that you want to examine.            05                In the navigation panel under Security select Private endpoint connections to view the private endpoint connection(s) configured for the selected database server.            06                On the Private endpoint connections page check the list with the available private endpoint connections. If there are no private endpoint connections configured instead a "No results" status is displayed the selected Microsoft Azure SQL database server is not configured to be accessed via private endpoints therefore the resource is publicly accessible.            07                Repeat steps no. 4 â 6 for other SQL database servers available within the current Azure subscription.            08                Repeat steps no. 3 â 7 for each subscription created in your Microsoft Azure cloud account.            ,01                Sign in to Azure Management Console.            02                Navigate to Private link center blade at https://portal.azure.com/#blade/Microsoft_Azure_Network/PrivateLinkCenterBlade/overview.            03                In the navigation panel select Overview then click Start under Build a private connection to a service option to initiate the setup process.            04                On the Create a private endpoint page perform the following:                                        On the Basics panel provide the main configuration details such as the endpoint name and region the Azure subscription and the resource group where the private endpoint will be created. Click Next: Resource > to continue the process.                                            On the Resource panel choose Connect to an Azure resource in my directory as connection method then select the name of the SQL database server that you want to configure for private endpoint access (see Audit section part I to identify the right SQL server) from the Resource dropdown list. Once all the required details are provided click Next: Configuration > to continue.                                            On the Configuration panel select the Azure virtual network and the subnet where the new private endpoint will be deployed. Also choose Yes next to Integrate with private DNS zone to enable Private DNS integration. Click Next: Tags > to continue the setup process.                                            On the Tags panel create the necessary resource tags for your new private endpoint. Once the tags are created click Next: Review + create > to continue.                                            On the Review + create panel review and validate the configuration details provided then click Create to create the new private endpoint powered by Azure Private Link. The new private endpoint may take few minutes to fully deploy.                    05                Navigate to All resources blade at https://portal.azure.com/#blade/HubsExtension/BrowseAll to access all your Microsoft Azure resources.            06                From the Type filter box select SQL database to list only the SQL databases available in your Azure account.            07                Click on the name of the SQL database server that you want to reconfigure (see Audit section part I to identify the right resource).            08                In the navigation panel under Security select Private endpoint connections to access the private endpoint connection(s) available for the selected SQL server.            09                On the Private endpoint connections page make sure that the associated private endpoint created earlier in the remediation process has its state/status set to Approved.            10                 In the navigation panel under Security select Firewalls and virtual networks to access the firewall configuration set for the selected database server.            11                On the Firewalls and virtual networks page perform the following actions to remove database access via public IP addresses or service endpoints:                                        Select OFF next to Allow Azure services and resources to access this server setting to disable Microsoft Azure services and resources access to the selected database server.                                             Remove any firewall rules that allow inbound access to the selected SQL database server.                                            Click Save to apply the changes. The Azure virtual machines (VMs) within the appropriate virtual network can access now privately the selected SQL database server via the newly created private endpoint connection.                    12                 If required repeat steps no. 2 â 11 for other SQL database servers provisioned in the selected Azure subscription.            13                 Repeat steps no. 2 â 13 for each subscription created in your Microsoft Azure cloud account.            ,01                Run network private-endpoint create command (Windows/macOS/Linux) to create the private endpoint that will allow the virtual machines (VMs) available within the specified virtual network to access privately the selected Microsoft Azure SQL database server :az network private-endpoint create    --name cc-private-endpoint    --connection-name cc-private-endpoint-connection    --resource-group cloud-shell-storage-westeurope    --vnet-name cc-project5-vnet    --subnet subnet1    --private-connection-resource-id "/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Sql/servers/cc-sql-prod-server"    --group-ids sqlServer02                The command output should return the configuration metadata for the new private endpoint:{  "etag": "W/\"abcd1234-abcd-1234-abcd-abcd1234abcd\""  "id": "/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Network/privateEndpoints/cc-private-endpoint"  "location": "westeurope"  "manualPrivateLinkServiceConnections": []  "name": "cc-private-endpoint"  "privateLinkServiceConnections": [    {      "etag": "W/\"abcdabcd-1234-abcd-1234-abcdabcdabcd\""      "groupIds": [        "sqlServer"      ]      "id": "/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Network/privateEndpoints/cc-private-endpoint/privateLinkServiceConnections/cc-private-endpoint-connection"      "name": "cc-private-endpoint-connection"       ...            "privateLinkServiceConnectionState": {        "actionRequired": null        "actionsRequired": "None"        "description": "Auto-approved"        "status": "Approved"      }      "privateLinkServiceId": "/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Sql/servers/cc-sql-prod-server"      "requestMessage": null      "resourceGroup": "cloud-shell-storage-westeurope"      "type": "Microsoft.Network/privateEndpoints/privateLinkServiceConnections"    }  ]  "provisioningState": "Succeeded"  "resourceGroup": "cloud-shell-storage-westeurope"  "tags": null  "type": "Microsoft.Network/privateEndpoints"}03                Run network private-dns zone create command (Windows/macOS/Linux) to create a private DNS zone required to access the selected Azure SQL database server via the private endpoint:az network private-dns zone create    --resource-group cloud-shell-storage-westeurope    --name "privatelink.database.windows.net"04                The command output should return the private DNS zone metadata:{  "etag": "abcdabcd-1234-abcd-1234-abcdabcdabcd"  "id": "/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Network/privateDnsZones/privatelink.database.windows.net"  "location": "global"  "maxNumberOfRecordSets": 25000  "maxNumberOfVirtualNetworkLinks": 1000  "maxNumberOfVirtualNetworkLinksWithRegistration": 100  "name": "privatelink.database.windows.net"  "numberOfRecordSets": 1  "numberOfVirtualNetworkLinks": 0  "numberOfVirtualNetworkLinksWithRegistration": 0  "provisioningState": "Succeeded"  "resourceGroup": "cloud-shell-storage-westeurope"  "tags": null  "type": "Microsoft.Network/privateDnsZones"} 05                Run network private-dns link vnet create command (Windows/macOS/Linux) to create a virtual network link to the private DNS zone created at the previous steps (i.e. "privatelink.database.windows.net"):az network private-dns link vnet create    --resource-group cloud-shell-storage-westeurope    --zone-name "privatelink.database.windows.net"    --name cc-project5-dns-link    --virtual-network cc-project5-vnet    --registration-enabled false06                The command output should return the configuration metadata for the new virtual network link:{  "etag": "\"abcdabcd-1234-abcd-1234-abcdabcdabcd\""  "id": "/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Network/privateDnsZones/privatelink.database.windows.net/virtualNetworkLinks/cc-project5-dns-link"  "location": "global"  "name": "cc-project5-dns-link"  "provisioningState": "Succeeded"  "registrationEnabled": false  "resourceGroup": "cloud-shell-storage-westeurope"  "tags": null  "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks"  "virtualNetwork": {    "id": "/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Network/virtualNetworks/cc-project5-vnet"    "resourceGroup": "cloud-shell-storage-westeurope"  }  "virtualNetworkLinkState": "Completed"}07                Run network private-dns record-set a add-record command (Windows/macOS/Linux) to create the required A record for the private DNS zone created earlier in the process. Replace the private IP address available as value for the âa configuration parameter with your own private IP:az network private-dns record-set a add-record    --record-set-name cc-sql-prod-server    --zone-name privatelink.database.windows.net    --resource-group cloud-shell-storage-westeurope    -a 10.0.0.508                The command output should return the network private-dns record-set a add-record command request metadata:{  "aRecords": [    {      "ipv4Address": "10.0.0.5"    }  ]  "etag": "abcdabcd-1234-abcd-1234-abcdabcdabcd"  "fqdn": "cc-sql-prod-server.privatelink.database.windows.net."  "id": "/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Network/privateDnsZones/privatelink.database.windows.net/A/cc-sql-prod-server"  "isAutoRegistered": false  "metadata": null  "name": "cc-sql-prod-server"  "resourceGroup": "cloud-shell-storage-westeurope"  "ttl": 3600  "type": "Microsoft.Network/privateDnsZones/A"}09                Now that the selected Azure SQL database server is accessible via the private endpoint (using the allocated private IP address) you need to reconfigure the server firewall in order to disable the public access to the selected database server (including Azure services and resources access to the database). Run sql server firewall-rule list command (Windows/macOS/Linux) to list the firewall rules created for the selected Microsoft Azure SQL database server:az sql server firewall-rule list    --ids "/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Sql/servers/cc-sql-prod-server"10                The command output should return the configuration information for each firewall rule set for the selected SQL server:[  {    "endIpAddress": "0.0.0.0"    "id": "/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Sql/servers/cc-sql-prod-server/firewallRules/AllowAllWindowsAzureIps"    "kind": "v12.0"    "location": "West Europe"    "name": "AllowAllWindowsAzureIps"    "resourceGroup": "cloud-shell-storage-westeurope"    "startIpAddress": "0.0.0.0"    "type": "Microsoft.Sql/servers/firewallRules"  }  {    "endIpAddress": "192.168.0.1"    "id": "/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Sql/servers/cc-sql-prod-server/firewallRules/ClientIp-2019-10-21_13-51-19"    "kind": "v12.0"    "location": "West Europe"    "name": "ClientIp-2019-10-21_13-51-19"    "resourceGroup": "cloud-shell-storage-westeurope"    "startIpAddress": "192.168.0.1"    "type": "Microsoft.Sql/servers/firewallRules"  }]11                Run sql server firewall-rule delete command (Windows/macOS/Linux) to delete any firewall rules that allow public access to the selected Azure SQL database server. For example the following command request removes a firewall rule identified by the ID "/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Sql/servers/cc-sql-prod-server/firewallRules/AllowAllWindowsAzureIps" that allows Azure services and resources to access the selected SQL server (the command does not produce an output):az sql server firewall-rule delete    --ids "/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Sql/servers/cc-sql-prod-server/firewallRules/AllowAllWindowsAzureIps"12                If required repeat steps no. 1 â 11 for other SQL database servers provisioned in the selected Azure subscription.            13                Repeat steps no. 1 â 12 for each subscription created within your Microsoft Azure cloud account.            ,,https://www.cloudconformity.com/knowledge-base/azure/Sql/publicly-accessible-sql-servers.html
Check for Sufficient Point in Time Restore (PITR) Backup Retention Period,Sql,Medium (should be achieved),NA,Ensure that Microsoft Azure SQL databases have a sufficient Point in Time Restore (PITR) backup retention period configured for security and compliance purposes. Azure SQL service automatically creates database backups that are kept between 7 and 35 days. The SQL service uses Azure read-access geo-redundant storage (RA-GRS) to ensure that the backups are preserved even if the primary datacenter becomes unavailable. Prior to running this rule by the Cloud Conformity engine the PITR backup retention period must configured within the rule settings on the Cloud Conformity account dashboard. The supported values are: 7 14 21 28 and 35 days.,Having an optimal backup retention period set for Azure SQL databases will enforce your backup strategy to follow the best practices as specified in the compliance regulations promoted within your organization. Retaining point-in-time SQL database backups for a longer period of time will allow you to handle more efficiently your data restoration process in the event of a failure.,To determine if your Azure SQL databases have a sufficient PITR backup retention period configured perform the following actions:,01                Sign in to your Cloud Conformity account access Check for Sufficient Point in Time Restore (PITR) Backup Retention Period conformity rule settings and note the PITR backup retention period configured for the rule.            02                Sign in to Azure Management Console.            03                Navigate to All resources blade at https://portal.azure.com/#blade/HubsExtension/BrowseAll to access all your Microsoft Azure resources.            04                From the Type filter box select SQL server to list only the SQL database servers available in your Azure account.            05                Click on the name of the SQL server that you want to examine.            06                On the navigation panel under Settings select Manage backups to access the backup retention policies created for the SQL databases available within the selected server.            07                On the Manage backups page check the value (i.e. number of days) available in the PiTR BACKUPS column for each SQL database listed. If the Point in Time Restore (PITR) backup retention period set for the verified SQL database(s) is different than the retention period identified at step no. 1 the selected Microsoft Azure SQL database server does not have a sufficient backup retention period configured for its databases.            08                Repeat steps no. 4 â 7 for each SQL database server available in the current subscription.            09                Repeat steps no. 4 â 8 for each subscription created in your Microsoft Azure cloud account.            ,01                Sign in to your Cloud Conformity account access Check for Sufficient Point in Time Restore (PITR) Backup Retention Period conformity rule settings and note the PITR backup retention period configured for the rule.            02                Run Get-AzSqlServer PowerShell cmdlet using custom query filters to list the names of all SQL database servers (and their associated resource groups) available in the current Azure subscription:Get-AzSqlServer | Select-Object ServerNameResourceGroupName03                The command output should return the requested SQL database server information:ServerName             ResourceGroupName----------             -----------------cc-webapp-sql-server   cloud-shell-storage-westeuropecc-project5-db-server  cloud-shell-storage-westeurope04                Run Get-AzSqlDatabase PowerShell command using the name of the SQL server that you want to examine as identifier parameter and custom query filters to get the name of each SQL database available within the selected server:Get-AzSqlDatabase -ResourceGroupName cloud-shell-storage-westeurope -ServerName cc-webapp-sql-server | Select-Object DatabaseName05                The command output should return the list with the requested SQL database names:DatabaseName------------cc-web-sql-databasemaster06                Run Get-AzSqlDatabaseBackupShortTermRetentionPolicy PowerShell command using the name of the SQL database that you want to examine as identifier parameter and custom query filters to get the PITR backup retention period configured for the selected database:Get-AzSqlDatabaseBackupShortTermRetentionPolicy -ResourceGroupName cloud-shell-storage-westeurope -ServerName cc-webapp-sql-server -DatabaseName cc-web-sql-database | Select-Object RetentionDays07                The command output should return the database backup retention period in number of days:RetentionDays-------------            7            If the value returned by the Get-AzSqlDatabaseBackupShortTermRetentionPolicy cmdlet output is different than the retention period identified at step no. 1 the selected Microsoft Azure SQL database server does not have a sufficient backup retention period configured for its databases.            08                Repeat steps no. 4 â 7 for each SQL database server created within the current subscription.            09                Repeat steps no. 2 â 8 for each subscription created in your Microsoft Azure cloud account.            ,01                Sign in to your Cloud Conformity account access Check for Sufficient Point in Time Restore (PITR) Backup Retention Period conformity rule settings and copy the PITR backup retention period configured for the rule.            02                Sign in to Azure Management Console.            03                Navigate to All resources blade at https://portal.azure.com/#blade/HubsExtension/BrowseAll to access all your Microsoft Azure resources.            04                From the Type filter box select SQL server to list only the SQL database servers available in your Azure account.            05                Click on the name of the SQL server that you want to reconfigure.            06                On the navigation panel under Settings select Manage backups to access the backup retention policies created for the SQL databases available within the selected server.            07                On the Manage backups page select the SQL database that you want to reconfigure (see Audit section part I to identify the right database) then click on Configure retention button to open the retention policy set for the selected database.            08                On the Configure policies panel select the value copied at step no. 1 from the Point In Time Restore Configuration dropdown list to set the right PITR backup retention period in number of days for the selected Microsoft Azure SQL database. Click Apply to save the configuration changes.            09                Repeat step no. 7 and 8 for other SQL databases available within the selected SQL server.            10                Repeat steps no. 5 â 9 for each SQL server provisioned in the selected Azure subscription.            11                If required repeat steps no. 4 â 10 for each subscription created in your Microsoft Azure cloud account.            ,01                Sign in to your Cloud Conformity account access Check for Sufficient Point in Time Restore (PITR) Backup Retention Period conformity rule settings and copy the PITR backup retention period configured for the rule.            02                Run Set-AzSqlDatabaseBackupShortTermRetentionPolicy PowerShell command using the name of the SQL database that you want to reconfigure as identifier parameter (see Audit section part II to identify the right resource) to set the right PITR backup retention period as copied at step no. 1 for the selected Microsoft Azure SQL database. For example the following Set-AzSqlDatabaseBackupShortTermRetentionPolicy command request sets the database backup retention period to 35 days:Set-AzSqlDatabaseBackupShortTermRetentionPolicy -ResourceGroupName cloud-shell-storage-westeurope -ServerName cc-webapp-sql-server -DatabaseName cc-web-sql-database -RetentionDays 3503                The command output should return the PowerShell cmdlet request metadata:ResourceGroupName               ServerName            DatabaseName          RetentionDays-----------------               ----------            ------------          -------------cloud-shell-storage-westeurope  cc-webapp-sql-server  cc-web-sql-database              3504                Repeat step no. 2 and 3 for other SQL databases created within the selected SQL server.            05                Repeat steps no. 2 â 4 for each SQL server provisioned in the selected Azure subscription.            06                If required repeat steps no. 2 â 5 for each subscription created in your Microsoft Azure cloud account.            ,https://www.cloudconformity.com/knowledge-base/azure/Sql/sufficient-pitr-backup.html
Check for Unrestricted SQL Database Access,Sql,Very High (act immediately),Sql-010,Ensure that firewalls associated with your Microsoft Azure SQL servers are not configured to allow unrestricted inbound access (i.e. 0.0.0.0/0) in order to protect against unauthorized connections. By default a Microsoft SQL server firewall contains a StartIP of 0.0.0.0 and an EndIP of 0.0.0.0 allowing access to all Microsoft Azure services. Additionally a custom rule can be set up with StartIP of 0.0.0.0 and EndIP of 255.255.255.255 to allow access from any IP address over the Internet. To reduce the potential attack surface for your SQL servers firewall rules should be configured with granular IPs by referencing the range of IP addresses available from specific authorized networks.,Allowing unrestricted SQL database access can increase opportunities for malicious activities such as hacking and loss of data.,To determine if your Microsoft SQL server firewalls allow unrestricted SQL access perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to All resources blade at https://portal.azure.com/#blade/HubsExtension/BrowseAll to access all your Microsoft Azure resources.			03				From the Type filter box select SQL server to list only the SQL database servers currently available in your account.			04				Click on the name of the SQL server that you want to examine.			05				In the navigation panel under Security select Firewalls and virtual networks to access the firewall configuration set for the selected database server.			06				On the Firewalls and virtual networks page check the Allow access to Azure services setting status. If setting status is set to ON the selected SQL database server accepts communication from any subnet therefore the server allows unrestricted access to the hosted SQL databases. If Allow access to Azure services is set to OFF check the firewall rules for any entry with the START IP set to 0.0.0.0. If one or more rules are configured with START IP of 0.0.0.0 the selected Microsoft Azure SQL server allows unrestricted inbound access to the associated SQL databases.			07				Repeat steps no. 4 â 6 for each SQL database server provisioned within the selected subscription.			08				Repeat steps no. 3 â 8 for each subscription created in your Microsoft Azure cloud account.			,01				Run Get-AzSqlServer PowerShell command (cmdlet) using custom query filters to list the names of all SQL database servers (and their associated resource groups) available in the current Azure subscription:Get-AzSqlServer | Select-Object ServerNameResourceGroupName02				The command output should return the requested SQL database server information:ServerName          ResourceGroupName----------          -----------------cc-prod-sql-server  cloud-shell-storage-westeuropecc-project5-server  cloud-shell-storage-westeurope03				Run Get-AzSqlServerAuditing PowerShell command using the name of the SQL server that you want to examine as identifier parameter and custom query filters to describe the firewall rules configured for the selected Azure SQL database server:Get-AzSqlServerFirewallRule	-ServerName "cc-prod-sql-server"	-ResourceGroupName "cloud-shell-storage-westeurope"04				The command output should return all the firewall rules configured for the selected resource:ResourceGroupName : cloud-shell-storage-westeuropeServerName        : cc-prod-sql-serverStartIpAddress    : 0.0.0.0EndIpAddress      : 0.0.0.0FirewallRuleName  : AllowAllWindowsAzureIpsResourceGroupName : cloud-shell-storage-westeuropeServerName        : cc-prod-sql-serverStartIpAddress    : 0.0.0.0EndIpAddress      : 255.255.255.255FirewallRuleName  : cc-database-access-rule1				If one or more firewall rules returned by the Get-AzSqlServerAuditing command output have the StartIpAddress configuration attribute value set to 0.0.0.0 (i.e. any IP address) as shown in the example above the selected Microsoft Azure SQL server allows unrestricted ingress/inbound access for all the SQL databases hosted on the server.			05				Repeat step no. 3 and 4 for each Azure SQL database server provisioned in the selected subscription.			06				Repeat steps no. 1 â 5 for each subscription available within your Microsoft Azure cloud account.			,01				Sign in to Azure Management Console.			02				Navigate to All resources blade at https://portal.azure.com/#blade/HubsExtension/BrowseAll to access all your Microsoft Azure resources.			03				From the Type filter box select SQL server to list only the SQL database servers currently available in your account.			04				Click on the name of the SQL server that you want to reconfigure (see Audit section part I to identify the right database server).			05				In the navigation panel under Security select Firewalls and virtual networks to access the firewall configuration set for the selected database server.			06				On the Firewalls and virtual networks page perform the following:										Select OFF next to Allow access to Azure services setting to disable database access to other Azure services.											Select the firewall rule with the START IP set to 0.0.0.0. click on the context menu (...) then select Delete to remove the noncompliant rule from the selected server firewall. Repeat this step for all the firewall rules that allow unrestricted inbound access.											Use RULE NAME START IP and END IP forms to define new firewall rules based on your access requirements. For example set START IP and END IP to 10.0.1.5 to allow connections from a specific IP address only or set START IP to 10.0.1.0 and END IP to 10.0.1.255 to allow access from an IP address range. You can also use Add client IP button to create a new firewall rule that allows connections from your public IP address only.											Click Save to apply the changes.					07				Repeat steps no. 3 â 6 for all the Azure SQL servers that allow unrestricted inbound access to their SQL databases available in the selected Azure subscription.			08				Repeat steps no. 3 â 9 for each subscription created in your Microsoft Azure cloud account.			,01				Run Remove-AzSqlServerFirewallRule PowerShell command to disable "Allow access to Azure services" feature by removing the required rule (i.e. "AllowAllWindowsAzureIps") from the selected SQL database server firewall:Remove-AzSqlServerFirewallRule	-FirewallRuleName "AllowAllWindowsAzureIps"	-ServerName "cc-prod-sql-server"	-ResourceGroupName "cloud-shell-storage-westeurope"02				The command output should return the configuration metadata for the deleted firewall rule:ResourceGroupName : cloud-shell-storage-westeuropeServerName        : cc-prod-sql-serverStartIpAddress    : 0.0.0.0EndIpAddress      : 0.0.0.0FirewallRuleName  : AllowAllWindowsAzureIps03				Run Set-AzSqlServerFirewallRule PowerShell command to update the StartIpAddress and EndIpAddress attribute values for the SQL server firewall rule that you want to modify (see Audit section part II to identify the right firewall rule) in order to restrict the database access to a specific IP address/IP address range only:Set-AzSqlServerFirewallRule -ServerName "cc-prod-sql-server"	-ResourceGroupName "cloud-shell-storage-westeurope"	-FirewallRuleName "cc-allow-public-access-rule"	-StartIpAddress "192.168.0.15" -EndIpAddress "192.168.0.15"04				The command output should return the configuration metadata for the modified firewall rule:ResourceGroupName : cloud-shell-storage-westeuropeServerName        : cc-prod-sql-serverStartIpAddress    : 192.168.0.15EndIpAddress      : 192.168.0.15FirewallRuleName  : cc-allow-public-access-rule05				Repeat step no. 1 â 4 for all the Azure SQL servers that allow unrestricted inbound access to their SQL databases available within the current Azure subscription.			06				Repeat steps no. 1 â 5 for each subscription created within your Microsoft Azure cloud account.			,https://www.cloudconformity.com/knowledge-base/azure/Sql/unrestricted-sql-database-access.html
Configure "AuditActionGroup" for SQL Server Auditing,Sql,Medium (should be achieved),NA,Ensure that the "AuditActionGroup" property is properly configured within the auditing policy implemented at the Microsoft Azure SQL server level in order to capture all critical activity triggered on your SQL database servers and on all the SQL databases hosted on those servers. Prior to running this rule by the Cloud Conformity engine SQL database auditing needs to be enabled for all Microsoft Azure SQL servers.,To capture critical actions performed on your Azure SQL databases auditing should be configured to enable the "AuditActionGroup" property with the appropriate configuration. To ensure comprehensive audit logging for your SQL servers and SQL databases hosted on these servers the "AuditActionGroup" should contain the following action groups: SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP â which indicates a principal logged in successfully to a contained database FAILED_DATABASE_AUTHENTICATION_GROUP â indicates that a principal tried to log on to a contained database and failed (events in this class are triggered by new connections or by connections that are reused from a connection pool) and BATCH_COMPLETED_GROUP â which indicates that the Transact-SQL batch has been completed.,To determine if "AuditActionGroup" is enabled and properly configured at the Azure SQL database server level perform the following actions:,01				Run Get-AzSqlServer PowerShell command (cmdlet) using custom query filters to list the names of all SQL database servers (and the name of their associated resource groups) available in the current Azure subscription:Get-AzSqlServer | Select-Object ServerNameResourceGroupName02				The command output should return the requested SQL database server information:ServerName              ResourceGroupName----------              -----------------cc-project5-sql-server  cloud-shell-storage-westeuropecc-development-server   cloud-shell-storage-westeurope cc-prod-sql-server      cloud-shell-storage-westeurope03				Run Get-AzSqlServerAuditing PowerShell command using the name of the SQL server that you want to examine as identifier parameter and custom query filters to describe the action groups enabled for the "AuditActionGroup" property on the selected database server:Get-AzSqlServerAuditing -ServerName "cc-project5-sql-server" -ResourceGroupName "cloud-shell-storage-westeurope" | Select-Object AuditActionGroup04				The command output should return the name of each action group currently enabled:AuditActionGroup----------------FAILED_DATABASE_AUTHENTICATION_GROUP				If Get-AzSqlServerAuditing cmdlet output does not return all action groups available for "AuditActionGroup" i.e. SUCCESSFUL_DATABASE_AUTHENTICATION_GR	OUP FAILED_DATABASE_AUTHENTICATION_GROUP and BATCH_COMPLETED_GROUP the "AuditActionGroup" property configuration for the selected Microsoft Azure SQL database server is not compliant.			05				Repeat step no. 3 and 4 for each SQL database server provisioned in the selected Azure subscription.			06				Repeat steps no. 1 â 5 for each subscription available in your Microsoft Azure cloud account.			,01				Run Set-AzSqlServerAuditing PowerShell cmdlet using the name of the SQL server that you want to reconfigure as identifier parameter (see Audit section part I to identify the right SQL resource) and the action groups required to be enabled to properly configure the "AuditActionGroup" property for the selected Microsoft Azure SQL database server. For compliance "AuditActionGroup" must have all three action groups enabled i.e. SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP FAILED_DATABASE_AUTHENTICATION_GROUP and BATCH_COMPLETED_GROUP. The audit log destination is determined by specifying one of the following parameters: BlobStorage LogAnalytics or EventHub (if none is specified the default is BlobStorage). Use the State parameter to enable/disable the auditing policy. You can also define retention for the audit logs by setting the right value for the RetentionInDays parameter. For example the following PowerShell command request configures the "AuditActionGroup" property to include SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP FAILED_DATABASE_AUTHENTICATION_GROUP and BATCH_COMPLETED_GROUP action groups required by SQL database auditing for an SQL server named "cc-project5-sql-server" available in the "cloud-shell-storage-westeurope" resource group (the command does not produce an output):Set-AzSqlServerAuditing -State Enabled -ServerName "cc-project5-sql-server" -ResourceGroupName "cloud-shell-storage-westeurope" -StorageAccountName "abcd1234abcd1234abcd1234" -AuditActionGroup "SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP" "FAILED_DATABASE_AUTHENTICATION_GROUP" "BATCH_COMPLETED_GROUP" -RetentionInDays 9002				Repeat step no. 1 for each SQL database server available within the selected subscription.			03				Repeat step no. 1 and 2 for each subscription created in your Microsoft Azure cloud account.			,,,https://www.cloudconformity.com/knowledge-base/azure/Sql/audit-action-groups.html
Enable All Types of Threat Detection on SQL Servers,Sql,High (not acceptable risk),NA,Ensure that all types of threat detection are enabled for the Advanced Threat Protection service promoted by Advanced Data Security (ADS) â a unified set of security services for Microsoft Azure SQL servers that includes Data Discovery and Classification Vulnerability Assessment and Advanced Threat Protection. Advanced Threat Protection is a security service responsible for the detection of suspicious database activity that indicates unusual and potentially harmful attempts to access or exploit your Azure SQL database. The service can be configured to trigger notification alerts for the following threats:Vulnerability to SQL injection â an alert is triggered when an application generates a faulty SQL statement in your SQL database. This alert may indicate a possible vulnerability to SQL injection attacks. In this case there are two reasons for the generation of a faulty SQL statement: a bug in the application code that constructs the faulty SQL statement or a block of application code or stored procedures that do not sanitize user input when constructing the faulty SQL statement which may be exploited for SQL Injection.Potential SQL injection â an alert is triggered when an active exploit happens against an identified web application vulnerability to SQL injection. This alert is triggered when the attacker is trying to inject malicious SQL statements using the vulnerable application code or stored procedures.Access from an unusual location â an alert is triggered when there is a change in the access pattern to the SQL server where someone has logged on to the SQL server from an unusual geographical location. In most cases this alert detects legitimate actions such as creating new applications or maintenance session made by developers but in some cases the alert detects malicious actions initiated by an external attacker.Access from an unfamiliar principal â an alert is triggered when there is a change in the access pattern to the SQL server where someone has logged on to the SQL server using an unusual principal (SQL user). In some cases this alert detects a legitimate action however in other cases the alert detects a malicious action performed by a former employee or an external attacker.Access from a potentially harmful application â this type of alert is triggered when a potentially harmful application is used to access the SQL database. In most cases the alert detects penetration testing in action but in some cases the alert detects an attack using common attack tools.Brute forcing SQL credentials â an alert is triggered when there is an atypically high number of failed logins with different access credentials. In some cases the alert detects penetration testing in action however in most cases the alert detects a brute force attack.Cloud Conformity strongly recommends enabling notification alerts for all these types of threats.,Enabling all threat detection types protects against SQL database vulnerabilities SQL injection attacks and other potentially harmful activities such as atypical client logins.,To determine if "Advanced Threat Detection types" setting is set to "All" perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to All resources blade at https://portal.azure.com/#blade/HubsExtension/BrowseAll to access all your Microsoft Azure resources.			03				From the Type filter box select SQL server to list only the SQL database servers provisioned in your Azure account.			04				Click on the name of the SQL server that you want to examine.			05				In the navigation panel under Security select Advanced Data Security to access the ADS configuration settings for the selected database server.			06				On the ADS configuration page under ADVANCED THREAT PROTECTION SETTINGS check the Advanced Threat Protection types setting status. If the configuration status is set to None or Custom the Advanced Threat Protection service does not send notification alerts for all types of threats detected for the selected SQL database server.			07				Repeat steps no. 4 â 6 for each SQL database server available in the selected subscription.			08				Repeat steps no. 3 â 7 for each subscription created in your Microsoft Azure cloud account.			,01				Run Get-AzSqlServer PowerShell cmdlet using custom query filters to list the names of all SQL database servers and the names of their associated resource groups available in the current Azure subscription:Get-AzSqlServer | Select-Object ServerNameResourceGroupName02				The command output should return the requested SQL database server information:ServerName             ResourceGroupName----------             -----------------cc-project5-server     cloud-shell-storage-westeuropecc-az-sql-db-server    cloud-shell-storage-westeurope03				Run Get-AzureRmSqlServerThreatDetectionPolicy PowerShell command using the name of the SQL server that you want to examine as identifier parameter and custom query filters to describe the "Advanced Threat Detection types" setting configuration status for the selected database server:Get-AzureRmSqlServerThreatDetectionPolicy -ServerName "cc-project5-server" -ResourceGroupName "cloud-shell-storage-westeurope" | Select-Object ExcludedDetectionTypes04				The command output should return the requested configuration setting status:ExcludedDetectionTypes----------------------{Access_Anomaly Data_Exfiltration Unsafe_Action}				If the Get-AzureRmSqlServerThreatDetectionPolicy cmdlet output does not return an empty object i.e. {} for ExcludedDetectionTypes configuration attribute the "Advanced Threat Detection types" setting is not set to "All" and the Advanced Threat Protection service does not send notification alerts for all types of threats detected for the selected SQL server.			05				Repeat step no. 3 and 4 for each SQL database server available in the selected subscription.			06				Repeat steps no. 1 â 5 for each subscription created in your Microsoft Azure cloud account.			,01				Sign in to Azure Management Console.			02				Navigate to All resources blade at https://portal.azure.com/#blade/HubsExtension/BrowseAll to access all your Microsoft Azure resources.			03				From the Type filter box select SQL server to list only the SQL database servers available in your Azure account.			04				Click on the name of the SQL database server that you want to reconfigure.			05				In the navigation panel under Security select Advanced Data Security to access the ADS configuration settings for the selected database server.			06				On the ADS configuration page under ADVANCED THREAT PROTECTION SETTINGS click Advanced Threat Protection types to access "Advanced Threat Detection types" setting configuration.			07				On the Advanced Threat Protection types panel select All to send email alerts for all types of vulnerabilities detected by the Advanced Threat Protection security service then click OK to apply the changes.			08				On the Advanced Data Security page click Save to save the Advanced Threat Protection configuration changes.			09				Repeat steps no. 4 â 8 for each SQL database server provisioned in the selected subscription.			10				Repeat steps no. 3 â 9 for each subscription created within your Microsoft Azure cloud account.			,01				Run Set-AzureRmSqlServerThreatDetectionPolicy PowerShell cmdlet using the name of the SQL server that you want to reconfigure and the name of the associated resource group as identifier parameters (see Audit section part I to identify the right Azure SQL resource) to enable sending notification alerts for all types of threats detected by the Advanced Threat Protection security service for the selected Microsoft Azure SQL database server (the command does not produce an output):Set-AzureRmSqlServerThreatDetectionPolicy -ServerName "cc-project5-server" -ResourceGroupName "cloud-shell-storage-westeurope" -ExcludedDetectionType "None"02				Repeat step no. 1 for each SQL database server provisioned in the selected subscription.			03				Repeat step no. 1 and 2 for each subscription created within your Microsoft Azure cloud account.			,https://www.cloudconformity.com/knowledge-base/azure/Sql/enable-all-threat-detection-types.html
Enable Auditing for SQL Servers,Sql,Medium (should be achieved),NA,Ensure that the "Auditing" feature is enabled within your Microsoft Azure SQL server configuration settings in order to monitor your SQL databases for security compliance and troubleshooting purposes. Microsoft Azure allows an SQL server to be created as a service. Enabling auditing at the server level ensures that all existing and newly created databases on that SQL server are audited.,Once enabled the SQL database auditing starts recording database events and writes them to an audit log created within your Azure Storage account OMS workspace or Event Hub. The logging data recorded can be extremely useful for maintaining security and regulatory compliance understand database activity and trends and gain insight into anomalies that could indicate potential security violations.,To determine if database auditing is enabled for your Microsoft Azure SQL servers perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to All resources blade at https://portal.azure.com/#blade/HubsExtension/BrowseAll to access all your Microsoft Azure resources.			03				From the Type filter box select SQL server to list only the SQL database servers currently available in your account.			04				Click on the name of the SQL server that you want to examine.			05				In the navigation panel under Security select Auditing to access the auditing policy configuration settings for the selected database server.			06				On the auditing policy configuration page check the Auditing status. If Auditing configuration setting is set to OFF the "Auditing" feature is not enabled for the selected Microsoft Azure SQL database server.			07				Repeat steps no. 4 â 6 for each SQL database server provisioned within the selected subscription.			08				Repeat steps no. 3 â 7 for each subscription created in your Microsoft Azure cloud account.			,01				Run Get-AzSqlServer PowerShell cmdlet using custom query filters to list the names of all SQL database servers (and their associated resource groups) available in the current Azure subscription:Get-AzSqlServer | Select-Object ServerNameResourceGroupName02				The command output should return the requested SQL database server information:ServerName           ResourceGroupName----------           -----------------cc-sql-db-server     cloud-shell-storage-westus2cc-project5-server   cloud-shell-storage-westus203				Run Get-AzSqlServerAuditing PowerShell command using the name of the SQL server that you want to examine as identifier parameter and custom query filters to get the "Auditing" feature configuration status for the selected database server:Get-AzSqlServerAuditing -ServerName "cc-sql-db-server" -ResourceGroupName "cloud-shell-storage-westus2" | Select-Object AuditState04				The command output should return the requested feature status:AuditState----------Disabled				If Get-AzSqlServerAuditing cmdlet output returns Disabled for the AuditState configuration attribute as shown in the example above the database auditing is not enabled for the selected Microsoft Azure SQL database server.			05				Repeat step no. 3 and 4 for each SQL database server provisioned in the selected subscription.			06				Repeat steps no. 1 â 5 for each subscription created in your Microsoft Azure cloud account.			,01				Sign in to Azure Management Console.			02				Navigate to All resources blade at https://portal.azure.com/#blade/HubsExtension/BrowseAll to access all your Microsoft Azure resources.			03				From the Type filter box select SQL server to list only the SQL database servers provisioned in your Azure account.			04				Click on the name of the SQL server that you want to reconfigure.			05				In the navigation panel under Security select Auditing to access the auditing policy configuration settings for the selected SQL server. 			06				On the auditing policy configuration page under Auditing select ON and choose at least one log destination to write the audit log files generated for the selected database server. You can configure the "Auditing" feature to write logs to an Azure storage account to a Log Analytics workspace for consumption by Azure Monitor logs or to Azure Event Hub for consumption using an event hub. You can set up any combination of the following options and your database audit logs will be written to each:										To configure writing SQL database audit logs to an Azure storage account select Storage and click Configure under Storage details. Select the Azure storage account where the log files will be saved the appropriate retention period then click OK to apply the changes.											To configure writing SQL audit logs to a Log Analytics workspace select Log Analytics (Preview) and click Configure under Log Analytics details. Select or create the Log Analytics workspace where the log files will be written then click OK to apply the configuration changes. Be aware that enabling auditing to Log Analytics will incur cost based on ingestion rates.											To configure writing SQL database audit logs to an event hub select Event Hub (Preview) and click Configure under Event Hub details. Select the event hub where your SQL server logs will be written then click OK to apply the changes. Make sure that the event hub is in the same region as your SQL database server.					07				Click Save to enable auditing for the selected SQL server. 			08				Repeat steps no. 4 â 7 for each SQL database server available in the selected subscription.			09				Repeat steps no. 3 â 8 for each subscription created in your Microsoft Azure cloud account.			,01				Run Set-AzSqlServerAuditing PowerShell cmdlet using the name of the SQL server that you want to reconfigure as identifier parameter (see Audit section part I to identify the right Azure resource) and the log destination where the audit log files will be saved to enable auditing for the selected Microsoft Azure SQL database server. The audit log destination is determined by specifying one of the following parameters: BlobStorage LogAnalytics or EventHub (if none is specified the default is BlobStorage). Use the State parameter to enable/disable the auditing policy. When the audit log destination is blob storage specify the StorageAccountName parameter to configure the storage account that will hold the audit logs. You can also define retention for the audit logs by setting the right value for the RetentionInDays parameter. For example the following PowerShell command request enables database auditing for an SQL server named "cc-sql-db-server" available in the "cloud-shell-storage-westus2" resource group that saves the generated audit log files for 90 days to blob storage within an Azure Storage Account named "abcd1234abcd1234abcd1234" (the command does not produce an output):Set-AzSqlServerAuditing -State Enabled -ServerName "cc-sql-db-server" -ResourceGroupName "cloud-shell-storage-westus2" -StorageAccountName "abcd1234abcd1234abcd1234" -RetentionInDays 9002				Repeat step no. 1 for each SQL database server available within the selected subscription.			03				Repeat step no. 1 and 2 for each subscription created in your Microsoft Azure cloud account.			,https://www.cloudconformity.com/knowledge-base/azure/Sql/auditing.html
Enable Auto-Failover Groups,Sql,Medium (should be achieved),Sql-014,Ensure that Microsoft Azure SQL database servers are using auto-failover groups in order to enable database replication and automatic failover. A Microsoft Azure SQL failover group is designed to automatically manage replication connectivity high availability and failover for a set of SQL databases.,When auto-failover groups are used for your Azure SQL databases any outage that impacts one or more SQL databases within the group results in an automatic failover. In addition auto-failover groups provide read-write and read-only listener endpoints that remain unchanged during failovers. Whether you use manual or automatic failover activation the failover process switches all secondary databases in the group to primary databases. After the failover is completed the DNS record is automatically updated to redirect the endpoints to the new Azure region.,To determine if your Azure SQL database servers are configured to use auto-failover groups perform the following actions:,01                Sign in to Azure Management Console.            02                Navigate to All resources blade at https://portal.azure.com/#blade/HubsExtension/BrowseAll to access all your Microsoft Azure resources.            03                From the Type filter box select SQL server to list only the SQL database servers available in your Azure account.            04                Click on the name of the SQL database server that you want to examine.            05                On the navigation panel under Settings select Failover groups to access the list with the auto-failover groups available for the selected database server.            06                On the Failover groups page check for any auto-failover that includes the selected server. If there are no failover groups listed on the page instead the following status is displayed: "You have no group created" the selected Microsoft Azure SQL database server is not configured to use auto-failover groups.            07                Repeat steps no. 4 â 6 for each SQL database available within the current Azure subscription.            08                Repeat steps no. 3 â 7 for each subscription created in your Microsoft Azure cloud account.            ,01                Run sql server list command (Windows/macOS/Linux) using custom query filters to list the identifier for each SQL server provisioned within the current Azure subscription:az sql server list --query '[*].id'02                The command output should return the requested SQL server identifiers:["/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Sql/servers/cc-ms-production-server""/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Sql/servers/cc-ms-private-server"]03                Run sql failover-group list command (Windows/macOS/Linux) using the ID of the Azure SQL server that you want to examine as identifier parameter to list the auto-failover group(s) created for the selected SQL server:az sql failover-group list  --ids "/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Sql/servers/cc-ms-production-server"04                The command output should return the configuration metadata for the requested failover group(s):[]            If the sql failover-group list command output returns an empty array as shown in the example above the selected Microsoft Azure SQL database server is not included within an auto-failover group therefore the Azure resource does not have database replication and automatic failover enabled.            05                Repeat step no. 3 and 4 for each Azure SQL server provisioned in the selected subscription.            06                Repeat steps no. 1 â 5 for each subscription available within your Microsoft Azure cloud account.            ,01                Sign in to Azure Management Console.            02                Navigate to All resources blade at https://portal.azure.com/#blade/HubsExtension/BrowseAll to access all your Microsoft Azure resources.            03                From the Type filter box select SQL server to list only the SQL database servers available in your Azure account.            04                Click on the name of the SQL database server that you want to reconfigure (see Audit section part I to identify the right resource).            05                On the navigation panel under Settings select Failover groups then click Add group to initiate the auto-failover group setup process.            06                On the Failover group panel perform the following:                                        In the Failover group name box provide a unique name for the new failover group.                                            Click on Secondary server then select Create a new server option. On the New server panel provide the configuration details for the secondary SQL server select the appropriate Azure region (must be different than the primary region) then click Select to add the secondary database server to the failover group.                                              From Read/Write failover policy dropdown list select Automatic for automatic failover activation.                                            From Read/Write grace period (hours) dropdown list select the grace period that you want to configure for the new failover group. The grace period represents the interval in hours before automatic failover is initiated if an outage occurs on the primary SQL server.                                            Click on Database within the group choose the SQL database that you want to add to your failover group then click Select to confirm your action. Adding this database to the failover group will automatically start the geo-replication process.                                            Click Create to create the new Azure SQL server auto-failover group.                    07                Repeat step no. 4 â 6 for each SQL server that you want to implement database replication and automatic failover available in the selected subscription.            08                Repeat steps no. 4 â 7 for each subscription created in your Microsoft Azure cloud account.            ,01                Run sql server show command (Windows/macOS/Linux) using the ID of the primary SQL database server as identifier parameter (see Audit section part II to identify the right resource) to describe the configuration details for the selected SQL server:az sql server show  --ids "/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Sql/servers/cc-ms-production-server"02                The command output should return the configuration metadata for the selected server:{  "fullyQualifiedDomainName": "cc-ms-production-server.database.windows.net"  "id": "/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Sql/servers/cc-ms-production-server"  "administratorLogin": "ccadminusername"  "administratorLoginPassword": null  "identity": null  "kind": "v12.0"  "location": "westeurope"  "name": "cc-ms-production-server"  "resourceGroup": "cloud-shell-storage-westeurope"  "state": "Ready"  "tags": {}  "type": "Microsoft.Sql/servers"  "version": "12.0"}03                Run sql server create command (Windows/macOS/Linux) using configuration information returned at the previous step to create a secondary SQL database server in the failover region in this case the North Europe region (the command does not produce an output):az sql server create  --name cc-ms-secondary-server  --resource-group cloud-shell-storage-westeurope  --location northeurope  --admin-user ccadminusername  --admin-password ccadminpassword  --no-wait04                Run sql failover-group create command (Windows/macOS/Linux) to create an auto-failover group between the primary SQL server and secondary server (i.e. partner server) created at the previous step:az sql failover-group create  --name cc-auto-failover-group  --server cc-ms-production-server  --partner-server cc-ms-secondary-server  --resource-group cloud-shell-storage-westeurope  --add-db cc-ms-production-database  --failover-policy Automatic  --grace-period 105                The command output should return the metadata for the newly created auto-failover group:{  "databases": [    "/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Sql/servers/cc-ms-production-server/databases/cc-ms-production-database"  ]  "id": "/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Sql/servers/cc-ms-production-server/failoverGroups/cc-auto-failover-group"  "location": "West Europe"  "name": "cc-auto-failover-group"  "partnerServers": [    {      "id": "/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Sql/servers/cc-ms-secondary-server"      "location": "North Europe"      "replicationRole": "Secondary"      "resourceGroup": "cloud-shell-storage-westeurope"    }  ]  "readOnlyEndpoint": {    "failoverPolicy": "Disabled"  }  "readWriteEndpoint": {    "failoverPolicy": "Automatic"    "failoverWithDataLossGracePeriodMinutes": 60  }  "replicationRole": "Primary"  "replicationState": "CATCH_UP"  "resourceGroup": "cloud-shell-storage-westeurope"  "tags": null  "type": "Microsoft.Sql/servers/failoverGroups"}06                Repeat steps no. 1 â 5 for each SQL server that you want to enable database replication and automatic failover available in the selected subscription.            07                Repeat steps no. 1 â 6 for each subscription created in your Microsoft Azure cloud account.            ,https://www.cloudconformity.com/knowledge-base/azure/Sql/enable-auto-failover-groups.html
Enable Automatic Tuning for SQL Database Servers,Sql,Medium (should be achieved),Sql-012,Enable automatic tuning for Microsoft Azure SQL servers in order to monitor database queries and improve database workload performance. Automatic Tuning is a built-in intelligence feature that automatically tunes your Azure SQL databases to optimize their performance. The feature options are:FORCE PLAN â this option identifies SQL queries that are using an execution plan that is slower than the previous optimal plan and queries that are using the last known optimal plan instead of the regressed plan.CREATE INDEX â this recommendation identifies database indexes that may improve performance of your workload creates indexes and automatically verifies if the performance of SQL queries has been improved.DROP INDEX â this option identifies redundant and duplicate indexes daily except for unique indexes and indexes that were not used for a long time such as more than 90 days. Note that this option is not compatible with applications using partition switching and index hints. Dropping unused indexes is not currently supported for Premium and Business Critical service tiers.,Automatic Tuning feature learns horizontally from all the SQL databases provisioned within the Azure cloud through AI and Machine Learning (ML) and it dynamically improves its tuning actions. The longer an Azure SQL database server runs with automatic tuning on the better it performs.,To determine if automatic tuning is enabled for your Azure SQL database servers perform the following actions:,01                Sign in to Azure Management Console.            02                Navigate to All resources blade at https://portal.azure.com/#blade/HubsExtension/BrowseAll to access all your Microsoft Azure resources.            03                From the Type filter box select SQL server to list only the SQL database servers available in your Azure account.            04                Click on the name of the SQL database server that you want to examine.            05                On the resource navigation panel select Overview to view the configuration details available for the selected database server.            06                On the Overview page select the Features tab and check the Automatic tuning configuration status. If the configuration status is set to NOT CONFIGURED the Automatic Tuning feature is not enabled for the selected Microsoft Azure SQL database server.            07                Repeat steps no. 4 â 6 for each SQL database server available within the current Azure subscription.            08                Repeat steps no. 3 â 7 for each subscription created in your Microsoft Azure cloud account.            ,01                Sign in to Azure Management Console.            02                Navigate to All resources blade at https://portal.azure.com/#blade/HubsExtension/BrowseAll to access all your Microsoft Azure resources.            03                From the Type filter box select SQL server to list only the SQL database servers available in your Azure account.            04                Click on the name of the SQL database server that you want to reconfigure (see Audit section part I to identify the right SQL server).            05                On the resource navigation panel under Intelligent Performance select Automatic tuning to access the configuration settings for the Automatic Tuning feature.            06                On the Automatic tuning configuration page select Revert to defaults to let the database server to inherit the automatic tuning configuration from Azure defaults. Under Desired State you can configure each automatic tuning option individually based on your workload needs. If you choose INHERIT for an option that option will inherit the state from Azure or the parent SQL server. Explicitly selecting ON or OFF will override the inherited value to the selected value. It is recommended to let the system set the ideal automatic tuning configuration by allowing all available options (i.e. FORCE PLAN CREATE INDEX and DROP INDEX) to inherit the state. Click Apply to save your configuration changes and enable Automatic Tuning for the selected Microsoft Azure SQL database server. This configuration will be applied to all the SQL databases that inherit automatic tuning configuration from this SQL database server (parent server). If required this configuration can be overridden and specified for each SQL database individually.            07                Repeat steps no. 4 â 6 for each SQL database server provisioned in the selected subscription.            08                Repeat steps no. 3 â 7 for each subscription created in your Microsoft Azure cloud account.            ,,,https://www.cloudconformity.com/knowledge-base/azure/Sql/enable-automatic-tuning.html
Enable Email Alerts for Administrators and Subscription Owners,Sql,Medium (should be achieved),NA,Ensure that "Also send email notification to admins and subscription owners" feature is enabled for your Microsoft Azure SQL servers within Advanced Threat Protection service configuration settings. Advanced Threat Protection security service is managed by Advanced Data Security (ADS) â a security suite that includes services such as Data Discovery and Classification Vulnerability Assessment and Advanced Threat Protection.,Once the feature is enabled your Azure account administrators and subscription owners should also receive email notifications upon detection of abnormal SQL database activity. These email alerts provide information on suspicious security events including the nature of the activity server name database name application name and the time when the event was triggered. In addition the email notification alert provides information on possible causes and recommended actions to investigate the security issues and threats found and mitigate them in a successful manner. Sending email alerts to Azure administrators and subscription owners ensures that any security issue is reported as soon as possible making it possible to mitigate any potential risk faster and easier.,To determine if "Also send email notification to admins and subscription owners" feature is enabled perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to All resources blade at https://portal.azure.com/#blade/HubsExtension/BrowseAll to access all your Microsoft Azure resources.			03				From the Type filter box select SQL server to list only the SQL database servers provisioned in your Azure account.			04				Click on the name of the SQL server that you want to examine.			05				In the navigation panel under Security select Advanced Data Security to access the ADS configuration settings for the selected database server.			06				On the Advanced Data Security configuration page under ADVANCED THREAT PROTECTION SETTINGS check the Also send email notification to admins and subscription owners checkbox. If the checkbox is not selected the "Also send email notification to admins and subscription owners" feature is not enabled therefore account administrators and subscription owners do not receive threat detection notification alerts for the selected SQL server.			07				Repeat steps no. 4 â 6 for each SQL database server available in the selected subscription.			08				Repeat steps no. 3 â 7 for each subscription created in your Microsoft Azure cloud account.			,01				Run Get-AzSqlServer PowerShell cmdlet using custom query filters to list the names of all SQL database servers available within the current Azure subscription:Get-AzSqlServer | Select-Object ServerNameResourceGroupName02				The command output should return the requested SQL database server information:ServerName          ResourceGroupName----------          -----------------cc-prod-sql-server  cloud-shell-storage-westeuropecc-test-db-server   cloud-shell-storage-westeuropecc-project5-server  cloud-shell-storage-westeurope03				Run Get-AzureRmSqlServerThreatDetectionPolicy PowerShell command using the name of the SQL server that you want to examine as identifier parameter and custom query filters to obtain the "Also send email notification to admins and subscription owners" feature status for the selected SQL database server:Get-AzureRmSqlServerThreatDetectionPolicy -ServerName "cc-prod-sql-server" -ResourceGroupName "cloud-shell-storage-westeurope" | Select-Object EmailAdmins04				The command output should return the requested feature configuration status (True for enabled False for disabled):EmailAdmins-----------False				If Get-AzureRmSqlServerThreatDetectionPolicy cmdlet output returns False for the EmailAdmins configuration attribute the "Also send email notification to admins and subscription owners" feature is not enabled therefore Azure account administrators and subscription owners do not receive threat detection email alerts for the selected SQL database server.			05				Repeat step no. 3 and 4 for each SQL database server provisioned in the selected subscription.			06				Repeat steps no. 1 â 5 for each subscription created within your Microsoft Azure cloud account.			,01				Sign in to Azure Management Console.			02				Navigate to All resources blade at https://portal.azure.com/#blade/HubsExtension/BrowseAll to access all your Microsoft Azure resources.			03				From the Type filter box select SQL server to list only the SQL database servers available in your Azure account.			04				Click on the name of the SQL database server that you want to reconfigure.			05				In the navigation panel under Security select Advanced Data Security to access the ADS configuration settings for the selected database server.			06				On the Advanced Data Security configuration page under ADVANCED THREAT PROTECTION SETTINGS select Also send email notification to admins and subscription owners checkbox to enable sending threat detection notification alerts for the selected SQL server to Azure cloud account administrators and subscription owners.			07				Click Save to apply the configuration changes.			08				Repeat steps no. 4 â 7 for each SQL database server available in the selected subscription.			09				Repeat steps no. 3 â 9 for each subscription created within your Microsoft Azure cloud account.			,01				Run Set-AzureRmSqlServerThreatDetectionPolicy PowerShell command using the name of the SQL server that you want to reconfigure and the name of the associated resource group as identifier parameters (see Audit section part I to identify the right Azure resources) to enable sending notification alerts to Azure account administrators and subscription owners by setting the -EmailAdmins parameter to $True (the command does not produce an output):Set-AzureRmSqlServerThreatDetectionPolicy -ServerName "cc-prod-sql-server" -ResourceGroupName "cloud-shell-storage-westeurope" -EmailAdmins $True02				Repeat step no. 1 for each SQL database server provisioned in the selected subscription.			03				Repeat step no. 1 and 2 for each subscription created within your Microsoft Azure cloud account.			,https://www.cloudconformity.com/knowledge-base/azure/Sql/enable-email-alerts-for-administrators-and-subscription-owners.html
Enable Email Alerts for SQL Threat Detection Service,Sql,High (not acceptable risk),NA,Ensure that the Advanced Threat Protection service is configured to have at least one email address where notification alerts will be sent when abnormal activities are detected on your Microsoft Azure SQL database servers. Advanced Threat Protection security service is managed by Advanced Data Security (ADS) â a unified security package that provides Data Discovery and Classification Vulnerability Assessment and Advanced Threat Protection for Azure SQL servers.,By default the "Send alerts to" setting is not enabled and configured. By providing at least one email address to receive notification alerts ensure that any detection of anomalous activity is reported as soon as possible to the right person or service making it more likely to mitigate any potential risk faster and more efficiently.,To determine if "Send alerts to" setting is enabled and configured perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to All resources blade at https://portal.azure.com/#blade/HubsExtension/BrowseAll to access all your Microsoft Azure resources.			03				From the Type filter box select SQL server to list only the SQL database servers provisioned in your Azure account.			04				Click on the name of the SQL server that you want to examine.			05				In the navigation panel under Security select Advanced Data Security to access the ADS configuration settings for the selected database server.			06				On the ADS configuration page under ADVANCED THREAT PROTECTION SETTINGS check the Send alerts to box. If the Send alerts to box is empty there is no email address configured to receive threat detection notification alerts for the selected Microsoft Azure SQL server.			07				Repeat steps no. 4 â 6 for each SQL database server provisioned in the selected subscription.			08				Repeat steps no. 3 â 7 for each subscription created in your Microsoft Azure cloud account.			,01				Run Get-AzSqlServer PowerShell command using custom query filters to list the names of all SQL database servers and the names of their associated resource groups available in the current Azure subscription:Get-AzSqlServer | Select-Object ServerNameResourceGroupName02				The command output should return the requested SQL database server information:ServerName          ResourceGroupName----------          -----------------cc-ms-sql-server    cloud-shell-storage-westeuropecc-prod-db-server   cloud-shell-storage-westeurope03				Run Get-AzureRmSqlServerThreatDetectionPolicy PowerShell command using the name of the SQL server that you want to examine as identifier parameter and custom query filters to get the "Send alerts to" configuration setting status for the selected SQL database server:Get-AzureRmSqlServerThreatDetectionPolicy -ServerName "cc-ms-sql-server" -ResourceGroupName "cloud-shell-storage-westeurope" | Select-Object NotificationRecipientsEmails04				The command output should return the requested setting configuration status:NotificationRecipientsEmails---------------------------- 				If Get-AzureRmSqlServerThreatDetectionPolicy cmdlet output is not returning a value (i.e. one or more recipient email addresses) for the NotificationRecipientsEmails configuration attribute as shown in the example above there is no email address configured to receive threat detection notification alerts for the selected Microsoft Azure SQL database server.			05				Repeat step no. 3 and 4 for each SQL database server available in the selected subscription.			06				Repeat steps no. 1 â 5 for each subscription created within your Microsoft Azure cloud account.			,01				Sign in to Azure Management Console.			02				Navigate to All resources blade at https://portal.azure.com/#blade/HubsExtension/BrowseAll to access all your Microsoft Azure resources.			03				From the Type filter box select SQL server to list only the SQL database servers available in your Azure account.			04				Click on the name of the SQL database server that you want to reconfigure.			05				In the navigation panel under Security select Advanced Data Security to access the ADS configuration settings for the selected database server.			06				On the Advanced Data Security configuration page under ADVANCED THREAT PROTECTION SETTINGS provide one or more email addresses (semicolon-separated) to which notification alerts will be sent upon detection of anomalous activity on the selected Microsoft Azure SQL server.			07				Click Save to apply the configuration changes.			08				Repeat steps no. 4 â 7 for each SQL database server available in the selected subscription.			09				Repeat steps no. 3 â 9 for each subscription created in your Microsoft Azure cloud account.			,01				Run Set-AzureRmSqlServerThreatDetectionPolicy PowerShell cmdlet using the name of the SQL server that you want to reconfigure and the name of the associated resource group as identifier parameters (see Audit section part I to identify the right resource) to enable sending notification alerts to the appropriate email recipient(s) defined for the -NotificationRecipientsEmails parameter when security threats are detected for the selected Azure SQL database server (the command does not return an output):Set-AzureRmSqlServerThreatDetectionPolicy -ServerName "cc-ms-sql-server" -ResourceGroupName "cloud-shell-storage-westeurope" -NotificationRecipientsEmails "notifyme@cloudconformity.com"02				Repeat step no. 1 for each SQL database server provisioned in the selected subscription.			03				Repeat step no. 1 and 2 for each subscription created within your Microsoft Azure cloud account.			,https://www.cloudconformity.com/knowledge-base/azure/Sql/enable-email-alerts-for-sql-threat-detection.html
Enable Transparent Data Encryption for SQL Databases,Sql,Medium (should be achieved),NA,Ensure that Transparent Data Encryption (also known as encryption at rest) is enabled for all SQL databases available within your Microsoft Azure cloud account for protecting your data at rest.,Transparent data encryption (TDE) helps protect Azure SQL databases against the threat of malicious activity by encrypting data at rest. It performs real-time encryption and decryption of the database its associated backups and transaction log files stored at rest without requiring changes to your database application. The feature encrypts the storage of an entire SQL database by using a symmetric key named the database encryption key. This database encryption key is protected by the TDE protector. The protector is either a service-managed certificate or a customer-managed key (i.e. Bring Your Own Key - BYOK) stored within Azure Key Vault service.,To determine if encryption at rest is enabled for all your Azure SQL databases perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to All resources blade at https://portal.azure.com/#blade/HubsExtension/BrowseAll to access all your Microsoft Azure resources.			03				From the Type filter box select SQL database to list only the SQL databases available in your Azure account.			04				Click on the name of the SQL server that you want to examine.			05				In the navigation panel under Security select Transparent data encryption to access the encryption settings for the selected SQL database.			06				On the Transparent data encryption configuration page check the Encryption status attribute value. If the value is set to Unencrypted the encryption at rest is not enabled for the selected Microsoft Azure SQL database.			07				Repeat steps no. 4 â 6 for each SQL database available within the current Azure subscription.			08				Repeat steps no. 3 â 7 for each subscription created in your Microsoft Azure cloud account.			,01				Run sql server list command (Windows/macOS/Linux) using custom query filters to list the identifier for each SQL server provisioned within the current Azure subscription:az sql server list	--query '[*].id'02				The command output should return the requested SQL server identifiers:["/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Sql/servers/cc-webapp-sql-server""/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Sql/servers/cc-ms-sql-server"]03				Run sql db list command (Windows/macOS/Linux) using the name of the Azure SQL server that you want to examine as identifier parameter and custom query filters to list the IDs of the SQL databases created on the selected server:az sql db list	--ids /subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Sql/servers/cc-webapp-sql-server	--query '[*].id'04				The command output should return the IDs of the SQL databases provisioned on the selected server. The identifier that ends with "master" should be ignored as it represents the logical master database available on the verified SQL server. Transparent Data Encryption (TDE) cannot be used to encrypt this logical master database because this database contains objects that are needed to perform the TDE operations on the user databases:["/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Sql/servers/cc-webapp-sql-server/databases/cc-web-sql-database""/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Sql/servers/cc-webapp-sql-server/databases/cc-project5-database""/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Sql/servers/cc-webapp-sql-server/databases/master"]05				Run sql db tde show command (Windows/macOS/Linux) using the name of the Azure SQL database that you want to examine as identifier parameter to get the Transparent Data Encryption (TDE) status for the selected database:az sql db tde show	--ids /subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Sql/servers/cc-webapp-sql-server/databases/cc-web-sql-database	--query 'status'06				The command output should return the TDE configuration status:"Disabled"				If the sql db tde show command output returns "Disabled" as shown in the example above the encryption at rest also known as Transparent Data Encryption is not enabled for the selected Microsoft Azure SQL database.			07				Repeat step no. 5 and 6 for each SQL database created on the selected Azure SQL server.			08				Repeat steps no. 3 â 7 for each Azure SQL server provisioned in the selected subscription.			09				Repeat steps no. 1 â 8 for each subscription available within your Microsoft Azure cloud account.			,01				Sign in to Azure Management Console.			02				Navigate to All resources blade at https://portal.azure.com/#blade/HubsExtension/BrowseAll to access all your Microsoft Azure resources.			03				From the Type filter box select SQL database to list only the SQL databases available in your Azure account.			04				Click on the name of the SQL database that you want to reconfigure (see Audit section part I to identify the right SQL database).			05				In the navigation panel under Security select Transparent data encryption to access the encryption settings for the selected SQL database.			06				On the Transparent data encryption configuration page select ON for the Data encryption setting to enable encryption at rest for the selected Microsoft Azure SQL database.			07				Click Save to apply the configuration changes.			08				Repeat steps no. 4 â 7 for each SQL database available within the selected subscription.			09				Repeat steps no. 3 â 8 for each subscription created in your Microsoft Azure cloud account.			,01				Run sql db tde set command (Windows/macOS/Linux) using the ID of the Azure SQL database that you want to reconfigure as identifier parameter (see Audit section part II to identify the right SQL resource) to enable encryption at rest for the selected SQL database by setting the --status parameter to Enabled:az sql db tde set	--ids /subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Sql/servers/cc-webapp-sql-server/databases/cc-web-sql-database	--status Enabled02				The command output should return the metadata for the reconfigured Azure SQL database:{  "id": "/subscriptions/abcdabcd-1234-abcd-1234-abcdabcdabcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Sql/servers/cc-webapp-sql-server/databases/cc-web-sql-database/transparentDataEncryption/current"  "location": null  "name": "current"  "resourceGroup": "cloud-shell-storage-westeurope"  "status": "Enabled"  "type": "Microsoft.Sql/servers/databases/transparentDataEncryption"}03				Repeat step no. 1 and 2 for each SQL database server available in the selected subscription.			04				Repeat steps no. 1 â 3 for each subscription created within your Microsoft Azure cloud account.			,https://www.cloudconformity.com/knowledge-base/azure/Sql/data-encryption.html
SQL Auditing Retention,Sql,Medium (should be achieved),NA,Ensure that the database auditing policy attached to your Microsoft Azure SQL servers has a sufficient log data retention period i.e. 90 days or more configured for reliability and compliance purposes. The retention period represents the number of days to retain audit log data for the databases hosted on Azure SQL servers.,A log data retention period of 90 days or more should allow you to collect the necessary amount of audit data useful to check for anomalies and potential security breaches or misuse of information and access to your SQL database.,To determine if your SQL database auditing policy have a sufficient log data retention period perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to All resources blade at https://portal.azure.com/#blade/HubsExtension/BrowseAll to access all your Microsoft Azure resources.			03				From the Type filter box select SQL server to list only the SQL database servers available in your Azure account.			04				Click on the name of the SQL server that you want to examine.			05				In the navigation panel under Security select Auditing to access the auditing policy configuration settings for the selected database server.			06				On the auditing policy configuration page in the Audit log destination section click on the <Storage/Log Analytics/Event Hub> details depending on the type of the destination used.			07				On the selected log destination configuration panel check the value set for the Retention (Days) setting. If this value is less than 90 and different from 0 (unlimited retention) the auditing policy for the selected Azure SQL database server does not have a sufficient log data retention period configured.			08				Repeat steps no. 4 â 7 for each SQL database server provisioned in the selected subscription.			09				Repeat steps no. 3 â 8 for each subscription created in your Microsoft Azure cloud account.			,01				Run Get-AzSqlServer PowerShell command (cmdlet) using custom query filters to list the names of all SQL database servers (and the name of their associated resource groups) available within the current Azure subscription:Get-AzSqlServer | Select-Object ServerNameResourceGroupName02				The command output should return the requested SQL database server information:ServerName           ResourceGroupName----------           -----------------cc-sql-app-server    cloud-shell-storage-westus2cc-database-server   cloud-shell-storage-westus203				Run Get-AzSqlServerAuditing PowerShell command using the name of the SQL server that you want to examine as identifier parameter and custom query filters to get the retention period configured for the auditing policy attached to the selected database server:Get-AzSqlServerAuditing -ServerName "cc-sql-app-server" -ResourceGroupName "cloud-shell-storage-westus2" | Select-Object RetentionInDays04				The command output should return the requested configuration information (i.e. the number of days to retain audit log data):RetentionInDays---------------30				If the number (days) returned by the Get-AzSqlServerAuditing command output for the RetentionInDays configuration attribute is less than 90 and different from 0 (unlimited retention) as shown in the example above the auditing policy for the selected Microsoft Azure SQL database server does not have a sufficient log data retention period currently configured.			05				Repeat step no. 3 and 4 for each SQL database server available within the selected subscription.			06				Repeat steps no. 1 â 5 for each subscription created in your Microsoft Azure cloud account.			,01				Sign in to Azure Management Console.			02				Navigate to All resources blade at https://portal.azure.com/#blade/HubsExtension/BrowseAll to access all your Microsoft Azure resources.			03				From the Type filter box select SQL server to list only the SQL database servers provisioned in your Azure account.			04				Click on the name of the SQL server that you want to reconfigure.			05				In the navigation panel under Security select Auditing to access the auditing policy configuration settings for the selected SQL server.			06				On the auditing policy configuration page in the Audit log destination section click on the <Storage/Log Analytics/Event Hub> details depending on the type of the destination used.			07				On the selected log destination configuration panel set the number of days to retain audit log data for the selected SQL server in the Retention (Days) box to 90 days or more or use the slider control to set the right value. Click OK to apply the changes.			08				Repeat steps no. 4 â 7 for each SQL database server provisioned in the selected subscription.			09				Repeat steps no. 3 â 8 for each subscription available in your Microsoft Azure cloud account.			,01				Run Set-AzSqlServerAuditing PowerShell cmdlet using the name of the SQL server that you want to reconfigure as identifier parameter (see Audit section part I to identify the right Azure resource) to extend the retention period for audit log data recorded for the selected Microsoft Azure SQL database server by using the RetentionInDays parameter. For example the following PowerShell command request sets a retention period of 120 days for database audit logs recorded for an SQL server named "cc-sql-app-server" available in the "cloud-shell-storage-westus2" resource group (the command does not produce an output):Set-AzSqlServerAuditing -State Enabled -ServerName "cc-sql-app-server" -ResourceGroupName "cloud-shell-storage-westus2" -StorageAccountName "abcd1234abcd1234abcd1234" -RetentionInDays 12002				Repeat step no. 1 for each SQL database server available in the selected subscription.			03				Repeat step no. 1 and 2 for each subscription created in your Microsoft Azure cloud account.			,https://www.cloudconformity.com/knowledge-base/azure/Sql/auditing-retention.html
Use Azure Active Directory Admin for SQL Authentication,Sql,Medium (should be achieved),NA,Ensure that Azure Active Directory authentication is configured to allow you to centrally manage identity and access to your Microsoft Azure SQL database servers by using an Active Directory administrator.,Azure Active Directory (AAD) authentication represents an instrument that is used to connect to Microsoft Azure SQL databases and SQL data warehouses using identities available within Active Directory. With Azure AAD authentication identities of database users and other Microsoft services can be managed in one central location. Central ID management provides a single place to manage SQL database users and simplifies permission management. The AAD authentication feature benefits include:Providing a secure alternative to SQL database server authentication;Help to reduce the proliferation of user identities across Azure SQL database servers;Handling password rotation in a single place;Eliminating the need for storing passwords by enabling integrated Windows authentication and other forms of authentication supported by Azure Active Directory (AAD);Allowing customers to manage database permissions using external AAD groups;Allowing token-based authentication for applications connecting to Azure SQL databases;Providing support for ADFS (domain federation) or native user/password authentication for a local Azure Active Directory without domain synchronization;Allowing connections from SQL Server Management Studio that use Active Directory Universal Authentication which includes Multi-Factor Authentication (MFA);Allowing similar connections from SQL Server Data Tools (SSDT) that use Active Directory Interactive Authentication.,To determine if an Active Directory administrator is configured for SQL authentication within your Azure SQL database server settings perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to All resources blade at https://portal.azure.com/#blade/HubsExtension/BrowseAll to access all your Microsoft Azure resources.			03				From the Type filter box select SQL server to list only the SQL database servers provisioned in your Azure account.			04				Click on the name of the SQL server that you want to examine.			05				In the navigation panel under Settings select Active Directory admin to access the Azure Active Directory (AAD) SQL authentication settings for the selected database server.			06				On the Active Directory admin configuration page check the Active Directory admin feature status. If the status is currently set to No Active Directory admin there is no Active Directory administrator configured to handle SQL authentication for the selected database server.			07				Repeat steps no. 4 â 6 for each SQL database server available in the selected subscription.			08				Repeat steps no. 3 â 7 for each subscription created in your Microsoft Azure cloud account.			,01				Run Get-AzSqlServer PowerShell cmdlet using custom query filters to list the names of all SQL database servers available within the current Azure subscription:Get-AzSqlServer | Select-Object ServerNameResourceGroupName02				The command output should return the requested SQL database server information:ServerName          ResourceGroupName----------          -----------------cc-prod-sql-server  cloud-shell-storage-westeuropecc-app-db-server    cloud-shell-storage-westeurope03				Run Get-AzureRmSqlServerActiveDirectoryAdministrator PowerShell command using the name of the SQL server that you want to examine as identifier parameter and custom query filters to describe the name of Azure Active Directory administrator configured to handle SQL authentication for the selected SQL server:Get-AzSqlServerActiveDirectoryAdministrator -ServerName "cc-prod-sql-server" -ResourceGroupName "cloud-shell-storage-westeurope" | Select-Object DisplayName				If Get-AzureRmSqlServerActiveDirectoryAdministrator cmdlet request is not returning an output there is no Azure Active Directory administrator configured for SQL authentication to the selected SQL database server.			04				Repeat step no. 3 for each SQL database server provisioned in the current subscription.			05				Repeat steps no. 1 â 5 for each subscription available within your Microsoft Azure cloud account.			,01				Sign in to Azure Management Console.			02				Navigate to All resources blade at https://portal.azure.com/#blade/HubsExtension/BrowseAll to access all your Microsoft Azure resources.			03				From the Type filter box select SQL server to list only the SQL database servers available in your Azure account.			04				Click on the name of the SQL database server that you want to reconfigure.			05				In the navigation panel under Settings select Active Directory admin to access the Active Directory SQL authentication settings for the selected database server.			06				On the Active Directory admin configuration page click Set admin to initiate the setup process.			07				On the Add admin panel choose the Azure Active Directory (AAD) administrator (or search it by the name/email address) that you want to configure for SQL authentication and access to your Azure SQL database server then click Select to select the chosen AD admin user and return to the configuration page.			08				Click Save to apply the configuration changes.			09				Repeat steps no. 4 â 8 for each SQL database server available within the selected subscription.			10				Repeat steps no. 3 â 9 for each subscription created within your Microsoft Azure cloud account.			,01				Run Set-AzureRmSqlServerThreatDetectionPolicy PowerShell command using the name of the SQL server that you want to reconfigure and the name of the associated resource group as identifier parameters (see Audit section part I to identify the right Azure resources) to provision an Azure Active Directory admin for SQL authentication and access to the selected SQL database server in the current Azure subscription. You can set up only one admin user at a time and this must be one of the following: native members of AAD federated members of AAD and imported members from other directories who are native or federated members. The Azure Active Directory (AAD) groups created as security groups Microsoft accounts such as those created for outlook.com hotmail.com or live.com domains are not supported as administrators. Other guest accounts such as those created for gmail.com domains are not supported as administrators as well. For example the following PowerShell command request configures an AAD admin user named "Cloud Conformity Admin" (native member) for SQL authentication and access to an SQL database server identified by the name "cc-prod-sql-server":Set-AzSqlServerActiveDirectoryAdministrator -ServerName "cc-prod-sql-server" -ResourceGroupName "cloud-shell-storage-westeurope" -DisplayName "Cloud Conformity Admin"02				The command output should return the PowerShell command request metadata:ResourceGroupName      ServerName         DisplayName           ObjectId-----------------      ----------         -----------           --------cloud-shell-storage-westeurope cc-prod-sql-server Cloud Conformity Admin abcdabcd-abcd-abcd-abcd-abcdabcdabcd 03				Repeat step no. 1 and 2 for each SQL database server provisioned in the selected subscription.			04				Repeat steps no. 1 â 3 for each subscription created in your Microsoft Azure cloud account.			,https://www.cloudconformity.com/knowledge-base/azure/Sql/active-directory-admin.html
Use BYOK for Transparent Data Encryption,Sql,Medium (should be achieved),NA,Ensure that your Microsoft Azure SQL server's Transparent Data Encryption protector (i.e. TDE master key) is encrypted with BYOK (Bring Your Own Key) in order to protect your SQL databases with a key from your own Azure key vault.,Bring Your Own Key support for Transparent Data Encryption (TDE) allows user control of TDE encryption keys and restricts who can access these keys and when. Azure Key Vault â a cloud-based external key management system developed by Microsoft Azure is the first key management service where the SQL Transparent Data Encryption has integrated support for Bring Your Own Key (BYOK). With BYOK the database encryption key is protected by an asymmetric key stored in the Key Vault. The asymmetric key is set at the SQL server level and inherited by all databases created on that server.,To determine if BYOK is used for your Azure SQL server's Transparent Data Encryption (TDE) perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to All resources blade at https://portal.azure.com/#blade/HubsExtension/BrowseAll to access all your Microsoft Azure resources.			03				From the Type filter box select SQL server to list only the SQL servers available in your Azure account.			04				Click on the name of the SQL database server that you want to examine.			05				In the navigation panel under Security select Transparent data encryption to access the encryption settings for the selected Azure SQL server.			06				On the Transparent data encryption configuration page check the Use your own key configuration setting status. If the current status is set to No the Transparent Data Encryption (TDE) feature is using a service-managed key instead of a customer-managed key (also known as Bring Your Own Key - BYOK) for the selected Microsoft Azure SQL server.			07				Repeat steps no. 4 â 6 for each SQL database server provisioned in the current Azure subscription.			08				Repeat steps no. 3 â 7 for each subscription created in your Microsoft Azure cloud account.			,01				Run sql server list command (Windows/macOS/Linux) using custom query filters to list the identifier for each SQL server available in the current Azure subscription:az sql server list 	--query '[*].id'02				The command output should return the requested SQL server identifiers:["/subscriptions/abcdabcd-abcd-abcd-abcd-abcdabcdabcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Sql/servers/cc-project5-sql-server""/subscriptions/abcdabcd-abcd-abcd-abcd-abcdabcdabcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Sql/servers/cc-ms-azure-sql-server"]03				Run sql server tde-key show command (Windows/macOS/Linux) using the name of the Azure SQL server that you want to examine as identifier parameter and custom query filters to expose the type of the encryption key used by Transparent Data Encryption for the selected SQL server:az sql server tde-key show	--ids /subscriptions/abcdabcd-abcd-abcd-abcd-abcdabcdabcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Sql/servers/cc-project5-sql-server	--query 'serverKeyType'04				The command output should return the type of the encryption protector (key) used for the selected server:"ServiceManaged"				If the sql server tde-key show command output returns "ServiceManaged" as shown in the example above the Transparent Data Encryption (TDE) feature is using a service-managed key instead of a customer-managed key (i.e. BYOK) for the selected Microsoft Azure SQL database server.			05				Repeat step no. 3 and 4 for each SQL database server provisioned in the selected Azure subscription.			06				Repeat steps no. 1 â 5 for each subscription available within your Microsoft Azure cloud account.			,01				Sign in to Azure Management Console.			02				Navigate to All resources blade at https://portal.azure.com/#blade/HubsExtension/BrowseAll to access all your Microsoft Azure resources.			03				From the Type filter box select SQL server to list only the SQL servers available in your Azure account.			04				Click on the name of the SQL server that you want to reconfigure (see Audit section part I to identify the right SQL resource).			05				In the navigation panel under Security select Transparent data encryption to access the encryption settings for the selected Azure SQL server.			06				On the Transparent data encryption configuration page perform the following actions:										Select Yes under Use your own key to initiate the customer-managed key configuration process. 											Click on the Key vault link and select the encryption key vault that holds the key.											Click on the Key link and select an existing customer-managed key that you want to use as TDE protector for the select server. If you need to create a new encryption key click on the Create a new key button and use the default configuration settings provide by Microsoft Azure to create a new customer-managed key.											Select Make the selected key the default TDE protector checkbox to set the selected customer-managed key as default key for the Transparent Data Encryption (TDE) protector.											Click Save to apply the TDE configuration changes.					07				Repeat steps no. 4 â 6 for each SQL database server available in the selected subscription.			08				Repeat steps no. 3 â 7 for each subscription created in your Microsoft Azure cloud account.			,01				Run sql server tde-key set command (Windows/macOS/Linux) using the ID of the Azure SQL database server that you want to reconfigure as identifier parameter (see Audit section part II to identify the right SQL resource) to configure Transparent Data Encryption (TDE) feature to use a customer-managed key (i.e. Bring Your Own Key - BYOK) for the selected SQL database server. For example the following command request configures an existing customer-managed key identified by the URI "https://cc-customer-vault.vault.azure.net/keys/cc-managed-key/01234123412341234123412341234123":az sql server tde-key set	--ids /subscriptions/abcdabcd-abcd-abcd-abcd-abcdabcdabcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Sql/servers/cc-webapp-sql-server	--server-key-type AzureKeyVault	--kid https://cc-customer-vault.vault.azure.net/keys/cc-managed-key/0123412341234123412341234123412302				The command output should return the TDEâs configuration metadata for the selected server:{  "id": "/subscriptions/abcdabcd-abcd-abcd-abcd-abcdabcdabcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.Sql/servers/cc-webapp-sql-server/encryptionProtector/current"  "kind": "azurekeyvault"  "name": "current"  "resourceGroup": "cloud-shell-storage-westeurope"   ...    "serverKeyName": "cc-customer-vault_cc-managed-key_01234123412341234123412341234123"  "serverKeyType": "AzureKeyVault"  "type": "Microsoft.Sql/servers/encryptionProtector"  "uri": "https://cc-customer-vault.vault.azure.net/keys/cc-managed-key/01234123412341234123412341234123"}03				Repeat step no. 1 and 2 for each SQL database server available in the selected subscription.			04				Repeat steps no. 1 â 3 for each subscription created within your Microsoft Azure cloud account.			,https://www.cloudconformity.com/knowledge-base/azure/Sql/use-byok-for-transparent-data-encryption.html
Allow Shared Access Signature Tokens Over HTTPS Only,Storage Accounts,Medium (should be achieved),StorageAccounts-005,Ensure that your Microsoft Azure Storage SAS tokens are configured to allow access requests over the HTTPS protocol only. A Shared Access Signature (SAS) is a URI that grants restricted access rights to your Azure Storage resources. A SAS token is the query string that includes all of the information required to authenticate the Shared Access Signature as well as to specify the Azure Storage service and resource the permissions required for access and the time-frame for which the signature is valid.,To adhere to cloud security best practices always use the HTTPS protocol when creating or providing a Shared Access Signature (SAS) to your clients. If a SAS is passed over HTTP and intercepted an attacker performing a man-in-the-middle attack should be able to read the SAS token and use it to compromise sensitive data or allow for data corruption.,To determine if your storage account SAS tokens are allowed over HTTPS protocol only perform the following actions:,01				Locate the Shared Access Signature (SAS) token defined within the SAS URL provided to your storage account clients. The SAS token starts with a question mark followed by a set of various parameters e.g. ?sv=2018-03-28&ss=bfqt&srt=sco&sp=rwdlacup&se=2019-06-11T10:25:43Z&st=2019-06-11T11:25:43Z &spr=httpshttp&sig=abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd. Identify the communication protocol used for the verified token defined as value for the spr parameter for example spr=httpshttp. If the spr parameter is not set to HTTPS only (i.e. spr=https) the selected Shared Access Signature (SAS) token's configuration is not compliant.			02				Repeat step no. 1 for each Shared Access Signature (SAS) URL created for the current storage account.			03				Repeat step no. 1 and 2 for each storage account available within the selected subscription.			04				Repeat steps no. 1 â 3 for each subscription created in your Microsoft Azure cloud account.			,01				Sign in to Azure Management Console.			02				Navigate to Azure Storage accounts blade at https://portal.azure.com/#blade/HubsExtension/BrowseResourceBlade/resourceType/Microsoft.Storage%2FStorageAccounts.			03				Click on the name of the storage account that holds the SAS token that you want to regenerate.			04				In the navigation panel under Settings choose Shared access signature to access the SAS generator.			05				On the Shared access signature generator page perform the following actions to create your new SAS token:										From Allowed services select the Azure Storage services accessible with the Shared Access Signature.											From the Allowed resource types section select the storage resource types accessible with the SAS.											From Allowed permissions choose the permissions required for the account SAS. Permissions are valid only if they match the specified allowed resource type otherwise these permissions are ignored.											Use the Start and End date and time picker controls from the Start and expiry date/time section to configure the start and the end date/time during which the account SAS is valid. Cloud Conformity strongly recommends a SAS validity period no longer that an hour.											In the Allowed IP addresses box enter the client IP address or range of IP addresses from which to accept access requests.											From Allowed protocols select HTTPS only to allow access requests over HTTPS protocol only.											From Signing key select the access key used to authenticate the requests. If the selected access key is regenerated over the SAS lifetime the SAS token will also need to be regenerated. This action will not interrupt access to disks from your Azure virtual machines.											Click Generate SAS and connection string to create your new Azure Shared Access Signature (SAS).					06				Replace the Shared Access Signature (SAS) token defined within the SAS URL(s) provided to your storage account clients with the compliant token generated at the previous step (e.g. ?sv=2018-03-28&ss=bfqt&srt=sco&sp=rwdlacup&se=2019-06-11T12:33:40Z&st=2019-06-11T13:33:40Z&spr=https&sig=aaaabbbbccccddddaaaabbbbccccddddaaaabbbbccccdddd) available in the SAS token box.			07				If required repeat step no. 5 and 6 to generate new Shared Access Signature (SAS) tokens.			08				Repeat steps no. 3 â 7 for each storage account available in the current Azure subscription.			09				Repeat steps no. 3 â 8 for each subscription created in your Microsoft Azure cloud account.			,01				Define the Shared Access Signature (SAS) validity period (the recommended value for this parameter is 1 hour):end=`date -d "60 minutes" '+%Y-%m-%dT%H:%MZ'`02				Run storage account generate-sas command (Windows/macOS/Linux) using the name of the storage account that utilize the non-compliant SAS token as identifier parameter to generate a new Shared Access Signature (SAS) for Blob File Queue and Table Azure Storage services with a validity period of one hour that allows access requests over HTTPS protocol only:az storage account generate-sas	--permissions cdlruwap	--account-name aaaabbbbccccddddaaaabbbb	--services bfqt	--resource-types sco	--https-only	--expiry $end -otsv03				The command output should return the parameters for the new Shared Access Signature:se=2019-06-11T17%3A23Z&sp=rwdlacup&sv=2018-03-28&ss=qt&srt=sco&sig=abcabc/abcd1234abcd1234abcd1234abcd1234abcd123404				If required repeat steps no. 1 â 3 to generate new Shared Access Signature (SAS) tokens.			05				Repeat steps no. 1 â 4 for each storage account available in the current Azure subscription.			06				Repeat steps no. 1 â 5 for each subscription created in your Microsoft Azure cloud account.			,,https://www.cloudconformity.com/knowledge-base/azure/StorageAccounts/shared-access-signature-tokens-are-allowed-only-over-https.html
Disable Anonymous Access to Blob Containers,Storage Accounts,Medium (should be achieved),NA,Ensure that the "Public access level" configuration setting is set to "Private (no anonymous access)" for all blob containers in your storage account in order to block anonymous access to these Microsoft Azure resources.,A user that accesses blob containers anonymously can use constructors that do not require credentials such as shared access signatures. Cloud Conformity strongly recommends disabling anonymous access to all blob containers provisioned within your storage account unless it is really required. Also to adhere to Azure cloud security best practices a shared access signature token should be used for providing controlled and timed access to your blob containers.,To determine if anonymous access to Azure Storage blob containers is disabled perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to Azure Storage accounts blade at https://portal.azure.com/#blade/HubsExtension/BrowseResourceBlade/resourceType/Microsoft.Storage%2FStorageAccounts. 			03				Click on the name (link) of the Azure Storage account that you want to examine.			04				In the navigation panel under Blob service click Blobs to access the blob containers provisioned in your storage account.			05				On the Blobs page choose the container that you want to examine and check the configuration value available in the PUBLIC ACCESS LEVEL column. If the configuration value is set to Container all container and blob data can be read by anonymous request therefore the anonymous access to the selected Azure Storage blob container is not disabled.			06				Repeat step no. 5 for each blob container provisioned in the selected storage account.			07				Repeat steps no. 3 â 6 for each storage account available within the selected subscription.			08				Repeat steps no. 3 â 7 for each subscription created in your Microsoft Azure cloud account.			,01				Run storage account list command (Windows/macOS/Linux) using custom query filters to describe the identifier for each storage account available in the current Azure subscription:az storage account list 	--query '[*].name'02				The command output should return the requested storage account names:[  "abcdabcdabcd123412341234"    "abcd1234abcd1234abcd1234"]03				Run storage container list command (Windows/macOS/Linux) using the name of the storage account that you want to examine as identifier parameter and custom query filters to list the containers available in the selected storage account:az storage container list	--account-name abcdabcdabcd123412341234	--query '[*].name'04				The command output should return the name of the blob containers within the specified storage account:[  "cc-project5-container"  "cc-staging-container"]05				Run storage container show command (Windows/macOS/Linux) using the name of the blob container that you want to examine as identifier parameter to expose the public access level set for the selected container:az storage container show	--name cc-blob-container	--account-name abcdabcdabcd123412341234	--query 'properties.publicAccess'06				The command output should return the name of the configured public access level. There are three levels of public access: Private (no anonymous access) Blob (anonymous read access for blobs only) and Container (anonymous read access for containers and blobs):"container"				If the storage container show command output returns "container" as shown in the example above the data available on the selected blob container can be read by anonymous request therefore the anonymous access to the selected Azure Storage blob container is not disabled.			07				Repeat step no. 5 and 6 for each container provisioned in the selected storage account.			08				Repeat steps no. 3 â 7 for each storage account available within the selected subscription.			09				Repeat steps no. 1 â 8 for each subscription created in your Microsoft Azure cloud account.			,01				Sign in to Azure Management Console.			02				Navigate to Azure Storage accounts blade at https://portal.azure.com/#blade/HubsExtension/BrowseResourceBlade/resourceType/Microsoft.Storage%2FStorageAccounts. 			03				Click on the name (link) of the Azure Storage account that you want to access.			04				In the navigation panel under Blob service click Blobs to access the blob containers provisioned in your storage account.			05				On the Blobs page select the container that you want to reconfigure (see Audit section part I to identify the right resource) then click Change access level button from the blade top menu.			06				On the Change access level configuration panel select Private (no anonymous access) option from the Public access level dropdown list to disable anonymous access for the selected blob container. Click Ok to confirm the change.			07				Repeat step no. 5 and 6 for all publicly accessible containers available in the selected storage account.			08				Repeat steps no. 3 â 7 for each storage account available within the selected subscription.			09				Repeat steps no. 3 â 8 for each subscription created in your Microsoft Azure cloud account.			,01				Run storage container set-permission command (Windows/macOS/Linux) using the name of the blob container that you want to reconfigure as identifier parameter (see Audit section part II to identify the right resource) to disable anonymous access to the selected blob container by setting the "Public access level" configuration option to "Private (no anonymous access)": az storage container set-permission	--name cc-project5-container	--account-name abcdabcdabcd123412341234	--public-access off02				Repeat step no. 1 for all publicly accessible containers available in the selected storage account.			03				Repeat step no. 1 and 2 for each storage account available in the current Azure subscription.			04				Repeat step no. 1 â 3 for each subscription created in your Microsoft Azure cloud account.				,https://www.cloudconformity.com/knowledge-base/azure/StorageAccounts/disable-anonymous-access-to-blob-containers.html
Enable Logging for Azure Storage Queue Service,Storage Accounts,High (should be achieved),StorageAccounts-003,Ensure that Microsoft Azure Storage Queue service logging is enabled for read write and delete requests. The Storage Queue cloud service stores messages that can be read by any user that has access to your storage account. A queue can contain an unlimited number of messages each of which can be up to 64KB in size. The Azure Storage Queue service logging records details for both successful and failed requests made to the queues as well as end-to-end latency server latency and authentication information.,Azure Storage Queue logs contain detailed information about successful and failed requests made to your storage queues for read write and delete operations. This information can be used to monitor individual requests and to diagnose issues with the Storage Queue service within your Microsoft Azure account.,To determine if your storage account access keys are periodically regenerated (by default every 90 days) perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to Azure Storage accounts blade at https://portal.azure.com/#blade/HubsExtension/BrowseResourceBlade/resourceType/Microsoft.Storage%2FStorageAccounts.			03				Click on the name of the Azure Storage account that you want to examine.			04				In the navigation panel under Monitoring (classic) choose Diagnostic settings (classic) to verify the Storage Analytics Logging configuration status.			05				On the Diagnostic settings (classic) page make sure that the Status is set to On then select the Queue properties tab. If Status setting is set to Off the diagnostics are disabled therefore the configuration is not compliant and Audit process ends here. If Status is set to On check the Logging configuration section (regardless of its version 1.0 or 2.0). If Read Write and Delete options are not selected the storage logging is not enabled for the Azure Storage Queue service in the selected storage account.			06				Repeat steps no. 3 â 5 for each storage account available within the selected subscription.			07				Repeat steps no. 3 â 6 for each subscription created in your Microsoft Azure cloud account.			,01				Run storage account list command (Windows/macOS/Linux) using custom query filters to describe the identifier for each storage account available in the current Azure subscription:az storage account list	--query '[*].name'02				The command output should return the requested storage account names:[  "abcd1234abcd1234abcd1234"  "abcdabcdabcd123412341234"]03				Run storage logging show command (Windows/macOS/Linux) using the name of the storage account that you want to examine as identifier parameter and custom query filters to describe the logging settings for the Azure Storage Queue service within the selected storage account:az storage logging show	--services q	--account-name abcd1234abcd1234abcd123404				The command output should return the requested configuration information:{  "queue": {    "delete": false    "read": false    "write": false    "retentionPolicy": {      "days": null      "enabled": false    }    "version": "1.0"  }}				Check the "delete" "read" and "write" attribute values returned by the command output. If "delete" "read" and "write" configuration attributes are all set to false as shown in the example above the detailed storage logging is not enabled for the Azure Storage Queue service within the selected storage account.			05				Repeat step no. 3 and 4 for each storage account available in the current subscription.			06				Repeat steps no. 1 â 5 for each subscription available in your Microsoft Azure cloud account.			,01				Sign in to Azure Management Console.			02				Navigate to Azure Storage accounts blade at https://portal.azure.com/#blade/HubsExtension/BrowseResourceBlade/resourceType/Microsoft.Storage%2FStorageAccounts.			03				Click on the name of the Azure Storage account that you want to reconfigure.			04				In the navigation panel under Monitoring (classic) choose Diagnostic settings (classic) to access the Storage Analytics Logging configuration details.			05				On the Diagnostic settings (classic) page make sure that the Status is set to On then select the Queue properties tab.			06				In the Logging configuration section perform the following:										Select Read Write and Delete options to enable detailed storage logging for the Azure Storage Queue service in the selected storage account.											In the days box set a retention period required to retain the storage logs based on your requirements.					07				Click Save to apply the configuration changes.			08				Repeat steps no. 3 â 7 for each storage account available in the current Azure subscription.			09				Repeat steps no. 3 â 8 for each subscription created in your Microsoft Azure cloud account.			,01				Run storage logging update command (Windows/macOS/Linux) using the name of the storage account that you want to reconfigure as identifier parameter (see Audit section part II to identify the right account name) to update the storage logging configuration settings in order to enable detailed logging for read write and delete requests for the Azure Storage Queue service in the selected storage account (the command does not produce an output):az storage logging update	--account-name abcd1234abcd1234abcd1234	--services q	--log rwd	--retention 9002				Repeat step no. 1 for each storage account available in the current Azure subscription.			03				Repeat step no. 1 and 2 for each subscription created in your Microsoft Azure cloud account.			,https://www.cloudconformity.com/knowledge-base/azure/StorageAccounts/storage-logging-for-queue-service.html
Enable Secure Transfer in Azure Storage,Storage Accounts,Medium (should be achieved),StorageAccounts-001,Ensure that all data transferred between clients and your Azure Storage account is encrypted using the HTTPS protocol. A Microsoft Azure Storage account contains data objects such as files blobs queues tables and disks. The storage account provides a unique namespace for your Azure Storage data that is accessible from anywhere in the world over HTTP/HTTPS. All data stored within your Azure Storage account is secure scalable durable and highly available.,The "Secure transfer required" feature enhances the security of your storage account by allowing requests only from secure connections. For example when the REST API is used to access one of your Azure storage accounts you must connect by using HTTPS otherwise Azure Storage service rejects requests that use the HTTP protocol. Also when you are using the Azure Storage Files service the requests made without encryption will fail including scenarios using SMB 2.1 SMB 3.0 without encryption and some variants of the Linux SMB client.,To determine if secure data transfer is enabled within Azure Storage accounts configuration perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to Azure Storage accounts blade at https://portal.azure.com/#blade/HubsExtension/BrowseResourceBlade/resourceType/Microsoft.Storage%2FStorageAccounts.			03				Click on the name (link) of the Azure Storage account that you want to examine.			04				In the navigation panel choose Configuration to access the selected storage account configuration settings.			05				On the Configuration page check the Secure transfer required setting status. If Secure transfer required is set to Disabled the data in transit between clients and the resources available in the selected Azure Storage account is not encrypted.			06				Repeat steps no. 3 â 5 for each storage account available within the selected subscription.			07				Repeat steps no. 3 â 6 for each subscription created in your Microsoft Azure cloud account.			,01				Run storage account list command (Windows/macOS/Linux) using custom query filters to describe the identifier for each storage account available in the current Azure subscription:az storage account list	--query '[*].name'02				The command output should return the requested identifiers (i.e. storage account names):[  "abcd1234abcd1234abcd1234"  "abcdabcdabcd123412341234"  "123412341234abcdabcdabcd"]03				Run storage account show command (Windows/macOS/Linux) using the name of the storage account that you want to examine as identifier parameter and custom query filters to retrieve the configuration status for the "Secure transfer required" security feature:az storage account show	--name abcd1234abcd1234abcd1234	--query 'enableHttpsTrafficOnly'04				The command output should return the requested feature status (true for enabled false for disabled):false				If the command output returns false as shown in the example above the data in transit between clients and the resources available in the selected Azure Storage account (i.e. files blobs queues tables and disks) is not encrypted.			05				Repeat step no. 3 and 4 for each storage account available within the current subscription.			06				Repeat steps no. 1 â 5 for each subscription created in your Microsoft Azure cloud account.			,01				Sign in to Azure Management Console.			02				Navigate to Azure Storage accounts blade at https://portal.azure.com/#blade/HubsExtension/BrowseResourceBlade/resourceType/Microsoft.Storage%2FStorageAccounts.			03				Click on the name (link) of the Azure Storage account that you want to examine.			04				In the navigation panel choose Configuration to access the selected storage account configuration settings.			05				On the Configuration page select Enabled next to Secure transfer required setting to enable encryption for data in transit between clients and the selected Azure Storage account.			06				Click Save to apply the configuration changes. If successful the following message should be displayed: "Successfully updated storage account". Once the changes are saved only HTTPS requests are allowed to the selected storage account.			07				Repeat steps no. 3 â 6 for each storage account created within the current Azure subscription.			08				Repeat steps no. 3 â 7 for each subscription available in your Microsoft Azure cloud account.			,01				Run storage account update command (Windows/macOS/Linux) using the name of the Azure Storage account that you want to reconfigure as identifier parameter (see Audit section part I to identify the right account name) to enable encryption of data-in-transit for the selected storage account by setting --https-only parameter to true (the command does not produce an output):az storage account update	--name abcd1234abcd1234abcd1234	--https-only true02				Repeat step no. 1 for each storage account created within the current Azure subscription.			03				Repeat step no. 1 and 2 for each subscription available in your Microsoft Azure cloud account.			,https://www.cloudconformity.com/knowledge-base/azure/StorageAccounts/secure-transfer-required.html
Enable Trusted Microsoft Services for Storage Account Access,Storage Accounts,Medium (should be achieved),NA,Ensure that "Allow trusted Microsoft services to access this storage account" exception is enabled within your Azure Storage account configuration settings to grant access to trusted cloud services.,Enabling firewall rules for your storage account will block access to incoming requests for data including from other Azure services. To allow these Azure services to work as intended and be able to access your storage account resources you have to add an exception so that the trusted Microsoft Azure services can bypass your network rules. If the "Allow trusted Microsoft services to access this storage account" exception is enabled the following services: Azure Backup Azure Event Grid Azure Site Recovery Azure DevTest Labs Azure Event Hubs Azure Networking Azure Monitor and Azure SQL Data Warehouse (when registered in the subscription) are granted access to your storage account. To enhance access security all these cloud services are using strong authentication methods to access storage account resources.,To determine if "Allow trusted Microsoft services to access this storage account" exception is enabled perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to Azure Storage accounts blade at https://portal.azure.com/#blade/HubsExtension/BrowseResourceBlade/resourceType/Microsoft.Storage%2FStorageAccounts.			03				Click on the name of the Azure Storage account that you want to examine.			04				In the navigation panel under Settings select Firewalls and virtual networks to access network security configuration page for the selected storage account.			05				On the Firewalls and virtual networks page under Exceptions check the Allow trusted Microsoft services to access this storage account exception configuration status. If the default network access configuration panel is not displayed see this conformity rule to access the panel with the network access exceptions. If Allow trusted Microsoft services to access this storage account exception is not selected the trusted Microsoft services are not allowed to access the selected Azure Storage account.			06				Repeat steps no. 3 â 5 for each storage account available within the selected subscription.			07				Repeat steps no. 3 â 6 for each subscription created in your Microsoft Azure cloud account.			,01				Run storage account list command (Windows/macOS/Linux) using custom query filters to describe the name for each storage account available in the current Azure subscription:az storage account list	--query '[*].name'02				The command output should return the requested storage account names:[  "abcdabcdabcd123412341234"  "123412341234abcdabcdabcd"]03				Run storage account show command (Windows/macOS/Linux) using the name of the storage account that you want to examine as identifier parameter and custom query filters to get the "Allow trusted Microsoft services to access this storage account" exception configuration status:az storage account show	--name abcdabcdabcd123412341234	--query 'networkRuleSet.bypass'04				The command output should return the default action configured for the default network access rule:"None"				If the command output returns "None" the "Allow trusted Microsoft services to access this storage account" exception is not enabled therefore the trusted Microsoft services are not allowed to access the selected Azure Storage account.			05				Repeat step no. 3 and 4 for each storage account available within the selected subscription.			06				Repeat steps no. 1 â 5 for each subscription created in your Microsoft Azure cloud account.			,01				Sign in to Azure Management Console.			02				Navigate to Azure Storage accounts blade at https://portal.azure.com/#blade/HubsExtension/BrowseResourceBlade/resourceType/Microsoft.Storage%2FStorageAccounts.			03				Click on the name of the Azure Storage account that you want to reconfigure.			04				In the navigation panel under Settings select Firewalls and virtual networks to access network security configuration page for the selected storage account.			05				On the Firewalls and virtual networks page under Exceptions select the Allow trusted Microsoft services to access this storage account exception checkbox to allow the trusted Microsoft services to access the selected Azure Storage account. If the default network access configuration panel is not displayed see this conformity rule to access the panel with the network access exceptions.			06				Click Save to apply the changes.			07				Repeat steps no. 3 â 6 for each storage account available in the selected subscription.			08				Repeat steps no. 3 â 7 for each subscription created in your Microsoft Azure cloud account.			,01				Run storage account update command (Windows/macOS/Linux) using the name of the storage account that you want to reconfigure as identifier parameter (see Audit section part II to identify the right account) to enable "Allow trusted Microsoft services to access this storage account" exception for the selected Azure Storage account:az storage account update	--name abcdabcdabcd123412341234	--bypass AzureServices02				The command output should return the reconfigured storage account metadata:{  "accessTier": "Hot"  "creationTime": "2019-04-23T11:39:20.351002+00:00"  "enableAzureFilesAadIntegration": null  "customDomain": null  "enableHttpsTrafficOnly": false   ...  "networkRuleSet": {    "bypass": "AzureServices"    "defaultAction": "Deny"    "ipRules": [      {        "action": "Allow"        "ipAddressOrRange": "16.17.18.0/24"      }    ]    "virtualNetworkRules": []  }  ...  "statusOfPrimary": "available"  "statusOfSecondary": null  "tags": {    "ms-resource-usage": "azure-cloud-shell"  }  "type": "Microsoft.Storage/storageAccounts"}03				Repeat step no. 1 and 2 for each storage account available in the selected subscription.			04				Repeat steps no. 1 â 3 for each subscription created in your Microsoft Azure cloud account.			,https://www.cloudconformity.com/knowledge-base/azure/StorageAccounts/enable-trusted-microsoft-services.html
Expire Shared Access Signature Tokens,Storage Accounts,Medium (should be achieved),StorageAccounts-004,Ensure that your Microsoft Azure Storage SAS tokens are configured to expire within an hour in order to protect Azure cloud data against unauthorized access. In this way even if your SAS tokens get compromised they are valid only for a short time. A Shared Access Signature (SAS) is a URI that grants restricted access rights to your Azure Storage resources. The SAS token is the query string that includes all of the information required to authenticate the Shared Access Signature as well as to specify the Azure Storage service and resource the permissions required for access and the time-frame for which the signature is valid.,An SAS token is useful for providing limited permissions to your Azure Storage account to clients that should not have the account access key. Providing a Shared Access Signature (SAS) token to these clients allows them to access your resources for a specified period of time. To protect your storage account resources against unapproved access the validity period configured for your SAS token should be set as low as possible ideally no longer than an hour.,To determine if your storage account SAS tokens are set to expire within an hour perform the following actions:,01				Find the Shared Access Signature (SAS) token defined within the SAS URL provided to your storage account clients. The SAS token starts with a question mark followed by a set of different parameters e.g. ?sv=2018-03-28&ss=bfqt&srt=sco&sp=rwdlacup&se=2019-06-05T19:59:21Z&st=2019-06-05T11:59:21Z&spr=https&sig=abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd. Identify the token expiration date defined as value (date and time format UTC time) for the se parameter for example se=2019-06-05T19:59:21Z. If the verified Shared Access Signature (SAS) token is not set to expire within an hour from its creation the selected SAS token's configuration is not compliant.			02				Repeat step no. 1 for each Shared Access Signature (SAS) URL created for the current storage account.			03				Repeat step no. 1 and 2 for each storage account available within the selected subscription.			04				Repeat steps no. 1 â 3 for each subscription created in your Microsoft Azure cloud account.			,01				Sign in to Azure Management Console.			02				Navigate to Azure Storage accounts blade at https://portal.azure.com/#blade/HubsExtension/BrowseResourceBlade/resourceType/Microsoft.Storage%2FStorageAccounts.			03				Click on the name of the storage account that holds the SAS token that you want to regenerate.			04				In the navigation panel under Settings choose Shared access signature.			05				On the Shared access signature page perform the following actions to generate your new SAS token:										From Allowed services select the Azure Storage services accessible with the account SAS.											From the Allowed resource types section select the storage resource types accessible with the account SAS.											From Allowed permissions choose the permissions required for the account SAS. Permissions are valid only if they match the specified allowed resource type otherwise they are ignored.											Use the Start and End date and time picker controls from the Start and expiry date/time section to configure the start and the end date/time during which the account SAS is valid. Make sure that the SAS validity period configured at this step is no longer that an hour.											In the Allowed IP addresses box enter the client IP address or range of IP addresses from which to accept requests.											From Allowed protocols choose the protocols permitted for requests made with the account SAS. We strongly recommend allowing requests over HTTPS only.											From Signing key select the access key used to authenticate the requests. Note that if you regenerate the selected access key the existing SAS token will also need to be regenerated. This action will not interrupt access to disks from your Azure virtual machines (VMs).											Click Generate SAS and connection string to create your new Azure Shared Access Signature (SAS).					06				Replace the Shared Access Signature (SAS) token defined within the SAS URL(s) provided to your storage account clients with the compliant token generated at the previous step (e.g. ?sv=2018-03-28&ss=bfqt&srt=sco&sp=rwdlacup&se=2019-06-11T12:33:50Z&st=2019-06-11T13:33:50Z&spr=https&sig=aaaabbbbccccddddaaaabbbbccccddddaaaabbbbccccdddd) available in the SAS token box.			07				If required repeat step no. 5 and 6 to generate new Shared Access Signature (SAS) tokens.			08				Repeat steps no. 3 â 7 for each storage account available in the current Azure subscription.			09				Repeat steps no. 3 â 8 for each subscription created in your Microsoft Azure cloud account.			,01				First configure the Shared Access Signature (SAS) validity period (in this case 1 hour):end=`date -d "60 minutes" '+%Y-%m-%dT%H:%MZ'`02				Next run storage account generate-sas command (Windows/macOS/Linux) using the name of the storage account that holds the non-compliant SAS token as identifier parameter to generate a new Shared Access Signature (SAS) for Blob File Queue and Table Azure Storage services on Linux with a validity period of one hour:az storage account generate-sas	--permissions cdlruwap	--account-name abcd1234abcd1234abcd1234	--services bfqt	--resource-types sco	--expiry $end -otsv03				The command output should return the new Shared Access Signature (SAS) parameters e.g.:se=2019-06-11T17%3A23Z&sp=rwdlacup&sv=2018-03-28&ss=qt&srt=sco&sig=abcdabc/abcd1234abcd%1234abcd1234abcd1234abcd%123404				If required repeat steps no. 1 â 3 to generate new Shared Access Signature (SAS) tokens.			05				Repeat steps no. 1 â 4 for each storage account available in the current Azure subscription.			06				Repeat steps no. 1 â 5 for each subscription created in your Microsoft Azure cloud account.			,,https://www.cloudconformity.com/knowledge-base/azure/StorageAccounts/shared-access-signature-tokens-expire-within-an-hour.html
Regenerate Storage Account Access Keys Periodically,Storage Accounts,Medium (should be achieved),StorageAccounts-002,Ensure that Azure Storage account access keys are regenerated every 90 days in order to decrease the likelihood of accidental exposures and protect your storage account resources against unauthorized access.,When a Microsoft Azure Storage account is created Azure generates two 512-bit storage access keys to be used for authentication when storage resources such as blobs files tables and queues are accessed by applications. Rotating these credentials periodically will significantly reduce the chances that a compromised set of access keys can be used without your knowledge to access resources available in your storage account.,To determine if your storage account access keys are periodically regenerated (by default every 90 days) perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to Azure Storage accounts blade at https://portal.azure.com/#blade/HubsExtension/BrowseResourceBlade/resourceType/Microsoft.Storage%2FStorageAccounts.03				Click on the name (link) of the Azure Storage account that you want to examine.			04				In the navigation panel choose Activity log to view the activity log events generated for the selected storage account.			05				On the Activity log page click on the Timespan dropdown menu select Custom and use the Start time and End time controls to select a range of the last 90 days then click Apply to submit the request. Once the request is sent the Azure Activity log should list all the events triggered in the last 90 days.			06				Enter RegenerateKey in the Search text box available under the blade top menu and press Enter. If this filtering process does not return any results there were no access credentials rotated in the past 90 days for the selected storage account therefore the access keys are not periodically regenerated.			07				Repeat steps no. 3 â 6 for each storage account available within the selected subscription.			08				Repeat steps no. 3 â 7 for each subscription created in your Microsoft Azure cloud account.			,01				Run storage account list command (Windows/macOS/Linux) using custom query filters to describe the identifier (name) of the storage account available in the current Azure subscription and the associated resource group. Every storage account must belong to an Azure resource group. A resource group is a logical container for grouping your Azure services:az storage account list	--query '[*].{name:nameresourceGroup:resourceGroup}'02				The command output should return the requested storage account information:[  {    "name": "abcd1234abcd1234abcd1234"    "resourceGroup": "cloud-shell-storage-westeurope"  }]03				Run monitor activity-log list command (Windows/macOS/Linux) using the name of the resource group associated with the storage account that you want to examine as identifier parameter and custom query filters to list the Activity log events succeeded within the past 90 days:az monitor activity-log list	--resource-group cloud-shell-storage-westeurope	--status Succeeded	--offset 90d	--query '[*].{authorization:authorization.actioneventTimestamp:eventTimestamp}'04				The command output should return the requested information (in this case the event type and its timestamp):[  {    "authorization": "Microsoft.Storage/storageAccounts/listKeys/action"    "eventTimestamp": "2019-06-04T17:25:59.595898+00:00"  }  {    "authorization": "Microsoft.Storage/storageAccounts/regenerateKey/action"    "eventTimestamp": "2019-01-04T11:20:35.450865+00:00"  }  {    "authorization": "Microsoft.Storage/storageAccounts/listKeys/action"    "eventTimestamp": "2019-01-04T11:20:34.419170+00:00"  }  ...  {    "authorization": "Microsoft.Storage/storageAccounts/listKeys/action"    "eventTimestamp": "2019-01-18T07:52:24.085801+00:00"  }  {    "authorization": "Microsoft.Resources/checkPolicyCompliance/read"    "eventTimestamp": "2019-01-17T19:49:55.367636+00:00"  }  {    "authorization": "Microsoft.Storage/storageAccounts/listKeys/action"    "eventTimestamp": "2019-01-17T19:39:46.066688+00:00"  }]				Check the "eventTimestamp" attribute value for any entries with the "authorization" attribute set to "Microsoft.Storage/storageAccounts/regenerateKey/action" to determine if there are any access key regeneration events triggered in the past 90 days. If there are no such entries or the timestamp returned by the "eventTimestamp" attribute is older than 90 days there were no access credentials rotated in the past 90 days for the selected storage account.			05				Repeat step no. 3 and 4 for each resource group created within the current subscription.			06				Repeat steps no. 1 â 5 for each subscription available in your Microsoft Azure cloud account.			,01				Sign in to Azure Management Console.			02				Navigate to Azure Storage accounts blade at https://portal.azure.com/#blade/HubsExtension/BrowseResourceBlade/resourceType/Microsoft.Storage%2FStorageAccounts.			03				Click on the name of the storage account that holds the access keys that you want to regenerate (see Audit section part I to identify the right resource).			04				In the navigation panel under Settings choose Access keys. Your storage account access keys should be displayed on this page together with the complete connection string for each key.			05				Regenerating your access keys can affect the cloud applications that are dependent on these keys. To initiate the regeneration process update the connection string(s) in your application code to use the secondary key (i.e. key2) available in the Connection string box.			06				Click on the Regenerate button next to key1 to regenerate the primary access key then select Yes to confirm your action.			07				Once the new primary access key is successfully generated update the connection string(s) within your application code to reference the new key.			08				Repeat steps no. 5 â 7 to regenerate the secondary access key in the same manner.			09				Repeat steps no. 3 â 8 for each storage account available in the current Azure subscription.			10				Repeat steps no. 3 â 9 for each subscription created in your Microsoft Azure cloud account.			,01				Regenerating your access keys can affect the cloud applications that are dependent on these keys. To start the regeneration process update all the connection string(s) available in your application code to use the secondary key (i.e. key2). To retrieve the connection string for the secondary access key run storage account show-connection-string command (Windows/macOS/Linux) using the name of the storage account that contains the access keys that you want to regenerate as identifier parameter (see Audit section part II to identify the right account):az storage account show-connection-string	--name abcd1234abcd1234abcd1234	--resource-group cloud-shell-storage-westeurope	--key secondary02				The command output should return the connection string for the secondary access key:{  "connectionString": "DefaultEndpointsProtocol=https;EndpointSuffix=core.windows.net;AccountName=abcd1234abcd1234abcd1234;AccountKey=abcdabcdabcdabcdabcdabcdabcdabcd"}03				Run storage account keys renew command (Windows/macOS/Linux) to regenerate the primary access key for the specified storage account:az storage account keys renew	--account-name abcd1234abcd1234abcd1234	--resource-group cloud-shell-storage-westeurope	--key primary04				The command output should return the new primary access key (where "keyName" is set to "key1"):[  {    "keyName": "key1"    "permissions": "Full"    "value": "aaaabbbbccccddddaaaabbbbccccdddd"  }  {    "keyName": "key2"    "permissions": "Full"    "value": "abcdabcdabcdabcdabcdabcdabcdabcd"  }]05				Update again the connection string(s) available in your application code to reference the new primary key (i.e. key1). To get the connection string for the regenerated primary access key run storage account show-connection-string command (Windows/macOS/Linux) with the --key parameter set to primary:az storage account show-connection-string	--name abcd1234abcd1234abcd1234	--resource-group cloud-shell-storage-westeurope	--key primary06				The command output should return the connection string for the new primary access key:{  "connectionString": "DefaultEndpointsProtocol=https;EndpointSuffix=core.windows.net;AccountName=abcd1234abcd1234abcd1234;AccountKey=aaaabbbbccccddddaaaabbbbccccdddd"}07				Repeat step no. 3 and 4 to regenerate the secondary access key in the same manner.			08				Repeat steps no. 1 â 7 for each storage account available in the current Azure subscription.			09				Repeat steps no. 1 â 8 for each subscription created in your Microsoft Azure cloud account.			,https://www.cloudconformity.com/knowledge-base/azure/StorageAccounts/regenerate-storage-account-access-keys-periodically.html
Restrict Default Network Access for Storage Accounts,Storage Accounts,Medium (should be achieved),NA,Ensure that your Microsoft Azure Storage account is configured to deny access to traffic from all networks (including Internet traffic). By restricting access to your storage account default network you add a new layer of security since the default action is to accept connections from clients on any network. To limit access to selected networks or IP addresses you must first change the default action from "Allow" to "Deny".,The access to your storage account should be granted to specific Azure Virtual Networks which allows a secure network boundary for specific applications or to public IP address ranges which can enable connections from specific Internet services or on-premises clients. When network rules are configured only applications from allowed networks or IPs can access your storage resources. When requesting access from an allowed network and/or IP address a client/application should provide proper authorization i.e. a valid access key or a Shared Access Signatures (SAS) token to access the storage account.,To determine if the default network access is restricted for your storage accounts perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to Azure Storage accounts blade at https://portal.azure.com/#blade/HubsExtension/BrowseResourceBlade/resourceType/Microsoft.Storage%2FStorageAccounts. 			03				Click on the name of the Azure Storage account that you want to examine.			04				In the navigation panel under Settings select Firewalls and virtual networks to access network security configuration page for the selected storage account.			05				On the Firewalls and virtual networks page check the Allow access from network setting configuration. If Allow access from is set to All networks all networks including the Internet can access the selected storage account thus the default network access configuration is not compliant.			06				Repeat steps no. 3 â 5 for each storage account available within the selected subscription.			07				Repeat steps no. 3 â 6 for each subscription created in your Microsoft Azure cloud account.			,01				Run storage account list command (Windows/macOS/Linux) using custom query filters to describe the identifier for each storage account available in the current Azure subscription:az storage account list 	--query '[*].name'02				The command output should return the requested identifiers (i.e. storage account names):[  "abcdabcdabcd123412341234"  "123412341234abcdabcdabcd"]03				Run storage account show command (Windows/macOS/Linux) using the name of the storage account that you want to examine as identifier parameter and custom query filters to get the default network access rule configuration for the selected storage account:az storage account show	--name abcdabcdabcd123412341234	--query 'networkRuleSet.defaultAction'04				The command output should return the default action configured for the default network access rule:"Allow"				If the command output returns "Allow" as shown in the example above all networks including the Internet can access the selected Azure Storage account therefore the default network access configuration is not compliant.			05				Repeat step no. 3 and 4 for each storage account available within the selected subscription.			06				Repeat steps no. 1 â 5 for each subscription created in your Microsoft Azure cloud account.			,01				Sign in to Azure Management Console.			02				Navigate to Azure Storage accounts blade at https://portal.azure.com/#blade/HubsExtension/BrowseResourceBlade/resourceType/Microsoft.Storage%2FStorageAccounts. 			03				Click on the name of the Azure Storage account that you want to reconfigure (see Audit section part I to identify the right account).			04				In the navigation panel under Settings select Firewalls and virtual networks to access network security configuration page for the selected storage account.			05				On the Firewalls and virtual networks page choose Selected networks under Allow access from to show the network security configuration panel for the selected storage account.			06				On the configuration panel perform the following:										To secure your storage account with virtual networks use + Add existing virtual network or + Add new virtual network options available in the Virtual networks section to attach an existing virtual network or create and attach a new one.											To add IP ranges in order to allow access from the Internet or from your on-premises networks use the configuration controls available within the Firewall section.											To configure network access exceptions use the controls available in the Exceptions section.					07				Once the network security (including firewalls and virtual networks) for the selected storage account is properly configured click Save to apply the changes. Note that the firewall settings that allow access to storage services will remain in effect for up to a minute after saving the updated settings for restricting access.			08				Repeat steps no. 3 â 7 for each storage account available in the selected subscription.			09				Repeat steps no. 3 â 8 for each subscription created in your Microsoft Azure cloud account.			,01				Run storage account update command (Windows/macOS/Linux) using the name of the storage account that you want to reconfigure as identifier parameter (see Audit section part II to identify the right account) to restrict default network access to the selected Microsoft Azure Storage account:az storage account update	--name abcdabcdabcd123412341234	--default-action Deny02				The command output should return the metadata available for the updated storage account:{  "accessTier": "Hot"  "creationTime": "2019-04-21T26:17:20.351002+00:00"  "enableAzureFilesAadIntegration": null  "enableHttpsTrafficOnly": false  "name": "abcdabcdabcd123412341234"   ...   "networkRuleSet": {    "bypass": "AzureServices"    "defaultAction": "Deny"    "ipRules": []    "virtualNetworkRules": []  }   ...   "statusOfPrimary": "available"  "statusOfSecondary": null  "tags": {    "ms-resource-usage": "azure-cloud-shell"  }  "type": "Microsoft.Storage/storageAccounts"}03				Now that the default network rule is configured to deny all access to your storage account data you have to configure the network rule in order to grant access from your allowed networks only. As an example the following configuration grants access to a specific on-premise network while blocking general Internet traffic. To grant access from your on-premise network only run storage account network-rule add command (Windows/macOS/Linux) to add a new network rule for an IP address range (e.g. 16.17.18.0/24):az storage account network-rule add	--account-name abcdabcdabcd123412341234	--ip-address 16.17.18.0/2404				The command output should return the metadata available for the reconfigured Microsoft Azure Storage account:{  "accessTier": "Hot"  "creationTime": "2019-04-21T26:17:20.351002+00:00"  "enableAzureFilesAadIntegration": null  "enableHttpsTrafficOnly": false  "name": "abcdabcdabcd123412341234"   ...   "networkRuleSet": {    "bypass": "AzureServices"    "defaultAction": "Deny"    "ipRules": [      {        "action": "Allow"        "ipAddressOrRange": "16.17.18.0/24"      }    ]    "virtualNetworkRules": []  }   ...   "statusOfPrimary": "available"  "statusOfSecondary": null  "tags": {    "ms-resource-usage": "azure-cloud-shell"  }  "type": "Microsoft.Storage/storageAccounts"}05				Repeat steps no. 1 â 4 for each storage account available in the selected subscription.			06				Repeat steps no. 1 â 5 for each subscription created in your Microsoft Azure cloud account.			,https://www.cloudconformity.com/knowledge-base/azure/StorageAccounts/restrict-default-network-access.html
Apply Latest OS Patches,Virtual Machines,Medium (should be achieved),VirtualMachines-005,Ensure that the latest OS patches (critical security and system updates) are being applied to all your Microsoft Azure virtual machines (Windows and Linux) in order to improve the operating system (OS) general stability address a specific bug or flaw or fix a security vulnerability.,Azure Security Center retrieves a list of available security and critical updates from Windows Update or Windows Server Update Services (WSUS) depending on the service configured on your virtual machines (VMs). The Security Center service also checks for the latest updates within Linux systems. If one of your virtual machines is missing a system update Azure Security Center will recommend updating the VM's operating system. Cloud Conformity strongly recommends applying the latest system updates/OS patches as soon as these become available in order to improve your VM's security functionality and performance.,To determine if your Azure VMs have the latest system updates installed perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to Azure Security Center blade at https://portal.azure.com/#blade/Microsoft_Azure_Security/SecurityMenuBlade/. 			03				In the navigation panel under RESOURCE SECURITY HYGIENE choose Recommendations to view the recommendations made available by the Azure Security Center for the cloud resources available in the current subscription. A recommendation represents an action for you to take in order to secure your Azure resources. Each Security Center recommendation consists of 1) a short description of what is being recommended 2) the steps required to implement the recommendation 3) the affected resource(s) that require the recommended actions and 4) the secure score impact if the recommendation is implemented.			04				On the Recommendations page search for the Missing system updates recommendation entry. If there is no Missing system updates recommendation the Security Center did not find any virtual machines that require the latest OS patches to be installed. If Missing system updates are available as recommendation one or more Microsoft Azure virtual machines (Windows and/or Linux) provisioned within the current subscription are missing the latest system updates (i.e. OS patches).			05				Repeat steps no. 2 â 4 for each Microsoft Azure subscription available in your account.			,01				Sign in to Azure Management Console.			02				Navigate to Azure Security Center blade at https://portal.azure.com/#blade/Microsoft_Azure_Security/SecurityMenuBlade/. 			03				In the navigation panel under RESOURCE SECURITY HYGIENE choose Recommendations to access the Azure Security Center recommendations made for the cloud resources available within the current subscription. 			04				On the Recommendations page click on the Missing system updates recommendation to open the list with the system (OS) updates that are missing from your Azure virtual machines (VMs).			05				On the Apply system updates dashboard click on the missing system (OS) update that you want to install in order to remediate the security issue.			06				On the selected missing system security update click on the Search button to open the search log with the Azure virtual machines that are missing the selected OS patch.			07				Select the Microsoft Azure virtual machine (VM) that you want to reconfigure in order to apply the required system update.			08				Connect to the selected Azure VM and install the missing security update based on the recommendations provided by the Azure Security Center.			09				Repeat step no. 7 and 8 to install the missing system security updates for the rest of the Azure virtual machines available on the list.			10				Repeat steps no. 5 â 9 to apply the rest of the missing system (OS) updates found by Security Center for the Azure VMs provisioned in the current subscription.			11				If required repeat steps no. 2 â 10 for other subscriptions available within your Microsoft Azure account.			,,,https://www.cloudconformity.com/knowledge-base/azure/VirtualMachines/apply-latest-os-patches.html
Enable Encryption for Boot Disk Volumes,Virtual Machines,High (not acceptable risk),VirtualMachines-001,Ensure that your Microsoft Azure virtual machine (VM) boot volumes are encrypted in order to meet security and compliance requirements. The boot (OS) volumes encryption and decryption is handled transparently and does not require any additional action from you your Azure virtual machine or your cloud application.,When working with production data it is strongly recommended to enable encryption in order to protect your VM's data from unauthorized access and fulfill compliance requirements for data-at-rest encryption within your organization. By encrypting your Azure virtual machine boot volumes you have the assurance that your entire VM data is fully unrecoverable without a key and therefore provides protection from unwarranted reads.,To determine if encryption at rest is enabled for your Azure VM boot volumes perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to All resources blade at https://portal.azure.com/#blade/HubsExtension/BrowseAll to access all your Microsoft Azure resources.			03				Choose the Azure subscription that you want to access from the Subscription filter box.			04				From the Type filter box select Virtual machine to list only the virtual machines (VMs) provisioned in the selected subscription.			05				Click on the name of the virtual machine that you want to examine.			06				In the navigation panel under Settings select Disks to view the disk volumes attached to the selected Azure VM.			07				On the Disks overview page under OS disk check the boot disk volume encryption status available in the ENCRYPTION column. If the encryption status is set to Not enabled the boot volume attached to the selected Microsoft Azure virtual machine (VM) is not encrypted.			08				Repeat steps no. 4 â 7 for each Azure virtual machine available within the selected subscription.			09				Repeat steps no. 3 â 8 for each subscription created in your Microsoft Azure cloud account.			,01				Run vm list command (Windows/macOS/Linux) using custom query filters to list the ID of each virtual machine (VM) provisioned within the current Azure subscription:az vm list	--query '[*].id'02				The command output should return the requested VM server identifiers (IDs):["/subscriptions/abcdabcd-1234-abcd-1234-abcd1234abcd/resourceGroups/CLOUD-SHELL-STORAGE-WESTEUROPE/providers/Microsoft.Compute/virtualMachines/cc-project5-main-server""/subscriptions/abcdabcd-1234-abcd-1234-abcd1234abcd/resourceGroups/CLOUD-SHELL-STORAGE-WESTEUROPE/providers/Microsoft.Compute/virtualMachines/cc-development-server"]03				Run vm encryption show command (Windows/macOS/Linux) using the ID of the virtual machine that you want to examine as identifier parameter to obtain the encryption status set for the boot (OS) disk volume attached to the selected Azure VM:az vm encryption show	--ids "/subscriptions/abcdabcd-1234-abcd-1234-abcd1234abcd/resourceGroups/CLOUD-SHELL-STORAGE-WESTEUROPE/providers/Microsoft.Compute/virtualMachines/cc-project5-main-server"	--query 'osDisk'04				The command output should return the requested VM boot volume encryption status:Azure Disk Encryption is not enabled				If the vm encryption show command output returns the following message: Azure Disk Encryption is not enabled the boot disk volume attached to the selected Microsoft Azure virtual machine (VM) is not currently encrypted.			05				Repeat step no. 3 and 4 for every Azure virtual machine provisioned in the current subscription.			06				Repeat steps no. 1 â 5 for each subscription available within your Microsoft Azure cloud account.			,01				Run keyvault create command (Windows/macOS/Linux) to create the Microsoft Azure Key Vault where the generated disk encryption key will be placed. Make sure that you set the --enabled-for-disk-encryption parameter to true for VM disk encryption support:az keyvault create	--name cc-disk-encryption-vault	--resource-group cloud-shell-storage-westeurope	--location westeurope	--enable-soft-delete true	--enable-purge-protection true	--enabled-for-disk-encryption true02				The command output should return the configuration metadata for the newly created Azure Key Vault:{  "id": "/subscriptions/abcdabcd-1234-abcd-1234-abcd1234abcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.KeyVault/vaults/cc-disk-encryption-vault"  "location": "westeurope"  "name": "cc-disk-encryption-vault"  "properties": {    "accessPolicies": [      {        "applicationId": null        "objectId": "1234abcd-1234-abcd-1234-abcd1234abcd"        "permissions": {          "certificates": [            "get"            "list"            "delete"            "create"            "import"            "update"            "managecontacts"            "getissuers"            "listissuers"            "setissuers"            "deleteissuers"            "manageissuers"            "recover"          ]          "keys": [            "get"            "create"            "delete"            "list"            "update"            "import"            "backup"            "restore"            "recover"          ]          "secrets": [            "get"            "list"            "set"            "delete"            "backup"            "restore"            "recover"          ]          "storage": [            "get"            "list"            "delete"            "set"            "update"            "regeneratekey"            "setsas"            "listsas"            "getsas"            "deletesas"          ]        }        "tenantId": "1234abcd-1234-abcd-1234-abcd1234abcd"      }    ]    "createMode": null    "enablePurgeProtection": true    "enableSoftDelete": true    "enabledForDeployment": false    "enabledForDiskEncryption": true    "enabledForTemplateDeployment": null    "networkAcls": null    "provisioningState": "Succeeded"    "sku": {      "name": "standard"    }    "tenantId": "1234abcd-1234-abcd-1234-abcd1234abcd"    "vaultUri": "https://cc-disk-encryption-vault.vault.azure.net/"  }  "resourceGroup": "cloud-shell-storage-westeurope"  "tags": {}  "type": "Microsoft.KeyVault/vaults"}03				Run vm encryption enable command (Windows/macOS/Linux) using the ID of the Azure virtual machine that you want to reconfigure as identifier parameter (see Audit section part II to identify the right VM) to enable encryption at rest for the boot disk volume attached to the selected Azure virtual machine (VM):az vm encryption enable	--ids "/subscriptions/abcdabcd-1234-abcd-1234-abcd1234abcd/resourceGroups/CLOUD-SHELL-STORAGE-WESTEUROPE/providers/Microsoft.Compute/virtualMachines/cc-project5-main-server"	--disk-encryption-keyvault cc-disk-encryption-vault	--volume-type OS04				The command output should return a confirmation message such as:The encryption request was accepted. Please use 'show' command to monitor the progress.05				Run again vm encryption show command (Windows/macOS/Linux) using the ID of the reconfigured virtual machine (VM) as identifier parameter to confirm the encryption process completion by listing the encryption configuration available for the boot disk volume encrypted at the previous steps:az vm encryption show	--ids "/subscriptions/abcdabcd-1234-abcd-1234-abcd1234abcd/resourceGroups/CLOUD-SHELL-STORAGE-WESTEUROPE/providers/Microsoft.Compute/virtualMachines/cc-project5-main-server"06				The command output should return the disk volume encryption configuration information:{  "disks": [    {      "encryptionSettings": [        {          "diskEncryptionKey": {            "sourceVault": {              "id": "/subscriptions/abcdabcd-1234-abcd-1234-abcd1234abcd/resourceGroups/CLOUD-SHELL-STORAGE-WESTEUROPE/providers/Microsoft.KeyVault/vaults/cc-disk-encryption-vault"            }          }          "enabled": true          "keyEncryptionKey": null        }      ]      "name": "cc-project5-main-server_disk1_abcdabcd1234abcd1234abcd1234abcd"      "statuses": [        {          "code": "EncryptionState/encrypted"          "displayStatus": "Encryption is enabled on disk"          "level": "Info"          "message": null          "time": null        }      ]    }  ]  "status": [    {      "code": "ProvisioningState/succeeded"      "displayStatus": "Provisioning succeeded"      "level": "Info"      "message": "OS disk encryption started"      "time": null    }  ]  "substatus": [    {      "code": "ComponentStatus/Microsoft.Azure.Security.AzureDiskEncryptionForLinux/succeeded"      "displayStatus": "Provisioning succeeded"      "level": "Info"      "message": "{\"os\": \"EncryptionInProgress\" \"data\": \"NotMounted\"}"      "time": null    }  ]}07				Repeat steps no. 3 â 6 for every Azure virtual machine (VM) available in the current subscription.			08				Repeat steps no. 1 â 7 for each subscription created within your Microsoft Azure cloud account.			,,https://www.cloudconformity.com/knowledge-base/azure/VirtualMachines/enable-encryption-for-boot-disk-volumes.html
Enable Encryption for Non-Boot Disk Volumes,Virtual Machines,High (not acceptable risk),VirtualMachines-002,Ensure that your Microsoft Azure virtual machine (VM) data volumes (i.e. non-boot volumes) are encrypted in order to meet security and compliance requirements. The VM data volume encryption and decryption is handled transparently and does not require any additional action from you your Azure virtual machine or your application.,When your cloud applications work with sensitive data such as PII (Personally Identifiable Information) it is strongly recommended to enable encryption to protect this data from unauthorized access and fulfill compliance requirements for data-at-rest encryption within your organization. By encrypting your Azure virtual machine non-boot volumes you have the guarantee that your entire VM data is fully unrecoverable without the protected key and therefore provides protection from unauthorized reads.,To determine if encryption at rest is enabled for all your Azure VM data volumes perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to All resources blade at https://portal.azure.com/#blade/HubsExtension/BrowseAll to access all your Microsoft Azure resources.			03				Choose the Azure subscription that you want to access from the Subscription filter box.			04				From the Type filter box select Virtual machine to show only the virtual machines (VMs) available in the selected subscription.			05				Click on the name of the virtual machine that you want to examine.			06				In the navigation panel under Settings select Disks to view the disk volumes attached to the selected Azure VM.			07				On the Disks overview page under Data disks check the disk volume encryption status available in the ENCRYPTION column for each data volume attached. If the encryption status is set to Not enabled the non-boot (data) volumes attached to the selected Microsoft Azure virtual machine (VM) are not encrypted.			08				Repeat steps no. 4 â 7 for each Azure virtual machine available in the selected subscription.			09				Repeat steps no. 3 â 8 for each subscription created in your Microsoft Azure cloud account.			,01				Run vm list command (Windows/macOS/Linux) using custom query filters to list the ID of each virtual machine (VM) provisioned in the current Azure subscription:az vm list   --query '[*].id'02				The command output should return the requested VM server identifiers (IDs):["/subscriptions/abcdabcd-1234-abcd-1234-abcd1234abcd/resourceGroups/CLOUD-SHELL-STORAGE-WESTEUROPE/providers/Microsoft.Compute/virtualMachines/cc-warehouse-app-server" "/subscriptions/abcdabcd-1234-abcd-1234-abcd1234abcd/resourceGroups/CLOUD-SHELL-STORAGE-WESTEUROPE/providers/Microsoft.Compute/virtualMachines/cc-internal-app-server"]03				Run vm encryption show command (Windows/macOS/Linux) using the ID of the virtual machine that you want to examine as identifier parameter to obtain the encryption status set for the non-boot (data) disk volumes attached to the selected Azure VM:az vm encryption show	--ids "/subscriptions/abcdabcd-1234-abcd-1234-abcd1234abcd/resourceGroups/CLOUD-SHELL-STORAGE-WESTEUROPE/providers/Microsoft.Compute/virtualMachines/cc-warehouse-app-server"	--query 'dataDisk'04				The command output should return the requested VM non-boot volume encryption status:Azure Disk Encryption is not enabled				If the vm encryption show command output returns the following message: Azure Disk Encryption is not enabled the non-boot disk volumes attached to the selected Microsoft Azure virtual machine (VM) are not configured to encrypt data at rest.			05				Repeat step no. 3 and 4 for every Azure virtual machine launched within the current subscription.			06				Repeat steps no. 1 â 5 for each subscription available in your Microsoft Azure cloud account.			,01				Run keyvault create command (Windows/macOS/Linux) to create the Microsoft Azure Key Vault where the encryption key required for data disk volume encryption will be stored. Make sure that you set the --enabled-for-disk-encryption parameter to true to enable VM disk encryption support:az keyvault create	--name cc-disk-encryption-vault	--resource-group cloud-shell-storage-westeurope	--location westeurope	--enable-soft-delete true	--enable-purge-protection true	--enabled-for-disk-encryption true02				The command output should return the configuration metadata for the newly created Azure Key Vault:{  "id": "/subscriptions/abcdabcd-1234-abcd-1234-abcd1234abcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.KeyVault/vaults/cc-disk-encryption-vault"  "location": "westeurope"  "name": "cc-disk-encryption-vault"  "properties": {    "accessPolicies": [      {        "applicationId": null        "objectId": "1234abcd-1234-abcd-1234-abcd1234abcd"        "permissions": {          "certificates": [            "get"            "list"            "delete"            "create"            "import"            "update"            "managecontacts"            "getissuers"            "listissuers"            "setissuers"            "deleteissuers"            "manageissuers"            "recover"          ]          "keys": [            "get"            "create"            "delete"            "list"            "update"            "import"            "backup"            "restore"            "recover"          ]          "secrets": [            "get"            "list"            "set"            "delete"            "backup"            "restore"            "recover"          ]          "storage": [            "get"            "list"            "delete"            "set"            "update"            "regeneratekey"            "setsas"            "listsas"            "getsas"            "deletesas"          ]        }        "tenantId": "1234abcd-1234-abcd-1234-abcd1234abcd"      }    ]    "createMode": null    "enablePurgeProtection": true    "enableSoftDelete": true    "enabledForDeployment": false    "enabledForDiskEncryption": true    "enabledForTemplateDeployment": null    "networkAcls": null    "provisioningState": "Succeeded"    "sku": {      "name": "standard"    }    "tenantId": "1234abcd-1234-abcd-1234-abcd1234abcd"    "vaultUri": "https://cc-disk-encryption-vault.vault.azure.net/"  }  "resourceGroup": "cloud-shell-storage-westeurope"  "tags": {}  "type": "Microsoft.KeyVault/vaults"}03				Run vm encryption enable command (Windows/macOS/Linux) using the ID of the Azure virtual machine that you want to reconfigure as identifier parameter (see Audit section part II to identify the right resource) to enable encryption at rest for all the non-boot (data) disk volumes attached to the selected Azure virtual machine (VM):az vm encryption enable	--ids "/subscriptions/abcdabcd-1234-abcd-1234-abcd1234abcd/resourceGroups/CLOUD-SHELL-STORAGE-WESTEUROPE/providers/Microsoft.Compute/virtualMachines/cc-warehouse-app-server"	--disk-encryption-keyvault cc-disk-encryption-vault	--volume-type DATA04				If successful the command output should return a confirmation message such as:The encryption request was accepted. Please use 'show' command to monitor the progress.05				Run again vm encryption show command (Windows/macOS/Linux) using the ID of the reconfigured virtual machine (VM) as identifier parameter to confirm the encryption process completion by listing the encryption configuration metadata available for the non-boot disk volumes encrypted at the previous steps: az vm encryption show	--ids "/subscriptions/abcdabcd-1234-abcd-1234-abcd1234abcd/resourceGroups/CLOUD-SHELL-STORAGE-WESTEUROPE/providers/Microsoft.Compute/virtualMachines/cc-warehouse-app-server"06				The command output should return the disk volume encryption configuration information:{  "disks": [    {      "encryptionSettings": [        {          "diskEncryptionKey": {            "sourceVault": {              "id": "/subscriptions/abcdabcd-1234-abcd-1234-abcd1234abcd/resourceGroups/CLOUD-SHELL-STORAGE-WESTEUROPE/providers/Microsoft.Compute/virtualMachines/cc-warehouse-app-server"            }          }          "enabled": true          "keyEncryptionKey": null        }      ]      "name": "cc-warehouse-app_DataDisk_0"      "statuses": [        {          "code": "EncryptionState/encrypted"          "displayStatus": "Encryption is enabled on disk"          "level": "Info"          "message": null          "time": null        }      ]    }  ]  "status": [    {      "code": "ProvisioningState/succeeded"      "displayStatus": "Provisioning succeeded"      "level": "Info"      "message": "Encryption succeeded for data volumes"      "time": null    }  ]  "substatus": [    {      "code": "ComponentStatus/Microsoft.Azure.Security.AzureDiskEncryptionForLinux/succeeded"      "displayStatus": "Provisioning succeeded"      "level": "Info"      "message": "{\"os\": \"Encrypted\" \"data\": \"EncryptionInProgress\"}"      "time": null    }  ]}07				Repeat steps no. 3 â 6 for every Azure virtual machine (VM) available within the current subscription.			08				Repeat steps no. 1 â 7 for each subscription created in your Microsoft Azure cloud account.			,,https://www.cloudconformity.com/knowledge-base/azure/VirtualMachines/enable-encryption-for-non-boot-disk-volumes.html
Enable Encryption for Unattached Disk Volumes,Virtual Machines,High (not acceptable risk),VirtualMachines-003,Ensure that your detached Microsoft Azure virtual machine (VM) disk volumes are encrypted in order to meet security and compliance requirements. The unattached disk volumes encryption and decryption is handled transparently and does not require any additional action from you your Azure virtual machine or your application.,By encrypting disk volumes detached from your Microsoft Azure virtual machines you have the assurance that your data is unrecoverable without an encryption key and thus provides protection from unwarranted reads. Even if the disk volumes are not attached to any of the VMs provisioned within your Azure cloud account there is always a risk where a compromised user account with administrative privileges can mount/attach these unencrypted disks and this action can lead to sensitive information disclosure and/or data leakage.,To determine if encryption at rest is enabled for your unattached VM disk volumes perform the following actions:,01				Run disk list command (Windows/macOS/Linux) using custom query filters to list the ID of each unattached managed disk volume available in the current Azure subscription:az disk list	--query '[?diskState == `Unattached`].id'02				The command output should return the requested disk volume identifiers (IDs):["/subscriptions/abcdabcd-1234-abcd-1234-abcd1234abcd/resourceGroups/CLOUD-SHELL-STORAGE-WESTEUROPE/providers/Microsoft.Compute/disks/cc-warehouse-app_DataDisk_0""/subscriptions/abcdabcd-1234-abcd-1234-abcd1234abcd/resourceGroups/CLOUD-SHELL-STORAGE-WESTEUROPE/providers/Microsoft.Compute/disks/cc-warehouse-app_DataDisk_1"]03				Run disk show command (Windows/macOS/Linux) using the ID of the managed disk volume that you want to examine as identifier parameter to obtain the encryption configuration settings available for the selected unattached VM disk volume:az disk show	--ids "/subscriptions/abcdabcd-1234-abcd-1234-abcd1234abcd/resourceGroups/CLOUD-SHELL-STORAGE-WESTEUROPE/providers/Microsoft.Compute/disks/cc-warehouse-app_DataDisk_0"	--query '{encryptionSettingsCollection: encryptionSettingsCollection}'04				The command output should return the configuration settings for the specified disk volume:{  "encryptionSettingsCollection": null}				If the disk show command output returns null as value for the "encryptionSettingsCollection" attribute as shown in the example above the unattached Azure VM disk volume is not currently encrypted.			05				Repeat step no. 3 and 4 for each Azure disk volume detached from a virtual machine provisioned in the current subscription.			06				Repeat steps no. 1 â 5 for each subscription available within your Microsoft Azure cloud account.			,01				Run keyvault create command (Windows/macOS/Linux) to create the Microsoft Azure Key Vault where the generated disk encryption key will be placed. Make sure that you set the --enabled-for-disk-encryption parameter to true for VM disk encryption support:az keyvault create	--name cc-encryption-vault	--resource-group cloud-shell-storage-westeurope	--location westeurope	--enable-soft-delete true	--enable-purge-protection true	--enabled-for-disk-encryption true02				The command output should return the configuration metadata for the newly created Azure Key Vault:{  "id": "/subscriptions/abcdabcd-1234-abcd-1234-abcd1234abcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.KeyVault/vaults/cc-encryption-vault"  "location": "westeurope"  "name": "cc-encryption-vault"  "properties": {    "accessPolicies": [      {        "applicationId": null        "objectId": "abcdabcd-1234-abcd-1234-abcd1234abcd"        "permissions": {          "certificates": [            "get"            "list"            "delete"            "create"            "import"            "update"            "managecontacts"            "getissuers"            "listissuers"            "setissuers"            "deleteissuers"            "manageissuers"            "recover"          ]          "keys": [            "get"            "create"            "delete"            "list"            "update"            "import"            "backup"            "restore"            "recover"          ]          "secrets": [            "get"            "list"            "set"            "delete"            "backup"            "restore"            "recover"          ]          "storage": [            "get"            "list"            "delete"            "set"            "update"            "regeneratekey"            "setsas"            "listsas"            "getsas"            "deletesas"          ]        }        "tenantId": "abcdabcd-1234-1234-1234-abcd1234abcd"      }    ]    "createMode": null    "enablePurgeProtection": true    "enableSoftDelete": true    "enabledForDeployment": false    "enabledForDiskEncryption": true    "enabledForTemplateDeployment": null    "networkAcls": null    "provisioningState": "Succeeded"    "sku": {      "name": "standard"    }    "tenantId": "abcdabcd-1234-1234-1234-abcd1234abcd"    "vaultUri": "https://cc-encryption-vault.vault.azure.net/"  }  "resourceGroup": "cloud-shell-storage-westeurope"  "tags": {}  "type": "Microsoft.KeyVault/vaults"}03				Run disk update command (Windows/macOS/Linux) using the ID of the detached Azure VM disk volume that you want to reconfigure as identifier parameter (see Audit section part II to identify the right resource) and the ID of Azure Key Vault created at the previous steps as configuration parameter to enable encryption at rest for the selected unattached disk volume:az disk update	--ids "/subscriptions/abcdabcd-1234-abcd-1234-abcd1234abcd/resourceGroups/CLOUD-SHELL-STORAGE-WESTEUROPE/providers/Microsoft.Compute/disks/cc-warehouse-app_DataDisk_0"	--set encryptionSettingsCollection.diskEncryptionKey="/subscriptions/abcdabcd-1234-abcd-1234-abcd1234abcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.KeyVault/vaults/cc-encryption-vault" EncryptionSettingsCollection.enabled=true04				The command output should return the configuration metadata for the reconfigured Azure VM disk volume:{  {    "creationData": {      "createOption": "Empty"      "imageReference": null      "sourceResourceId": null      "sourceUri": null      "storageAccountId": null    }    "diskIopsReadWrite": 120    "diskMbpsReadWrite": 25    "diskSizeGb": 32    "diskState": "Unattached"    "encryptionSettingsCollection": [      {        "diskEncryptionKey": {          "sourceVault": {            "id": "/subscriptions/abcdabcd-1234-abcd-1234-abcd1234abcd/resourceGroups/cloud-shell-storage-westeurope/providers/Microsoft.KeyVault/vaults/cc-encryption-vault"          }        }        "enabled": true        "keyEncryptionKey": null      }    ]    "hyperVgeneration": null    "id": "/subscriptions/abcdabcd-1234-abcd-1234-abcd1234abcd/resourceGroups/CLOUD-SHELL-STORAGE-WESTEUROPE/providers/Microsoft.Compute/disks/cc-warehouse-app_DataDisk_0"    "location": "westeurope"    "managedBy": null    "name": "cc-warehouse-app_DataDisk_0"    "osType": null    "provisioningState": "Succeeded"    "resourceGroup": "CLOUD-SHELL-STORAGE-WESTEUROPE"    "sku": {      "name": "StandardSSD_LRS"      "tier": "Standard"    }    "tags": {}    "timeCreated": "2019-09-10T11:31:24.276707+00:00"    "type": "Microsoft.Compute/disks"    "zones": [      "1"    ]}05				Repeat step no. 3 and 4 for each unencrypted Azure disk volume detached from a virtual machine available in the current subscription.			06				Repeat steps no. 1 â 5 for each subscription created within your Microsoft Azure cloud account.			,,,https://www.cloudconformity.com/knowledge-base/azure/VirtualMachines/enable-encryption-for-unattached-disk-volumes.html
Install Approved Extensions Only,Virtual Machines,High (not acceptable risk),VirtualMachines-004,Ensure that your Microsoft Azure virtual machines (VMs) have only organization-approved extensions installed in order to follow your organization's security and compliance requirements. Azure virtual machine extensions are small cloud applications that provide post-deployment configuration and automation tasks for virtual machines. These extensions run with administrative privileges and could potentially access any configuration file or piece of data on a virtual machine. Prior to enabling this conformity rule a list with the organization-approved software extensions must be defined within the rule settings on your Cloud Conformity account dashboard.,To adhere to security best practices and meet regulatory compliance each organization needs to maintain authorized software by carefully evaluating Azure virtual machine (VM) extensions and ensure that only those that are approved for use are actually implemented.,To determine if your Azure VMs have only approved extensions installed perform the following actions:,01				Sign in to your Cloud Conformity account access Install Approved Extensions Only conformity rule settings and note each virtual machine extension approved by your organization.			02				Sign in to Azure Management Console.			03				Navigate to All resources blade at https://portal.azure.com/#blade/HubsExtension/BrowseAll to access all your Microsoft Azure resources.			04				Choose the Azure subscription that you want to access from the Subscription filter box.			05				From the Type filter box select Virtual machine to show only the virtual machines (VMs) available in the selected subscription.			06				Click on the name of the virtual machine that you want to examine.			07				In the navigation panel under Settings select Extensions to access the list of extensions installed on selected Azure VM.			08				On the Extensions page compare the list with the extensions installed on the selected VM with the organization-approved extensions list identified at step no. 1. If one or more extensions installed on the VM are not found within the organization-approved extensions list the selected Microsoft Azure virtual machine has software extensions that are not approved for use.			09				Repeat steps no. 6 â 8 for each Azure virtual machine available in the selected subscription.			10				Repeat steps no. 4 â 9 for each subscription created in your Microsoft Azure cloud account.			,01				Sign in to your Cloud Conformity account access Install Approved Extensions Only conformity rule settings and note each virtual machine extension approved by your organization.			02				Run vm list command (Windows/macOS/Linux) using custom query filters to list the name and the associated resource group of each virtual machine (VM) provisioned in the current Azure subscription:az vm list	--output table	--query '[*].{name:name resourceGroup:resourceGroup}'03				The command output should return the requested virtual machine (VM) identifiers:Name                      ResourceGroup-----------------------   ------------------------------cc-internal-app-server    cloud-shell-storage-westeuropecc-warehouse-app-server   cloud-shell-storage-westeurope04				Run vm extension list command (Windows/macOS/Linux) using the name of the virtual machine that you want to examine and the associated resource group as identifier parameters to describe the names of the software extensions currently installed on the selected Azure VM:az vm extension list	--vm-name cc-internal-app-server	--resource-group cloud-shell-storage-westeurope	--query '[*].name'05				The command output should return the names of the extensions installed on the specified VM server:[  "AzureNetworkWatcherExtension"  "CustomScriptExtension"  "IaaSAntimalware"]			Compare the extensions list returned by the vm extension list command output with the organization-approved extensions list identified at step no. 1. If one or more VM extensions returned at the previous step are not found in the organization-approved extensions list defined in the conformity rule settings the selected Microsoft Azure virtual machine (VM) contains software extensions that are not approved for use.			06				Repeat step no. 4 and 5 for each Azure virtual machine provisioned within the current subscription.			07				Repeat steps no. 2 â 6 for each subscription available in your Microsoft Azure cloud account.			,01				Sign in to Azure Management Console.			02				Navigate to All resources blade at https://portal.azure.com/#blade/HubsExtension/BrowseAll to access all your Microsoft Azure resources.			03				Choose the Azure subscription that you want to access from the Subscription filter box.			04				From the Type filter box select Virtual machine to show only the virtual machines (VMs) available in the selected subscription.			05				Click on the name of the virtual machine that you want to reconfigure.			06				In the navigation panel under Settings select Extensions to access the list of the extensions currently installed on selected Azure VM.			07				On the Extensions overview page click on the name of the unapproved extension that you want to remove from your virtual machine (see Audit section part I to identify the right software extension).			08				On the selected VM extension page choose Uninstall then click Yes inside the Uninstall extension confirmation box to remove the extension from your virtual machine. The removal process should take just a few minutes.			09				Repeat step no. 7 and 8 for each unapproved software extension that you want to remove.			10				Repeat steps no. 5 â 9 for every Azure virtual machine available in the selected subscription.			11				Repeat steps no. 4 â 10 for each subscription created in your Microsoft Azure cloud account.			,01				Run vm extension delete command (Windows/macOS/Linux) using the name of the unapproved software extension that you want to uninstall as identifier parameter (see Audit section part II to identify the right extension) to remove the extension from the specified Azure virtual machine. For example the following command request removes a VM extension named "CustomScriptExtension" from a virtual machine identified by the name "cc-internal-app-server" (the command does not produce an output):az vm extension delete	--vm-name cc-internal-app-server	--resource-group cloud-shell-storage-westeurope	--name "CustomScriptExtension"02				Repeat step no. 1 for each unapproved VM software extension that you want to uninstall.			03				Repeat step no. 1 and 2 for every Azure virtual machine available in the current subscription.			04				Repeat steps no. 1 â 3 for each subscription available within your Microsoft Azure cloud account.			,https://www.cloudconformity.com/knowledge-base/azure/VirtualMachines/install-approved-extensions-only.html
Install Endpoint Protection,Virtual Machines,High (not acceptable risk),VirtualMachines-006,Ensure that all your Microsoft Azure virtual machines (VMs) have endpoint protection installed in order to help you identify and remove viruses spyware and other malicious software. The Azure Security Center service monitors the status of anti-malware protection for Azure virtual machines (VMs) and highlights if there is insufficient protection marking the virtual machines without endpoint protection as vulnerable to malware threats.,When endpoint protection software such as Microsoft Antimalware is installed on your Azure virtual machines (VMs) it provides real-time protection capability that helps you identify and eliminate viruses malware and other malicious software. This type of endpoint protection is also used to generate alerts when known malicious or unwanted software tries to install itself or run on your Azure VMs.,To determine if endpoint protection is installed on your Azure virtual machines perform the following actions:,01				Sign in to Azure Management Console.			02				Navigate to Azure Security Center blade at https://portal.azure.com/#blade/Microsoft_Azure_Security/SecurityMenuBlade/. 			03				In the navigation panel under RESOURCE SECURITY HYGIENE choose Recommendations to view the recommendations provided by Microsoft Azure Security Center for the cloud resources available in the current subscription. A recommendation represents an action for you to take in order to secure your Azure resources. Each Security Center recommendation consists of 1) a short description of what is being recommended 2) the steps required to implement the recommendation 3) the affected resource(s) that require the recommended actions and 4) the secure score impact if the recommendation is implemented.			04				On the Recommendations page search for the Install endpoint protection solution on virtual machines recommendation. If there is no recommendation with that name the Security Center did not find any virtual machines without endpoint protection. If Install endpoint protection solution on virtual machines is available as recommendation one or more Microsoft Azure virtual machines (VMs) available in the current subscription are missing endpoint protection (i.e. anti-malware protection).			05				Repeat steps no. 2 â 4 for each subscription created within your Microsoft Azure cloud account.			,01				Run vm list command (Windows/macOS/Linux) using custom query filters to list the name and the associated resource group of each virtual machine (VM) provisioned in the current Azure subscription:az vm list	--output table	--query '[*].{name:name resourceGroup:resourceGroup}'02				The command output should return the requested virtual machine (VM) identifiers:Name                       ResourceGroup------------------------   ------------------------------cc-ms-application-server   cloud-shell-storage-westeuropecc-main-application-vm     cloud-shell-storage-westeurope03				Run vm extension list command (Windows/macOS/Linux) using the name of the virtual machine that you want to examine and the associated resource group as identifier parameters to describe the names of the software extensions currently installed on the selected Azure VM:az vm extension list	--vm-name cc-ms-application-server	--resource-group cloud-shell-storage-westeurope	--query '[*].name'cc-internal-app-server    cloud-shell-storage-westeuropecc-warehouse-app-server   cloud-shell-storage-westeurope04				The command output should return the names of the extensions installed on the specified virtual machine:[  "AzureNetworkWatcherExtension"  "MicrosoftMonitoringAgent"]				Verify the extensions list returned by the vm extension list command output for extension names that start end or include the following keywords: "EndpointSecurity" "TrendMicroDSA" "Antimalware" "EndpointProtection" "SCWPAgent" "PortalProtectExtension" and "FileSecurity". If none of the installed VM extensions returned at the previous step contain the specified keywords the selected Microsoft Azure virtual machine is missing anti-malware protection (also known as endpoint protection).			05				Repeat step no. 3 and 4 for each virtual machine (VM) provisioned in the current Azure subscription.			06				Repeat steps no. 1 â 5 for each subscription available in your Microsoft Azure cloud account.			,01				Sign in to Azure Management Console.			02				Navigate to Azure Security Center blade at https://portal.azure.com/#blade/Microsoft_Azure_Security/SecurityMenuBlade/. 			03				In the navigation panel under RESOURCE SECURITY HYGIENE choose Recommendations to access the Azure Security Center recommendations provided for the cloud resources available in the current subscription. 			04				On the Recommendations page click on Install endpoint protection solution on virtual machines recommendation to access the Security Center dashboard that lists the Azure virtual machines (VMs) that are missing endpoint protection.			05				On the Endpoint Protection not installed on Azure VMs dashboard select all the virtual machines available then click Install on <VMs number> VMs button to start the endpoint protection installation process.			06				On the Select Endpoint Protection dashboard choose Microsoft Antimalware extension as endpoint protection software then click Create to initiate the extension setup process.			07				On the Microsoft Antimalware dashboard use the configuration settings available on the extension blade to configure the VMs anti-malware protection based on your requirements. Once the software extension is configured click Ok to apply the changes and run the endpoint protection installation. The anti-malware software installation should take a few minutes.			08				Repeat steps no. 2 â 7 for each subscription created within your Microsoft Azure cloud account.			,01				Run vm extension set command (Windows/macOS/Linux) using the name of the Azure virtual machine (VM) that you want to reconfigure as identifier parameter (see Audit section part II to identify the right resource) to apply endpoint protection by installing Microsoft Antimalware software extension (i.e. IaaSAntimalware extension) ver. 1.5.5.9 on the selected Azure VM (the command does not produce an output):az vm extension set	--publisher Microsoft.Azure.Security	--name IaaSAntimalware	--version 1.5.5.9	--vm-name cc-ms-application-server	--resource-group cloud-shell-storage-westeurope	--no-wait02				Repeat step no. 1 for all the Microsoft Azure virtual machines that are missing anti-malware protection provisioned within the current subscription.			03				Repeat step no. 1 and 2 for each subscription available in your Microsoft Azure cloud account.			,https://www.cloudconformity.com/knowledge-base/azure/VirtualMachines/install-endpoint-protection.html
